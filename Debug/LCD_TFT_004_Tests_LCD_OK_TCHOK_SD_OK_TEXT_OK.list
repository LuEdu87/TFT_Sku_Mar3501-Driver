
LCD_TFT_004_Tests_LCD_OK_TCHOK_SD_OK_TEXT_OK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004494  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004830  08004830  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004838  08004838  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000034  08004874  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08004874  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc3a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d50  00000000  00000000  0002bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000215bf  00000000  00000000  0002eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c34  00000000  00000000  000500b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cccc7  00000000  00000000  00058ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ec  00000000  00000000  00125a30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004640 	.word	0x08004640

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08004640 	.word	0x08004640

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <LCD_SCREEN_Wr>:

/*
 * Creación de flancos para el comando de escritura en la pantalla
 */
static void  LCD_SCREEN_Wr(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(WR_GPIOx, WR_Pin_No);
 8000518:	2102      	movs	r1, #2
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <LCD_SCREEN_Wr+0x10>)
 800051c:	f002 ff35 	bl	800338a <HAL_GPIO_TogglePin>

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020000 	.word	0x40020000

08000528 <LCD_SCREEN_ClkPinsEnable>:
 * Activamos los relojes para los distintos buses que tinen
 * los pines
 */

static void LCD_SCREEN_ClkPinsEnable(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
	//Activamos los relojes de los perifericos
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <LCD_SCREEN_ConvertDatatoPins>:
 * Esta función convierte la palabra
 * de entrada y la subdividie en cada
 * pin correspondiente.
 */
static void LCD_SCREEN_ConvertDatatoPins(uint8_t *datos)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, ((*datos>>0) & 1));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	482d      	ldr	r0, [pc, #180]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 80005ae:	f002 fed3 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIOx, D1_Pin_No, ((*datos>>1) & 1));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	085b      	lsrs	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4828      	ldr	r0, [pc, #160]	; (8000668 <LCD_SCREEN_ConvertDatatoPins+0xd4>)
 80005c6:	f002 fec7 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIOx, D2_Pin_No, ((*datos>>2) & 1));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4821      	ldr	r0, [pc, #132]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 80005e0:	f002 feba 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIOx, D3_Pin_No, ((*datos>>3) & 1));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2108      	movs	r1, #8
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 80005f8:	f002 feae 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIOx, D4_Pin_No, ((*datos>>4) & 1));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	2120      	movs	r1, #32
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000610:	f002 fea2 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIOx, D5_Pin_No, ((*datos>>5) & 1));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	095b      	lsrs	r3, r3, #5
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	2110      	movs	r1, #16
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000628:	f002 fe96 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIOx, D6_Pin_No, ((*datos>>6) & 1));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000642:	f002 fe89 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIOx, D7_Pin_No, ((*datos>>7) & 1));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 8000656:	f002 fe7f 	bl	8003358 <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000
 8000668:	40020800 	.word	0x40020800
 800066c:	40020400 	.word	0x40020400

08000670 <LCD_SCREEN_HwInit>:
/*
 * Configuración Hardware para los pines de control sobre la pantalla
 *
 */
void LCD_SCREEN_HwInit(LCD_SCREEN_Handle_t hLCD)
{
 8000670:	b084      	sub	sp, #16
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
 8000676:	f107 0c08 	add.w	ip, r7, #8
 800067a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Activación de parametros genericos de los pines @CAMBIAR : hay que poner el modo en otro sitio,para poder cambiar entre RD y WR
	LCD_SCREEN_ClkPinsEnable();
 800067e:	f7ff ff53 	bl	8000528 <LCD_SCREEN_ClkPinsEnable>
	hLCD.hLCD_GPIOx.Pull = GPIO_PULLUP;
 8000682:	2301      	movs	r3, #1
 8000684:	613b      	str	r3, [r7, #16]
	hLCD.hLCD_GPIOx.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
	hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]

	/*
	 * COnfiguración Individuales de Pines
	 */
	//RST
	hLCD.hLCD_GPIOx.Pin = RST_Pin_No;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RST_GPIOx, &hLCD.hLCD_GPIOx);
 8000692:	f107 0108 	add.w	r1, r7, #8
 8000696:	4835      	ldr	r0, [pc, #212]	; (800076c <LCD_SCREEN_HwInit+0xfc>)
 8000698:	f002 fccc 	bl	8003034 <HAL_GPIO_Init>
	//CS
	hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	4832      	ldr	r0, [pc, #200]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 80006a6:	f002 fcc5 	bl	8003034 <HAL_GPIO_Init>
	//RS
	hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 80006aa:	2310      	movs	r3, #16
 80006ac:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006b4:	f002 fcbe 	bl	8003034 <HAL_GPIO_Init>
	//WR
	hLCD.hLCD_GPIOx.Pin = WR_Pin_No;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(WR_GPIOx, &hLCD.hLCD_GPIOx);
 80006bc:	f107 0108 	add.w	r1, r7, #8
 80006c0:	482c      	ldr	r0, [pc, #176]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006c2:	f002 fcb7 	bl	8003034 <HAL_GPIO_Init>
	//RD
	hLCD.hLCD_GPIOx.Pin = RD_Pin_No;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RD_GPIOx, &hLCD.hLCD_GPIOx);
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006d0:	f002 fcb0 	bl	8003034 <HAL_GPIO_Init>

	/*
	 * Configuración de Pines de Datos
	 */

	hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 80006d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006e0:	f002 fca8 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 80006e8:	f107 0108 	add.w	r1, r7, #8
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <LCD_SCREEN_HwInit+0xfc>)
 80006ee:	f002 fca1 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D2_Pin_No;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D2_GPIOx, &hLCD.hLCD_GPIOx);
 80006f8:	f107 0108 	add.w	r1, r7, #8
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006fe:	f002 fc99 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D3_Pin_No;
 8000702:	2308      	movs	r3, #8
 8000704:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D3_GPIOx, &hLCD.hLCD_GPIOx);
 8000706:	f107 0108 	add.w	r1, r7, #8
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800070c:	f002 fc92 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D4_Pin_No;
 8000710:	2320      	movs	r3, #32
 8000712:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D4_GPIOx, &hLCD.hLCD_GPIOx);
 8000714:	f107 0108 	add.w	r1, r7, #8
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800071a:	f002 fc8b 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D5_Pin_No;
 800071e:	2310      	movs	r3, #16
 8000720:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D5_GPIOx, &hLCD.hLCD_GPIOx);
 8000722:	f107 0108 	add.w	r1, r7, #8
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 8000728:	f002 fc84 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D6_Pin_No;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D6_GPIOx, &hLCD.hLCD_GPIOx);
 8000732:	f107 0108 	add.w	r1, r7, #8
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 8000738:	f002 fc7c 	bl	8003034 <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D7_Pin_No;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D7_GPIOx, &hLCD.hLCD_GPIOx);
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 8000748:	f002 fc74 	bl	8003034 <HAL_GPIO_Init>

	//SS

	hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
	hLCD.hLCD_GPIOx.Pin = D10_Pin_No;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D10_GPIOx, &hLCD.hLCD_GPIOx);
 8000754:	f107 0108 	add.w	r1, r7, #8
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800075a:	f002 fc6b 	bl	8003034 <HAL_GPIO_Init>
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40020800 	.word	0x40020800
 8000770:	40020400 	.word	0x40020400
 8000774:	40020000 	.word	0x40020000

08000778 <LCD_SCREEN_Enable>:

/*
 * Activación del PIN CS de la pantalla
 */
void  LCD_SCREEN_Enable(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LCD_SCREEN_Enable+0x40>)
 8000782:	f002 fde9 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000786:	200a      	movs	r0, #10
 8000788:	f001 fef0 	bl	800256c <HAL_Delay>
	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2101      	movs	r1, #1
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <LCD_SCREEN_Enable+0x40>)
 8000792:	f002 fde1 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2110      	movs	r1, #16
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 800079c:	f002 fddc 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, WR_Pin_No, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2102      	movs	r1, #2
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 80007a6:	f002 fdd7 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2101      	movs	r1, #1
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 80007b0:	f002 fdd2 	bl	8003358 <HAL_GPIO_WritePin>

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020000 	.word	0x40020000

080007c0 <LCD_SCREEN_Init>:
/*
 * Inicialización hardware , además de reseteo y enable del pin. A todo eso también se le suma
 * la parametrización de la pantalla.
 */
void LCD_SCREEN_Init(LCD_SCREEN_Handle_t hLCD)
{
 80007c0:	b084      	sub	sp, #16
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af02      	add	r7, sp, #8
 80007c8:	f107 0c08 	add.w	ip, r7, #8
 80007cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SCREEN_HwInit(hLCD);
 80007d0:	466a      	mov	r2, sp
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007da:	e882 0003 	stmia.w	r2, {r0, r1}
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e4:	f7ff ff44 	bl	8000670 <LCD_SCREEN_HwInit>

	LCD_SCREEN_Reset();	//Reseteo de la pantalla por hardware
 80007e8:	f000 f814 	bl	8000814 <LCD_SCREEN_Reset>
	LCD_SCREEN_Enable();//Habilitación PIN CS a 0
 80007ec:	f7ff ffc4 	bl	8000778 <LCD_SCREEN_Enable>
	//SCREEN Initial Parameters Writing.
	HAL_Delay(100);
 80007f0:	2064      	movs	r0, #100	; 0x64
 80007f2:	f001 febb 	bl	800256c <HAL_Delay>
	LCD_SCREEN_WriteData(InitCmd,sizeof(InitCmd));
 80007f6:	21ac      	movs	r1, #172	; 0xac
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <LCD_SCREEN_Init+0x50>)
 80007fa:	f000 f837 	bl	800086c <LCD_SCREEN_WriteData>
	HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f001 feb4 	bl	800256c <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800080c:	b004      	add	sp, #16
 800080e:	4770      	bx	lr
 8000810:	08004774 	.word	0x08004774

08000814 <LCD_SCREEN_Reset>:

/*
 * Comando para el reseteo de la pantalla
 */
void  LCD_SCREEN_Reset(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <LCD_SCREEN_Reset+0x4c>)
 800081e:	f002 fd9b 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f001 fea1 	bl	800256c <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2102      	movs	r1, #2
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <LCD_SCREEN_Reset+0x4c>)
 8000830:	f002 fd92 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <LCD_SCREEN_Reset+0x50>)
 800083a:	f002 fd8d 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 8000844:	f002 fd88 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, WR_Pin_No, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 800084e:	f002 fd83 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2101      	movs	r1, #1
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 8000858:	f002 fd7e 	bl	8003358 <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020800 	.word	0x40020800
 8000864:	40020400 	.word	0x40020400
 8000868:	40020000 	.word	0x40020000

0800086c <LCD_SCREEN_WriteData>:
 * Escribir una secuencia de parametros o comandos a la pantalla
 * es recomendable usar un array, con la lista de comandos
 * y parametros consecutivos que queremos.
 */
void  LCD_SCREEN_WriteData(short int *data,uint32_t lenght)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Counter;
	Counter=lenght;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	60fb      	str	r3, [r7, #12]

	while(Counter >0)
 800087a:	e034      	b.n	80008e6 <LCD_SCREEN_WriteData+0x7a>
	{
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <LCD_SCREEN_WriteData+0x88>)
 8000882:	f002 fd69 	bl	8003358 <HAL_GPIO_WritePin>
		LCD_SCREEN_Wr();
 8000886:	f7ff fe45 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins((uint8_t*)data);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe82 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000890:	f7ff fe40 	bl	8000514 <LCD_SCREEN_Wr>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	4816      	ldr	r0, [pc, #88]	; (80008f4 <LCD_SCREEN_WriteData+0x88>)
 800089a:	f002 fd5d 	bl	8003358 <HAL_GPIO_WritePin>
		Counter--;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
		data++;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3302      	adds	r3, #2
 80008a8:	607b      	str	r3, [r7, #4]
		while(Counter > 0)
 80008aa:	e019      	b.n	80008e0 <LCD_SCREEN_WriteData+0x74>
		{
			if(*data==-1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b6:	d106      	bne.n	80008c6 <LCD_SCREEN_WriteData+0x5a>
			{
				data++;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3302      	adds	r3, #2
 80008bc:	607b      	str	r3, [r7, #4]
				Counter--;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
				break;
 80008c4:	e00f      	b.n	80008e6 <LCD_SCREEN_WriteData+0x7a>
			}
			LCD_SCREEN_Wr();
 80008c6:	f7ff fe25 	bl	8000514 <LCD_SCREEN_Wr>
			LCD_SCREEN_ConvertDatatoPins((uint8_t*)data);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fe62 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
			LCD_SCREEN_Wr();
 80008d0:	f7ff fe20 	bl	8000514 <LCD_SCREEN_Wr>
			data++;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3302      	adds	r3, #2
 80008d8:	607b      	str	r3, [r7, #4]
			Counter--;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3b01      	subs	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
		while(Counter > 0)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1e2      	bne.n	80008ac <LCD_SCREEN_WriteData+0x40>
	while(Counter >0)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1c7      	bne.n	800087c <LCD_SCREEN_WriteData+0x10>

		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020000 	.word	0x40020000

080008f8 <LCD_SCREEN_WriteDataSingle>:

/*
 * Escribir un comando o un paramétro en la pantalla
 */
void  LCD_SCREEN_WriteDataSingle(uint8_t data,uint8_t CmdorData)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if(CmdorData==Comando)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d112      	bne.n	8000934 <LCD_SCREEN_WriteDataSingle+0x3c>
	{
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <LCD_SCREEN_WriteDataSingle+0x54>)
 8000914:	f002 fd20 	bl	8003358 <HAL_GPIO_WritePin>
		LCD_SCREEN_Wr();
 8000918:	f7ff fdfc 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins(&data);
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe38 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000924:	f7ff fdf6 	bl	8000514 <LCD_SCREEN_Wr>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2110      	movs	r1, #16
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <LCD_SCREEN_WriteDataSingle+0x54>)
 800092e:	f002 fd13 	bl	8003358 <HAL_GPIO_WritePin>
	{
		LCD_SCREEN_Wr();
		LCD_SCREEN_ConvertDatatoPins(&data);
		LCD_SCREEN_Wr();
	}
}
 8000932:	e007      	b.n	8000944 <LCD_SCREEN_WriteDataSingle+0x4c>
		LCD_SCREEN_Wr();
 8000934:	f7ff fdee 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins(&data);
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe2a 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000940:	f7ff fde8 	bl	8000514 <LCD_SCREEN_Wr>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40020000 	.word	0x40020000

08000950 <LCD_SCREEN_Coordenates>:
/*
 * Marcamos en la memoria, las coordenadas de origen y final
 * de lo que vamos a pintar.
 */
void LCD_SCREEN_Coordenates(uint16_t Xo,uint16_t Yo,uint16_t Xe,uint16_t Ye)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4604      	mov	r4, r0
 8000958:	4608      	mov	r0, r1
 800095a:	4611      	mov	r1, r2
 800095c:	461a      	mov	r2, r3
 800095e:	4623      	mov	r3, r4
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	4603      	mov	r3, r0
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	807b      	strh	r3, [r7, #2]
 800096a:	4613      	mov	r3, r2
 800096c:	803b      	strh	r3, [r7, #0]
	LCD_SCREEN_WriteDataSingle(0x2B, Comando);
 800096e:	2101      	movs	r1, #1
 8000970:	202b      	movs	r0, #43	; 0x2b
 8000972:	f7ff ffc1 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Yo>>8),Data);
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffb9 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Yo,Data);
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb3 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Ye>>8),Data);
 8000992:	883b      	ldrh	r3, [r7, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffab 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Ye,Data);
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2102      	movs	r1, #2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffa5 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>

	LCD_SCREEN_WriteDataSingle(0x2A, Comando);
 80009ae:	2101      	movs	r1, #1
 80009b0:	202a      	movs	r0, #42	; 0x2a
 80009b2:	f7ff ffa1 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Xo>>8),Data);
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff99 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Xo,Data);
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff93 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Xe>>8),Data);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff8b 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Xe,Data);
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff85 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <LCD_SCREEN_PaintColor>:

/*
 * Escribimos colores entre las coordenadas marcadas
 */
void LCD_SCREEN_PaintColor(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
	LCD_SCREEN_WriteDataSingle(0x2C, Comando);
 80009fc:	2101      	movs	r1, #1
 80009fe:	202c      	movs	r0, #44	; 0x2c
 8000a00:	f7ff ff7a 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	for(int i =0;i<100;i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e00a      	b.n	8000a20 <LCD_SCREEN_PaintColor+0x2a>
	{
		LCD_SCREEN_WriteDataSingle((uint8_t)(Violeta>>8), Data);
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	20f8      	movs	r0, #248	; 0xf8
 8000a0e:	f7ff ff73 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
		LCD_SCREEN_WriteDataSingle((uint8_t)Violeta, Data);
 8000a12:	2102      	movs	r1, #2
 8000a14:	201f      	movs	r0, #31
 8000a16:	f7ff ff6f 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	for(int i =0;i<100;i++)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b63      	cmp	r3, #99	; 0x63
 8000a24:	ddf1      	ble.n	8000a0a <LCD_SCREEN_PaintColor+0x14>
	}
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <LCD_SD_SPISoftInit>:




static void LCD_SD_SPISoftInit(LCD_SD_Handle_it *hLCD)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

	hLCD->hspi1.Instance = SPI1;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a20      	ldr	r2, [pc, #128]	; (8000abc <LCD_SD_SPISoftInit+0x8c>)
 8000a3c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hLCD->hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a46:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	hLCD->hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	hLCD->hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hLCD->hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	hLCD->hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hLCD->hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a70:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hLCD->hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128 ;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	hLCD->hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	hLCD->hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hLCD->hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	hLCD->hspi1.Init.CRCPolynomial = 10;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	220a      	movs	r2, #10
 8000a98:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	if (HAL_SPI_Init(&hLCD->hspi1) != HAL_OK)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f96c 	bl	8003d80 <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <LCD_SD_SPISoftInit+0x82>
	{
	Error_Handler();
 8000aae:	f001 fc4d 	bl	800234c <Error_Handler>
	}


}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013000 	.word	0x40013000

08000ac0 <LCD_SD_SPIHwInit>:
/*
 * Habilitación del reloj y configuración de los Pines de SPI como
 * alternate function.
 */
static void LCD_SD_SPIHwInit(SPI_HandleTypeDef *hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	HAL_SPI_MspInit(hspi);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 fd73 	bl	80015b4 <HAL_SPI_MspInit>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <LCD_SD_ReadFileData>:




static void LCD_SD_ReadFileData(LCD_SD_Handle_it *hLCD,uint32_t FileStartAddress1,uint32_t AmountofBytes)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b091      	sub	sp, #68	; 0x44
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	uint32_t FileStartAddress= FileStartAddress1*hLCD->SDhandle.BytesPerSector;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t tempTx=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CMD18[]	=	{SD_CMD18,(uint8_t)(FileStartAddress>>24),(uint8_t)(FileStartAddress>>16),(uint8_t)(FileStartAddress>>8),(uint8_t)FileStartAddress,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 8000afa:	2352      	movs	r3, #82	; 0x52
 8000afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000b26:	2301      	movs	r3, #1
 8000b28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t CMD12[]	=	{SD_CMD12,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 8000b38:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <LCD_SD_ReadFileData+0x13c>)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b42:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f240 2202 	movw	r2, #514	; 0x202
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fd60 	bl	800461e <memset>

	HAL_Delay(100);
 8000b5e:	2064      	movs	r0, #100	; 0x64
 8000b60:	f001 fd04 	bl	800256c <HAL_Delay>
	LCD_SD_SPIEmptyCycles(hLCD);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 fb79 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD18,(uint8_t*)ReceiveAns, sizeof(CMD18));
 8000b6a:	f107 0214 	add.w	r2, r7, #20
 8000b6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b72:	2308      	movs	r3, #8
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 fb47 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 8000b7a:	e006      	b.n	8000b8a <LCD_SD_ReadFileData+0xb2>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 fb56 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b8e:	d1f5      	bne.n	8000b7c <LCD_SD_ReadFileData+0xa4>
	}

	ReceiveAns[0]=0x00;
 8000b90:	2300      	movs	r3, #0
 8000b92:	753b      	strb	r3, [r7, #20]
	uint16_t CounterSize=0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	86fb      	strh	r3, [r7, #54]	; 0x36
	LCD_SCREEN_WriteDataSingle(MemoryWriteCMD, Comando);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	202c      	movs	r0, #44	; 0x2c
 8000b9c:	f7ff feac 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	do
	{
		LCD_SD_SPIReceive_IT(&hLCD->hspi1,LCD_SCREEN_WriteDataSingle,&tempTx, (uint8_t*)(hLCD->SDhandle.ReceiveBytesSector),hLCD->SDhandle.BytesPerSector+2,0xFF);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8000bae:	3302      	adds	r3, #2
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	9400      	str	r4, [sp, #0]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4916      	ldr	r1, [pc, #88]	; (8000c18 <LCD_SD_ReadFileData+0x140>)
 8000bc0:	f000 fb72 	bl	80012a8 <LCD_SD_SPIReceive_IT>
		while(ReceiveAns[0] != 0xFE)
 8000bc4:	e006      	b.n	8000bd4 <LCD_SD_ReadFileData+0xfc>
		{
			LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 fb31 	bl	8001236 <LCD_SD_SPIReceive>
		while(ReceiveAns[0] != 0xFE)
 8000bd4:	7d3b      	ldrb	r3, [r7, #20]
 8000bd6:	2bfe      	cmp	r3, #254	; 0xfe
 8000bd8:	d1f5      	bne.n	8000bc6 <LCD_SD_ReadFileData+0xee>
		}
		ReceiveAns[0]=0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	753b      	strb	r3, [r7, #20]
		CounterSize++;
 8000bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000be0:	3301      	adds	r3, #1
 8000be2:	86fb      	strh	r3, [r7, #54]	; 0x36
	}while(CounterSize<=(hLCD->SDhandle.FileSectorsSize));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8b3 321c 	ldrh.w	r3, [r3, #540]	; 0x21c
 8000bea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d9d7      	bls.n	8000ba0 <LCD_SD_ReadFileData+0xc8>


	ReceiveAns[0]=0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	753b      	strb	r3, [r7, #20]
	while(ReceiveAns[0] == 0x00)
 8000bf4:	e007      	b.n	8000c06 <LCD_SD_ReadFileData+0x12e>
	{

		LCD_SD_SPISend(hLCD,(uint8_t*)CMD12,(uint8_t*)ReceiveAns, sizeof(CMD12));
 8000bf6:	f107 0214 	add.w	r2, r7, #20
 8000bfa:	f107 011c 	add.w	r1, r7, #28
 8000bfe:	2308      	movs	r3, #8
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 fb01 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[0] == 0x00)
 8000c06:	7d3b      	ldrb	r3, [r7, #20]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f4      	beq.n	8000bf6 <LCD_SD_ReadFileData+0x11e>
	}



}
 8000c0c:	bf00      	nop
 8000c0e:	373c      	adds	r7, #60	; 0x3c
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	08004658 	.word	0x08004658
 8000c18:	080008f9 	.word	0x080008f9

08000c1c <LCD_SD_FindFile>:




static uint16_t LCD_SD_FindFile(LCD_SD_Handle_it *hLCD,char FileNameOut[],uint32_t SizeName)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	466b      	mov	r3, sp
 8000c2a:	461d      	mov	r5, r3

	uint8_t	 EqualCounter=0,LoopCounter=0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hLCD->SDhandle.FileFound=0;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	char FileName[SizeName];
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4603      	mov	r3, r0
 8000c44:	3b01      	subs	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	f04f 0400 	mov.w	r4, #0
 8000c56:	00d4      	lsls	r4, r2, #3
 8000c58:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c5c:	00cb      	lsls	r3, r1, #3
 8000c5e:	4601      	mov	r1, r0
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	f04f 0400 	mov.w	r4, #0
 8000c6c:	00d4      	lsls	r4, r2, #3
 8000c6e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c72:	00cb      	lsls	r3, r1, #3
 8000c74:	1dc3      	adds	r3, r0, #7
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c7e:	466b      	mov	r3, sp
 8000c80:	3300      	adds	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
	strcpy(FileName,FileNameOut);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fcd0 	bl	800462e <strcpy>

	for(int i=0;i<SizeName;i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	e019      	b.n	8000cc8 <LCD_SD_FindFile+0xac>
	{
		if((FileName[i]>0x60)&&(FileName[i]<0x7B))	//Si la letra en codigo ascii está entre esos valores, es minuscula
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b60      	cmp	r3, #96	; 0x60
 8000c9e:	d910      	bls.n	8000cc2 <LCD_SD_FindFile+0xa6>
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b7a      	cmp	r3, #122	; 0x7a
 8000caa:	d80a      	bhi.n	8000cc2 <LCD_SD_FindFile+0xa6>
		{
			FileName[i]=FileName[i]-32;		//Esto convierte la minuscula en mayuscula. Mirar Tabla ASCII Hex.
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3b20      	subs	r3, #32
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<SizeName;i++)
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8e1      	bhi.n	8000c94 <LCD_SD_FindFile+0x78>
		}
	}

	while(hLCD->SDhandle.FileFound!=1)
 8000cd0:	e0cd      	b.n	8000e6e <LCD_SD_FindFile+0x252>
	{
		LCD_SD_READSector(hLCD, hLCD->SDhandle.FileDirectory+LoopCounter);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cdc:	4413      	add	r3, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 fd24 	bl	800172e <LCD_SD_READSector>
			//Aquí buscamos el formato del archivo, en mayusculas
		for(int i=8;i<sizeof(hLCD->SDhandle.ReceiveBytesSector);i+=32)
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e0b5      	b.n	8000e58 <LCD_SD_FindFile+0x23c>
		{
			if((hLCD->SDhandle.ReceiveBytesSector[i]==FileName[SizeName-3])&&(hLCD->SDhandle.ReceiveBytesSector[i+1]==FileName[SizeName-2])&&(hLCD->SDhandle.ReceiveBytesSector[i+2]==FileName[SizeName-1]))
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b03      	subs	r3, #3
 8000cf8:	6939      	ldr	r1, [r7, #16]
 8000cfa:	5ccb      	ldrb	r3, [r1, r3]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 80a8 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3301      	adds	r3, #1
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	5cd2      	ldrb	r2, [r2, r3]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	5ccb      	ldrb	r3, [r1, r3]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f040 809d 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	5cd2      	ldrb	r2, [r2, r3]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	5ccb      	ldrb	r3, [r1, r3]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8092 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
			{

				for(int j=0;j<6;j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e02e      	b.n	8000d92 <LCD_SD_FindFile+0x176>
				{
					if((hLCD->SDhandle.ReceiveBytesSector[(i-8)]==FileName[0]))	//El primer caracter de la imagen debe coincidir, independientemente de que los demas sean espacios
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	3b08      	subs	r3, #8
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	5cd2      	ldrb	r2, [r2, r3]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d11f      	bne.n	8000d84 <LCD_SD_FindFile+0x168>
					{
						if((hLCD->SDhandle.ReceiveBytesSector[j+(i-8)]==FileName[j])||(hLCD->SDhandle.ReceiveBytesSector[j+(i-8)]==' ')) //Comparamos el resto de caracteres, pueden ser iguales al nombre o pueden ser espacios
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1a3 0208 	sub.w	r2, r3, #8
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	5cd2      	ldrb	r2, [r2, r3]
 8000d52:	6939      	ldr	r1, [r7, #16]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	440b      	add	r3, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d008      	beq.n	8000d70 <LCD_SD_FindFile+0x154>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f1a3 0208 	sub.w	r2, r3, #8
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	4413      	add	r3, r2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d105      	bne.n	8000d7c <LCD_SD_FindFile+0x160>
						{
							EqualCounter++;
 8000d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d74:	3301      	adds	r3, #1
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d7a:	e007      	b.n	8000d8c <LCD_SD_FindFile+0x170>
						}
						else
						{
							EqualCounter=0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8000d82:	e009      	b.n	8000d98 <LCD_SD_FindFile+0x17c>
						}
					}
					else
					{
						EqualCounter=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8000d8a:	e005      	b.n	8000d98 <LCD_SD_FindFile+0x17c>
				for(int j=0;j<6;j++)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	ddcd      	ble.n	8000d34 <LCD_SD_FindFile+0x118>
					}

				}
				if(EqualCounter==6)
 8000d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d158      	bne.n	8000e52 <LCD_SD_FindFile+0x236>
				{
					if((hLCD->SDhandle.ReceiveBytesSector[i-1]==(uint8_t)FileName[SizeName-6])||((hLCD->SDhandle.ReceiveBytesSector[i-1]=='1'))||((hLCD->SDhandle.ReceiveBytesSector[i-1]==' '))) //el ultimo caracter de nombre puede ser un 1, otro caracter igual al nombre o un espacio si el nombre es corto
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	5cd2      	ldrb	r2, [r2, r3]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b06      	subs	r3, #6
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	5ccb      	ldrb	r3, [r1, r3]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d00b      	beq.n	8000dcc <LCD_SD_FindFile+0x1b0>
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	2b31      	cmp	r3, #49	; 0x31
 8000dbe:	d005      	beq.n	8000dcc <LCD_SD_FindFile+0x1b0>
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	2b20      	cmp	r3, #32
 8000dca:	d142      	bne.n	8000e52 <LCD_SD_FindFile+0x236>
					{
						hLCD->SDhandle.FileSector = hLCD->SDhandle.FileDirectory+((((hLCD->SDhandle.ReceiveBytesSector[i+19]<<8)|(hLCD->SDhandle.ReceiveBytesSector[i+18]))-2)*(hLCD->SDhandle.ClusterSize));//SectorFileDirectory+(OffsetsDeClustersdelArchivo-2)*Cluster;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	3213      	adds	r2, #19
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	5c8a      	ldrb	r2, [r1, r2]
 8000dda:	0212      	lsls	r2, r2, #8
 8000ddc:	69f9      	ldr	r1, [r7, #28]
 8000dde:	3112      	adds	r1, #18
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	5c41      	ldrb	r1, [r0, r1]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	3a02      	subs	r2, #2
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	f891 120c 	ldrb.w	r1, [r1, #524]	; 0x20c
 8000dee:	fb01 f202 	mul.w	r2, r1, r2
 8000df2:	441a      	add	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
						hLCD->SDhandle.FileSize = (hLCD->SDhandle.ReceiveBytesSector[i+23]<<24)|(hLCD->SDhandle.ReceiveBytesSector[i+22]<<16)|(hLCD->SDhandle.ReceiveBytesSector[i+21]<<8)|(hLCD->SDhandle.ReceiveBytesSector[i+20]);
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3317      	adds	r3, #23
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	061a      	lsls	r2, r3, #24
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3316      	adds	r3, #22
 8000e08:	68f9      	ldr	r1, [r7, #12]
 8000e0a:	5ccb      	ldrb	r3, [r1, r3]
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3315      	adds	r3, #21
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	3214      	adds	r2, #20
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	5c8a      	ldrb	r2, [r1, r2]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
						hLCD->SDhandle.FileSectorsSize =hLCD->SDhandle.FileSize/hLCD->SDhandle.BytesPerSector;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8000e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
						hLCD->SDhandle.FileFound=1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e014      	b.n	8000e7c <LCD_SD_FindFile+0x260>
		for(int i=8;i<sizeof(hLCD->SDhandle.ReceiveBytesSector);i+=32)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3320      	adds	r3, #32
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f240 2201 	movw	r2, #513	; 0x201
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	f67f af44 	bls.w	8000cec <LCD_SD_FindFile+0xd0>
					}
				}
			}
		}
		LoopCounter++;
 8000e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(hLCD->SDhandle.FileFound!=1)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f47f af2c 	bne.w	8000cd2 <LCD_SD_FindFile+0xb6>

	}

	return 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	46ad      	mov	sp, r5
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e88 <LCD_SD_Mounting>:




static uint8_t LCD_SD_Mounting(LCD_SD_Handle_it *hLCD)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b092      	sub	sp, #72	; 0x48
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

	uint8_t CMD0[] 		= 	{SD_CMD0,0x00,0x00,0x00,0x00,SD_CRC_CMD0,0x00,0x00};
 8000e90:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <LCD_SD_Mounting+0x188>)
 8000e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD8[] 		= 	{SD_CMD8,0x00,0x00,0x01,0xAA,SD_CRC_CMD8,0x00,0x00};
 8000e9e:	4a5d      	ldr	r2, [pc, #372]	; (8001014 <LCD_SD_Mounting+0x18c>)
 8000ea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD16[] 	= 	{SD_CMD16,0x00,0x00,0x02,0x00,SD_CRC_NO,0x00,0x00};
 8000eac:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <LCD_SD_Mounting+0x190>)
 8000eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD55[] 	= 	{SD_CMD55,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <LCD_SD_Mounting+0x194>)
 8000ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ACMD41[] 	= 	{SD_ACMD41,0x40,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ec8:	4a55      	ldr	r2, [pc, #340]	; (8001020 <LCD_SD_Mounting+0x198>)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD58[]		= 	{SD_CMD58,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ed6:	4a53      	ldr	r2, [pc, #332]	; (8001024 <LCD_SD_Mounting+0x19c>)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD59[]		= 	{SD_CMD59,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <LCD_SD_Mounting+0x1a0>)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eee:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t ReceiveAns[8] = {0x0,0x0,0x0,0x0,0x0,0x0,0x00,0x00};
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]



	while(ReceiveAns[7]!=0x01)
 8000efc:	e00a      	b.n	8000f14 <LCD_SD_Mounting+0x8c>
	{
		LCD_SD_SPIEmptyCycles(hLCD);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f9ac 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)CMD0,(uint8_t*)ReceiveAns, sizeof(CMD0));
 8000f04:	f107 0208 	add.w	r2, r7, #8
 8000f08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f97a 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[7]!=0x01)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d1f1      	bne.n	8000efe <LCD_SD_Mounting+0x76>
	}



	LCD_SD_SPIEmptyCycles(hLCD);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f99e 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD8,(uint8_t*)ReceiveAns, sizeof(CMD8));
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f28:	2308      	movs	r3, #8
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f96c 	bl	8001208 <LCD_SD_SPISend>
	LCD_SD_SPIReceive(hLCD, (uint8_t*)ReceiveAns, sizeof(ReceiveAns));
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f97c 	bl	8001236 <LCD_SD_SPIReceive>


	LCD_SD_SPIEmptyCycles(hLCD);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f98c 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD58,(uint8_t*)ReceiveAns, sizeof(CMD58));
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	f107 0118 	add.w	r1, r7, #24
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f95a 	bl	8001208 <LCD_SD_SPISend>

	LCD_SD_SPIEmptyCycles(hLCD);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f981 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD59,(uint8_t*)ReceiveAns, sizeof(CMD59));
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f107 0110 	add.w	r1, r7, #16
 8000f62:	2308      	movs	r3, #8
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f94f 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[7]!=0x00)
 8000f6a:	e015      	b.n	8000f98 <LCD_SD_Mounting+0x110>
	{
		LCD_SD_SPIEmptyCycles(hLCD);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f975 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)CMD55,(uint8_t*)ReceiveAns, sizeof(CMD55));
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f943 	bl	8001208 <LCD_SD_SPISend>
		LCD_SD_SPIEmptyCycles(hLCD);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f96a 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)ACMD41,(uint8_t*)ReceiveAns, sizeof(ACMD41));
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	f107 0120 	add.w	r1, r7, #32
 8000f90:	2308      	movs	r3, #8
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f938 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[7]!=0x00)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1e6      	bne.n	8000f6c <LCD_SD_Mounting+0xe4>
	}


	hLCD->hspi1.Instance->CR1 &= ~(SPI_CR1_SPE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 &= ~(0x07<<SPI_CR1_BR_Pos);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fc0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000fc4:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 |= (3<<SPI_CR1_BR_Pos);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fd4:	f042 0218 	orr.w	r2, r2, #24
 8000fd8:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 |= (SPI_CR1_SPE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	601a      	str	r2, [r3, #0]
	LCD_SD_SPIEmptyCycles(hLCD);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f934 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD16,(uint8_t*)ReceiveAns, sizeof(CMD16));
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f902 	bl	8001208 <LCD_SD_SPISend>

	return ReceiveAns[1];
 8001004:	7a7b      	ldrb	r3, [r7, #9]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3748      	adds	r7, #72	; 0x48
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	08004660 	.word	0x08004660
 8001014:	08004668 	.word	0x08004668
 8001018:	08004670 	.word	0x08004670
 800101c:	08004678 	.word	0x08004678
 8001020:	08004680 	.word	0x08004680
 8001024:	08004688 	.word	0x08004688
 8001028:	08004690 	.word	0x08004690

0800102c <LCD_SD_FindFilesDirectory>:




static void LCD_SD_FindFilesDirectory(LCD_SD_Handle_it *hLCD)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	uint16_t ReservedSector	=	0;
 8001034:	2300      	movs	r3, #0
 8001036:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t HiddenSector	=	0;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
	uint32_t SectorPerFlat	=	0;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]

	uint32_t SectorAddress=hLCD->SDhandle.PartitionTable*512;	//Convertir Sector en dirección, ya que cada sector tiene 512 bytes.
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	61bb      	str	r3, [r7, #24]
	uint8_t CMD17[]={SD_CMD17,(uint8_t)(SectorAddress>>24),(uint8_t)(SectorAddress>>16),(uint8_t)(SectorAddress>>8),(uint8_t)SectorAddress,SD_CRC_NO,0x00,0x00};
 800104a:	2351      	movs	r3, #81	; 0x51
 800104c:	743b      	strb	r3, [r7, #16]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	0e1b      	lsrs	r3, r3, #24
 8001052:	b2db      	uxtb	r3, r3
 8001054:	747b      	strb	r3, [r7, #17]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b2db      	uxtb	r3, r3
 8001064:	74fb      	strb	r3, [r7, #19]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	753b      	strb	r3, [r7, #20]
 800106c:	2301      	movs	r3, #1
 800106e:	757b      	strb	r3, [r7, #21]
 8001070:	2300      	movs	r3, #0
 8001072:	75bb      	strb	r3, [r7, #22]
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]

	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]


	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f240 2202 	movw	r2, #514	; 0x202
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fac7 	bl	800461e <memset>



	LCD_SD_SPIEmptyCycles(hLCD);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f8e3 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	f107 0110 	add.w	r1, r7, #16
 800109e:	2308      	movs	r3, #8
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8b1 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 80010a6:	e006      	b.n	80010b6 <LCD_SD_FindFilesDirectory+0x8a>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8c0 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	2bfe      	cmp	r3, #254	; 0xfe
 80010ba:	d1f5      	bne.n	80010a8 <LCD_SD_FindFilesDirectory+0x7c>
	}
	LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f240 2202 	movw	r2, #514	; 0x202
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8b6 	bl	8001236 <LCD_SD_SPIReceive>

	if((hLCD->SDhandle.ReceiveBytesSector[01]==0x58)&&(hLCD->SDhandle.ReceiveBytesSector[00]==0xEB))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	2b58      	cmp	r3, #88	; 0x58
 80010d0:	d14b      	bne.n	800116a <LCD_SD_FindFilesDirectory+0x13e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2beb      	cmp	r3, #235	; 0xeb
 80010d8:	d147      	bne.n	800116a <LCD_SD_FindFilesDirectory+0x13e>
	{
		HiddenSector 	= (hLCD->SDhandle.ReceiveBytesSector[0x1F]<<24) | (hLCD->SDhandle.ReceiveBytesSector[0x1E]<<16) | (hLCD->SDhandle.ReceiveBytesSector[0x1D]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x1C]);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7fdb      	ldrb	r3, [r3, #31]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f9b      	ldrb	r3, [r3, #30]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7f5b      	ldrb	r3, [r3, #29]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	4313      	orrs	r3, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	7f12      	ldrb	r2, [r2, #28]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	623b      	str	r3, [r7, #32]
		SectorPerFlat 	= (hLCD->SDhandle.ReceiveBytesSector[0x27]<<24) | (hLCD->SDhandle.ReceiveBytesSector[0x26]<<16) | (hLCD->SDhandle.ReceiveBytesSector[0x25]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x24]);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010fe:	061a      	lsls	r2, r3, #24
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4313      	orrs	r3, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800111a:	4313      	orrs	r3, r2
 800111c:	61fb      	str	r3, [r7, #28]
		ReservedSector 	= (hLCD->SDhandle.ReceiveBytesSector[0x0F]<<8)  | (hLCD->SDhandle.ReceiveBytesSector[0x0E]);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7bdb      	ldrb	r3, [r3, #15]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b9b      	ldrb	r3, [r3, #14]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	84fb      	strh	r3, [r7, #38]	; 0x26
		hLCD->SDhandle.FileDirectory	=	HiddenSector + ReservedSector + (2*SectorPerFlat);
 8001132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	441a      	add	r2, r3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	441a      	add	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		hLCD->SDhandle.ClusterSize		= hLCD->SDhandle.ReceiveBytesSector[0x0D];
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b5a      	ldrb	r2, [r3, #13]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
		hLCD->SDhandle.BytesPerSector	= (hLCD->SDhandle.ReceiveBytesSector[0x0C]<<8)|(hLCD->SDhandle.ReceiveBytesSector[0x0B]);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7b1b      	ldrb	r3, [r3, #12]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7adb      	ldrb	r3, [r3, #11]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21b      	sxth	r3, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8001168:	e003      	b.n	8001172 <LCD_SD_FindFilesDirectory+0x146>
	}else
		hLCD->SDhandle.FileDirectory = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <LCD_SD_FindPartitionTable>:



static void LCD_SD_FindPartitionTable(LCD_SD_Handle_it *hLCD)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	uint8_t CMD17[]={SD_CMD17,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <LCD_SD_FindPartitionTable+0x88>)
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f240 2202 	movw	r2, #514	; 0x202
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fa3a 	bl	800461e <memset>



	LCD_SD_SPIEmptyCycles(hLCD);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f856 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	f107 0110 	add.w	r1, r7, #16
 80011b8:	2308      	movs	r3, #8
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f824 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 80011c0:	e006      	b.n	80011d0 <LCD_SD_FindPartitionTable+0x54>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f833 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	2bfe      	cmp	r3, #254	; 0xfe
 80011d4:	d1f5      	bne.n	80011c2 <LCD_SD_FindPartitionTable+0x46>
	}
	LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f240 2202 	movw	r2, #514	; 0x202
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f829 	bl	8001236 <LCD_SD_SPIReceive>

	hLCD->SDhandle.PartitionTable = (hLCD->SDhandle.ReceiveBytesSector[0x1C7]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x1C6]);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	f892 21c6 	ldrb.w	r2, [r2, #454]	; 0x1c6
 80011f2:	4313      	orrs	r3, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08004698 	.word	0x08004698

08001208 <LCD_SD_SPISend>:



static void LCD_SD_SPISend(LCD_SD_Handle_it *hLCD, uint8_t *PtCmd, uint8_t *PtCmdAns,uint32_t Size)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
	HAL_SPI_TransmitReceive(&hLCD->hspi1, PtCmd, PtCmdAns, Size, 0xFF);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b29a      	uxth	r2, r3
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	f002 ff16 	bl	800405a <HAL_SPI_TransmitReceive>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LCD_SD_SPIReceive>:



static void LCD_SD_SPIReceive(LCD_SD_Handle_it *hLCD, uint8_t *PtData,uint32_t Size)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
	HAL_SPI_Receive(&hLCD->hspi1, PtData, Size, 0xFF);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b29a      	uxth	r2, r3
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	f002 fdfa 	bl	8003e48 <HAL_SPI_Receive>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <LCD_SD_SPIEmptyCycles>:




static void LCD_SD_SPIEmptyCycles(LCD_SD_Handle_it *hLCD)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]


	uint8_t Garbage[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <LCD_SD_SPIEmptyCycles+0x48>)
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t AnsGarbage[8];

	for(int i =0;i<2;i++)
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e00e      	b.n	8001296 <LCD_SD_SPIEmptyCycles+0x3a>
	{

		HAL_SPI_TransmitReceive(&hLCD->hspi1,(uint8_t*)Garbage,(uint8_t*)AnsGarbage, sizeof(Garbage), 0xFF);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	f107 0114 	add.w	r1, r7, #20
 8001286:	23ff      	movs	r3, #255	; 0xff
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2308      	movs	r3, #8
 800128c:	f002 fee5 	bl	800405a <HAL_SPI_TransmitReceive>
	for(int i =0;i<2;i++)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	dded      	ble.n	8001278 <LCD_SD_SPIEmptyCycles+0x1c>

	}


}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	080046a0 	.word	0x080046a0

080012a8 <LCD_SD_SPIReceive_IT>:



static HAL_StatusTypeDef LCD_SD_SPIReceive_IT(SPI_HandleTypeDef *hspi,void (*WrPins)(uint8_t,uint8_t),uint8_t *pTxData, uint8_t *pRxData, uint32_t Size, uint32_t Timeout)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  uint32_t             tickstart;

  //static uint8_t		StartFrstSector=0;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012b6:	2301      	movs	r3, #1
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <LCD_SD_SPIReceive_IT+0x26>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e16e      	b.n	80015ac <LCD_SD_SPIReceive_IT+0x304>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012d6:	f001 f93d 	bl	8002554 <HAL_GetTick>
 80012da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80012f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00f      	beq.n	8001318 <LCD_SD_SPIReceive_IT+0x70>
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012fe:	d107      	bne.n	8001310 <LCD_SD_SPIReceive_IT+0x68>
		((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <LCD_SD_SPIReceive_IT+0x68>
 8001308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800130c:	2b04      	cmp	r3, #4
 800130e:	d003      	beq.n	8001318 <LCD_SD_SPIReceive_IT+0x70>
  {
	errorcode = HAL_BUSY;
 8001310:	2302      	movs	r3, #2
 8001312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	goto error;
 8001316:	e13f      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <LCD_SD_SPIReceive_IT+0x82>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <LCD_SD_SPIReceive_IT+0x82>
 8001324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <LCD_SD_SPIReceive_IT+0x8a>
  {
	errorcode = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	goto error;
 8001330:	e132      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b04      	cmp	r3, #4
 800133c:	d003      	beq.n	8001346 <LCD_SD_SPIReceive_IT+0x9e>
  {
	hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = NULL;//(uint8_t *)pTxData;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138e:	2b40      	cmp	r3, #64	; 0x40
 8001390:	d007      	beq.n	80013a2 <LCD_SD_SPIReceive_IT+0xfa>
  {
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013aa:	d178      	bne.n	800149e <LCD_SD_SPIReceive_IT+0x1f6>
  {
	if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <LCD_SD_SPIReceive_IT+0x112>
 80013b4:	8b7b      	ldrh	r3, [r7, #26]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d166      	bne.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	{
	  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60da      	str	r2, [r3, #12]
	  hspi->pTxBuffPtr += sizeof(uint16_t);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	1c9a      	adds	r2, r3, #2
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi->TxXferCount--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	86da      	strh	r2, [r3, #54]	; 0x36
	}
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013de:	e053      	b.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	{
	  /* Check TXE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d11b      	bne.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d016      	beq.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d113      	bne.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
	  {
		hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += sizeof(uint16_t);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	1c9a      	adds	r2, r3, #2
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
		hspi->TxXferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	86da      	strh	r2, [r3, #54]	; 0x36
		/* Next Data is a reception (Rx). Tx not allowed */
		txallowed = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c

	  }

	  /* Check RXNE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d119      	bne.n	8001468 <LCD_SD_SPIReceive_IT+0x1c0>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001438:	b29b      	uxth	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d014      	beq.n	8001468 <LCD_SD_SPIReceive_IT+0x1c0>
	  {
		*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	b292      	uxth	r2, r2
 800144a:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += sizeof(uint16_t);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	1c9a      	adds	r2, r3, #2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
		hspi->RxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	87da      	strh	r2, [r3, #62]	; 0x3e
		/* Next Data is a Transmission (Tx). Tx is allowed */
		txallowed = 1U;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }
	  if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001468:	f001 f874 	bl	8002554 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001474:	429a      	cmp	r2, r3
 8001476:	d807      	bhi.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
 8001478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d003      	beq.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	  {
		errorcode = HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		goto error;
 8001486:	e087      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1a6      	bne.n	80013e0 <LCD_SD_SPIReceive_IT+0x138>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001496:	b29b      	uxth	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1a1      	bne.n	80013e0 <LCD_SD_SPIReceive_IT+0x138>
 800149c:	e06b      	b.n	8001576 <LCD_SD_SPIReceive_IT+0x2ce>
	}
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
	if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <LCD_SD_SPIReceive_IT+0x204>
 80014a6:	8b7b      	ldrh	r3, [r7, #26]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15a      	bne.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	{
	  *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	330c      	adds	r3, #12
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	701a      	strb	r2, [r3, #0]
	  hspi->pTxBuffPtr += 0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi->TxXferCount--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	86da      	strh	r2, [r3, #54]	; 0x36
	}
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014d0:	e047      	b.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	{
	  /* Check TXE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d117      	bne.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d012      	beq.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10f      	bne.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
	  {
		*(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	330c      	adds	r3, #12
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
		//hspi->pTxBuffPtr++;
		hspi->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	86da      	strh	r2, [r3, #54]	; 0x36
		/* Next Data is a reception (Rx). Tx not allowed */
		txallowed = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  }

	  /* Wait until RXNE flag is reset */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d121      	bne.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01c      	beq.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	  {
		(*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

		if(hspi->RxXferCount>2)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d907      	bls.n	8001550 <LCD_SD_SPIReceive_IT+0x2a8>
		{
			WrPins(((uint8_t)hspi->Instance->DR),Data);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2102      	movs	r1, #2
 800154c:	4610      	mov	r0, r2
 800154e:	4798      	blx	r3
		}


		hspi->RxXferCount--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	87da      	strh	r2, [r3, #62]	; 0x3e

		/* Next Data is a Transmission (Tx). Tx is allowed */
		txallowed = 1U;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001566:	b29b      	uxth	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1b2      	bne.n	80014d2 <LCD_SD_SPIReceive_IT+0x22a>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ad      	bne.n	80014d2 <LCD_SD_SPIReceive_IT+0x22a>
	}
  }


  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10b      	bne.n	8001596 <LCD_SD_SPIReceive_IT+0x2ee>
  {
	__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	e000      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

error :
 8001596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3730      	adds	r7, #48	; 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_SPI_MspInit>:




void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
	  if(hspi->Instance==SPI1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a25      	ldr	r2, [pc, #148]	; (8001668 <HAL_SPI_MspInit+0xb4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d143      	bne.n	800165e <HAL_SPI_MspInit+0xaa>
	  {

	    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = SPI_SD_SCK|SPI_SD_MISO|SPI_SD_MOSI;
 800162a:	23e0      	movs	r3, #224	; 0xe0
 800162c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163a:	2305      	movs	r3, #5
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(SPI_SD_GPIO, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <HAL_SPI_MspInit+0xbc>)
 8001646:	f001 fcf5 	bl	8003034 <HAL_GPIO_Init>

	    //Configuración SS pin.
	    GPIO_InitStruct.Pin = SPI_SD_SS;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(SPI_SD_GPIO_SS, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_SPI_MspInit+0xc0>)
 800165a:	f001 fceb 	bl	8003034 <HAL_GPIO_Init>


	  }
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013000 	.word	0x40013000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400

08001678 <LCD_SD_Init>:




void LCD_SD_Init(LCD_SD_Handle_it *hLCD)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	LCD_SD_SPISoftInit(hLCD);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff f9d5 	bl	8000a30 <LCD_SD_SPISoftInit>
	LCD_SD_SPIHwInit(&hLCD->hspi1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa17 	bl	8000ac0 <LCD_SD_SPIHwInit>
	HAL_GPIO_WritePin(SPI_SD_GPIO_SS, SPI_SD_SS, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <LCD_SD_Init+0x2c>)
 8001698:	f001 fe5e 	bl	8003358 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020400 	.word	0x40020400

080016a8 <LCD_SD_Mount>:




uint8_t LCD_SD_Mount(LCD_SD_Handle_it *hLCD)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	LCD_SD_Init(hLCD);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffe1 	bl	8001678 <LCD_SD_Init>
	LCD_SD_Mounting(hLCD);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fbe6 	bl	8000e88 <LCD_SD_Mounting>
	LCD_SD_FindPartitionTable(hLCD);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fd5d 	bl	800117c <LCD_SD_FindPartitionTable>
	LCD_SD_FindFilesDirectory(hLCD);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fcb2 	bl	800102c <LCD_SD_FindFilesDirectory>



	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LCD_SD_Begin>:

void LCD_SD_Begin(LCD_SD_Handle_it *hLCD)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LCD_SD_FileOpen>:

uint8_t LCD_SD_FileOpen(LCD_SD_Handle_it *hLCD,char FileName[])
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]

	if(LCD_SD_FindFile(hLCD,FileName,strlen(FileName))&1)
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7fe fd87 	bl	8000204 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fa8d 	bl	8000c1c <LCD_SD_FindFile>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <LCD_SD_FileOpen+0x3e>
	{

		//LCD_SD_ReadHeaderFile(hLCD);
		LCD_SD_ReadFileData(hLCD,hLCD->SDhandle.FileSector,hLCD->SDhandle.FileSize);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001718:	461a      	mov	r2, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f9dc 	bl	8000ad8 <LCD_SD_ReadFileData>

		return 1;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LCD_SD_FileOpen+0x40>
	}else
	{
		return 0;
 8001724:	2300      	movs	r3, #0
	}

}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <LCD_SD_READSector>:
/*
 * Esta función se encarga de buscar en el sector 0 y desués en la tabla de particiones, hasta
 * encontrar el directorio de archivos.
 */
void LCD_SD_READSector(LCD_SD_Handle_it *hLCD,uint32_t SectorNumber)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
		uint32_t SectorAddress= SectorNumber*hLCD->SDhandle.BytesPerSector;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	61fb      	str	r3, [r7, #28]

		uint8_t CMD17[]={SD_CMD17,(uint8_t)(SectorAddress>>24),(uint8_t)(SectorAddress>>16),(uint8_t)(SectorAddress>>8),(uint8_t)SectorAddress,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 8001748:	2351      	movs	r3, #81	; 0x51
 800174a:	753b      	strb	r3, [r7, #20]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	0e1b      	lsrs	r3, r3, #24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	757b      	strb	r3, [r7, #21]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	75bb      	strb	r3, [r7, #22]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b2db      	uxtb	r3, r3
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	763b      	strb	r3, [r7, #24]
 800176a:	2301      	movs	r3, #1
 800176c:	767b      	strb	r3, [r7, #25]
 800176e:	2300      	movs	r3, #0
 8001770:	76bb      	strb	r3, [r7, #26]
 8001772:	2300      	movs	r3, #0
 8001774:	76fb      	strb	r3, [r7, #27]
		uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
		memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f240 2202 	movw	r2, #514	; 0x202
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f002 ff48 	bl	800461e <memset>


		LCD_SD_SPIEmptyCycles(hLCD);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fd64 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 8001794:	f107 020c 	add.w	r2, r7, #12
 8001798:	f107 0114 	add.w	r1, r7, #20
 800179c:	2308      	movs	r3, #8
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fd32 	bl	8001208 <LCD_SD_SPISend>

		while(ReceiveAns[0] != 0xFE)
 80017a4:	e006      	b.n	80017b4 <LCD_SD_READSector+0x86>
		{
			LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2201      	movs	r2, #1
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fd41 	bl	8001236 <LCD_SD_SPIReceive>
		while(ReceiveAns[0] != 0xFE)
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	2bfe      	cmp	r3, #254	; 0xfe
 80017b8:	d1f5      	bne.n	80017a6 <LCD_SD_READSector+0x78>
		}

		LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f240 2202 	movw	r2, #514	; 0x202
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd37 	bl	8001236 <LCD_SD_SPIReceive>


}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <LCD_Touch_Painting>:




static uint8_t LCD_Touch_Painting(LCD_Touchscreen_it *hLCD)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	uint32_t CoordX,CoordY;//,ScreenCoordX,ScreenCoordY;

	CoordX= LCD_Touch_ReadX(hLCD);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fbb3 	bl	8001f44 <LCD_Touch_ReadX>
 80017de:	60f8      	str	r0, [r7, #12]
	CoordY= LCD_Touch_ReadY(hLCD);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fc0f 	bl	8002004 <LCD_Touch_ReadY>
 80017e6:	60b8      	str	r0, [r7, #8]
	if((CoordX>=100)&&(CoordY>=100))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b63      	cmp	r3, #99	; 0x63
 80017ec:	d904      	bls.n	80017f8 <LCD_Touch_Painting+0x28>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b63      	cmp	r3, #99	; 0x63
 80017f2:	d901      	bls.n	80017f8 <LCD_Touch_Painting+0x28>
	{
		/*ScreenCoordX = LCD_TouchCoorX(hLCD);
		ScreenCoordY = LCD_TouchCoorY(hLCD);
		LCD_Coordenates((uint16_t)ScreenCoordX, (uint16_t)ScreenCoordY, (uint16_t)ScreenCoordX+1, (uint16_t)ScreenCoordY+1);*/
		return ENABLE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LCD_Touch_Painting+0x2a>
	}else
	{
		return DISABLE;
 80017f8:	2300      	movs	r3, #0
	}



}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <LCD_Touch_ADCSwConfig>:




static void LCD_Touch_ADCSwConfig(LCD_Touchscreen_it *hLCD)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	hLCD->hadc1.Instance = ADC1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <LCD_Touch_ADCSwConfig+0xdc>)
 8001810:	615a      	str	r2, [r3, #20]
	hLCD->hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001818:	619a      	str	r2, [r3, #24]
	hLCD->hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001820:	61da      	str	r2, [r3, #28]
	hLCD->hadc1.Init.ScanConvMode = DISABLE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
	hLCD->hadc1.Init.ContinuousConvMode = DISABLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hLCD->hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hLCD->hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
	hLCD->hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <LCD_Touch_ADCSwConfig+0xe0>)
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
	hLCD->hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
	hLCD->hadc1.Init.NbrOfConversion = 1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
	hLCD->hadc1.Init.DMAContinuousRequests = DISABLE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	hLCD->hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hLCD->hadc1) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3314      	adds	r3, #20
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fea4 	bl	80025b0 <HAL_ADC_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <LCD_Touch_ADCSwConfig+0x6e>
	{
	Error_Handler();
 800186e:	f000 fd6d 	bl	800234c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	hLCD->sConfig.Channel = ADC_CHANNEL_4;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c
	hLCD->sConfig.Rank = 1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	661a      	str	r2, [r3, #96]	; 0x60
	hLCD->sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_ADC_ConfigChannel(&hLCD->hadc1, & hLCD->sConfig) != HAL_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f103 0214 	add.w	r2, r3, #20
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	335c      	adds	r3, #92	; 0x5c
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f001 f85b 	bl	800294c <HAL_ADC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <LCD_Touch_ADCSwConfig+0x9c>
	{
		Error_Handler();
 800189c:	f000 fd56 	bl	800234c <Error_Handler>
	}

	/*
	 * COnfiguración del watchdog analógico para evitar el ruido del ADC.
	 */
	hLCD->hawdg.LowThreshold = 100;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2264      	movs	r2, #100	; 0x64
 80018a4:	675a      	str	r2, [r3, #116]	; 0x74
	hLCD->hawdg.Channel = ADC_CHANNEL_4;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	679a      	str	r2, [r3, #120]	; 0x78
	hLCD->hawdg.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <LCD_Touch_ADCSwConfig+0xe4>)
 80018b0:	66da      	str	r2, [r3, #108]	; 0x6c
	hLCD->hawdg.ITMode = DISABLE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	if(HAL_ADC_AnalogWDGConfig(&hLCD->hadc1, &hLCD->hawdg)!=HAL_OK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 0214 	add.w	r2, r3, #20
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	336c      	adds	r3, #108	; 0x6c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f001 f972 	bl	8002bb0 <HAL_ADC_AnalogWDGConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <LCD_Touch_ADCSwConfig+0xd2>
	{
		Error_Handler();
 80018d2:	f000 fd3b 	bl	800234c <Error_Handler>
	}
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012000 	.word	0x40012000
 80018e4:	0f000001 	.word	0x0f000001
 80018e8:	00800200 	.word	0x00800200

080018ec <LCD_Touch_PinsOff>:




static void LCD_Touch_PinsOff(LCD_Touchscreen_it *hLCD)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]


	hLCD->hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	609a      	str	r2, [r3, #8]
	hLCD->hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	605a      	str	r2, [r3, #4]
	hLCD->hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	60da      	str	r2, [r3, #12]

	hLCD->hLCD_GPIOx.Pin = RS_Pin_No;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2210      	movs	r2, #16
 800190a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(RS_GPIOx, &hLCD->hLCD_GPIOx);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4619      	mov	r1, r3
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <LCD_Touch_PinsOff+0x78>)
 8001912:	f001 fb8f 	bl	8003034 <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = D0_Pin_No;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(D0_GPIOx, &hLCD->hLCD_GPIOx);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	4810      	ldr	r0, [pc, #64]	; (8001964 <LCD_Touch_PinsOff+0x78>)
 8001924:	f001 fb86 	bl	8003034 <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = CS_Pin_No;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(CS_GPIOx, &hLCD->hLCD_GPIOx);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <LCD_Touch_PinsOff+0x7c>)
 8001934:	f001 fb7e 	bl	8003034 <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = D1_Pin_No;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(D1_GPIOx, &hLCD->hLCD_GPIOx);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4619      	mov	r1, r3
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <LCD_Touch_PinsOff+0x80>)
 8001944:	f001 fb76 	bl	8003034 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <LCD_Touch_PinsOff+0x7c>)
 800194e:	f001 fd03 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2110      	movs	r1, #16
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <LCD_Touch_PinsOff+0x78>)
 8001958:	f001 fcfe 	bl	8003358 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800

08001970 <LCD_Touch_PinsConf>:




static void LCD_Touch_PinsConf(LCD_Touchscreen_it hLCD,uint8_t XoY)
{
 8001970:	b084      	sub	sp, #16
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
 8001976:	f107 0c08 	add.w	ip, r7, #8
 800197a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	2102      	movs	r1, #2
 8001982:	4841      	ldr	r0, [pc, #260]	; (8001a88 <LCD_Touch_PinsConf+0x118>)
 8001984:	f001 fce8 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2101      	movs	r1, #1
 800198c:	483f      	ldr	r0, [pc, #252]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 800198e:	f001 fce3 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2101      	movs	r1, #1
 8001996:	483d      	ldr	r0, [pc, #244]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 8001998:	f001 fcde 	bl	8003358 <HAL_GPIO_WritePin>

	if(XoY==CoorX)
 800199c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d133      	bne.n	8001a0c <LCD_Touch_PinsConf+0x9c>
	{

		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_ANALOG;
 80019a8:	2303      	movs	r3, #3
 80019aa:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 80019ac:	2302      	movs	r3, #2
 80019ae:	617b      	str	r3, [r7, #20]

		hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 80019b0:	2310      	movs	r3, #16
 80019b2:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	4834      	ldr	r0, [pc, #208]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 80019ba:	f001 fb3b 	bl	8003034 <HAL_GPIO_Init>


		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 80019c8:	f107 0108 	add.w	r1, r7, #8
 80019cc:	482f      	ldr	r0, [pc, #188]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 80019ce:	f001 fb31 	bl	8003034 <HAL_GPIO_Init>


		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]



		hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 80019da:	2301      	movs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 80019de:	f107 0108 	add.w	r1, r7, #8
 80019e2:	482b      	ldr	r0, [pc, #172]	; (8001a90 <LCD_Touch_PinsConf+0x120>)
 80019e4:	f001 fb26 	bl	8003034 <HAL_GPIO_Init>

		hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 80019ec:	f107 0108 	add.w	r1, r7, #8
 80019f0:	4825      	ldr	r0, [pc, #148]	; (8001a88 <LCD_Touch_PinsConf+0x118>)
 80019f2:	f001 fb1f 	bl	8003034 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(D1_GPIOx, D1_Pin_No, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <LCD_Touch_PinsConf+0x118>)
 80019fc:	f001 fcac 	bl	8003358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2101      	movs	r1, #1
 8001a04:	4822      	ldr	r0, [pc, #136]	; (8001a90 <LCD_Touch_PinsConf+0x120>)
 8001a06:	f001 fca7 	bl	8003358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, GPIO_PIN_SET);

	}

}
 8001a0a:	e037      	b.n	8001a7c <LCD_Touch_PinsConf+0x10c>
	}else if(XoY==CoorY)
 8001a0c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d133      	bne.n	8001a7c <LCD_Touch_PinsConf+0x10c>
		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_ANALOG;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
		hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 8001a24:	f107 0108 	add.w	r1, r7, #8
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <LCD_Touch_PinsConf+0x120>)
 8001a2a:	f001 fb03 	bl	8003034 <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <LCD_Touch_PinsConf+0x118>)
 8001a3c:	f001 fafa 	bl	8003034 <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 8001a40:	2302      	movs	r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 8001a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4c:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 8001a4e:	f107 0108 	add.w	r1, r7, #8
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 8001a54:	f001 faee 	bl	8003034 <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 8001a5c:	f107 0108 	add.w	r1, r7, #8
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 8001a62:	f001 fae7 	bl	8003034 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 8001a6c:	f001 fc74 	bl	8003358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <LCD_Touch_PinsConf+0x11c>)
 8001a78:	f001 fc6e 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a84:	b004      	add	sp, #16
 8001a86:	4770      	bx	lr
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400

08001a94 <HAL_ADC_MspInit>:




void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc1)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
		if(hadc1->Instance==ADC1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <HAL_ADC_MspInit+0xb0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d141      	bne.n	8001b3a <HAL_ADC_MspInit+0xa6>
		{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a22      	ldr	r2, [pc, #136]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_ADC_MspInit+0xb4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
		/**ADC1 GPIO Configuration
		PA4     ------> ADC1_IN4
		PB0     ------> ADC1_IN8
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <HAL_ADC_MspInit+0xb8>)
 8001b1e:	f001 fa89 	bl	8003034 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <HAL_ADC_MspInit+0xbc>)
 8001b36:	f001 fa7d 	bl	8003034 <HAL_GPIO_Init>

		}
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40012000 	.word	0x40012000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400

08001b54 <LCD_Touch_Calibration>:




void LCD_Touch_Calibration(LCD_Touchscreen_it *hLCD)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	float K;
	LCD_Touch_PinsOff(hLCD);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fec5 	bl	80018ec <LCD_Touch_PinsOff>


	//1-Dibujamos el primer Punto y Esperamos que pulsen
	LCD_SCREEN_Coordenates(Calib_X0-5, Calib_Y0-5, Calib_X0+5, Calib_Y0+5);
 8001b62:	2345      	movs	r3, #69	; 0x45
 8001b64:	2237      	movs	r2, #55	; 0x37
 8001b66:	213b      	movs	r1, #59	; 0x3b
 8001b68:	202d      	movs	r0, #45	; 0x2d
 8001b6a:	f7fe fef1 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001b6e:	f7fe ff42 	bl	80009f6 <LCD_SCREEN_PaintColor>

	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001b72:	bf00      	nop
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe2b 	bl	80017d0 <LCD_Touch_Painting>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f9      	beq.n	8001b74 <LCD_Touch_Calibration+0x20>

	while(LCD_Touch_Painting(hLCD))
 8001b80:	e012      	b.n	8001ba8 <LCD_Touch_Calibration+0x54>
	{

		hLCD->ADC_X0 = LCD_Touch_ReadX(hLCD);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f9de 	bl	8001f44 <LCD_Touch_ReadX>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		hLCD->ADC_Y0 = LCD_Touch_ReadY(hLCD);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fa36 	bl	8002004 <LCD_Touch_ReadY>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		HAL_Delay(100);
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	f000 fce2 	bl	800256c <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fe11 	bl	80017d0 <LCD_Touch_Painting>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e6      	bne.n	8001b82 <LCD_Touch_Calibration+0x2e>

	}


	//1-Dibujamos el Segundo Punto y Esperamos que pulsen
	LCD_SCREEN_Coordenates(Calib_X1-5, Calib_Y1-5, Calib_X1+5, Calib_Y1+5);
 8001bb4:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001bb8:	22f5      	movs	r2, #245	; 0xf5
 8001bba:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001bbe:	20eb      	movs	r0, #235	; 0xeb
 8001bc0:	f7fe fec6 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001bc4:	f7fe ff17 	bl	80009f6 <LCD_SCREEN_PaintColor>

	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001bc8:	bf00      	nop
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe00 	bl	80017d0 <LCD_Touch_Painting>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f9      	beq.n	8001bca <LCD_Touch_Calibration+0x76>
	while(LCD_Touch_Painting(hLCD))
 8001bd6:	e013      	b.n	8001c00 <LCD_Touch_Calibration+0xac>
	{
		hLCD->ADC_X1 = LCD_Touch_ReadX(hLCD);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f9b3 	bl	8001f44 <LCD_Touch_ReadX>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		hLCD->ADC_Y1 = LCD_Touch_ReadY(hLCD);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa0b 	bl	8002004 <LCD_Touch_ReadY>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		HAL_Delay(500);
 8001bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bfc:	f000 fcb6 	bl	800256c <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fde5 	bl	80017d0 <LCD_Touch_Painting>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e5      	bne.n	8001bd8 <LCD_Touch_Calibration+0x84>

	}

	//1-Dibujamos el Tercer Punto y Esperamos que pulsen
	LCD_SCREEN_Coordenates(Calib_X2-5, Calib_Y2-5, Calib_X2+5, Calib_Y2+5);
 8001c0c:	2384      	movs	r3, #132	; 0x84
 8001c0e:	f240 1285 	movw	r2, #389	; 0x185
 8001c12:	217a      	movs	r1, #122	; 0x7a
 8001c14:	f240 107b 	movw	r0, #379	; 0x17b
 8001c18:	f7fe fe9a 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001c1c:	f7fe feeb 	bl	80009f6 <LCD_SCREEN_PaintColor>
	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001c20:	bf00      	nop
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fdd4 	bl	80017d0 <LCD_Touch_Painting>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f9      	beq.n	8001c22 <LCD_Touch_Calibration+0xce>
	while(LCD_Touch_Painting(hLCD))
 8001c2e:	e013      	b.n	8001c58 <LCD_Touch_Calibration+0x104>
	{
		hLCD->ADC_X2 = LCD_Touch_ReadX(hLCD);//
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f987 	bl	8001f44 <LCD_Touch_ReadX>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		hLCD->ADC_Y2 = LCD_Touch_ReadY(hLCD);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f9df 	bl	8002004 <LCD_Touch_ReadY>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		HAL_Delay(500);
 8001c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c54:	f000 fc8a 	bl	800256c <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fdb9 	bl	80017d0 <LCD_Touch_Painting>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e5      	bne.n	8001c30 <LCD_Touch_Calibration+0xdc>
	}
	HAL_Delay(500);
 8001c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c68:	f000 fc80 	bl	800256c <HAL_Delay>




	K=((hLCD->ADC_X0-hLCD->ADC_X2)*(hLCD->ADC_Y1-hLCD->ADC_Y2))-((hLCD->ADC_X1-hLCD->ADC_X2)*(hLCD->ADC_Y0-hLCD->ADC_Y2));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001c82:	4611      	mov	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f8b2 20a6 	ldrh.w	r2, [r2, #166]	; 0xa6
 8001c8a:	1a8a      	subs	r2, r1, r2
 8001c8c:	fb02 f203 	mul.w	r2, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001c96:	4619      	mov	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c9e:	1acb      	subs	r3, r1, r3
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	f8b1 10a2 	ldrh.w	r1, [r1, #162]	; 0xa2
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	f8b1 10a6 	ldrh.w	r1, [r1, #166]	; 0xa6
 8001cae:	1a41      	subs	r1, r0, r1
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	edc7 7a03 	vstr	s15, [r7, #12]

	hLCD->A =((hLCD->ADC_Y0*(Calib_X2-Calib_X1))+(hLCD->ADC_Y1*(Calib_X0-Calib_X2))+(hLCD->ADC_Y2*(Calib_X1-Calib_X0)))/K;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4b90      	ldr	r3, [pc, #576]	; (8001f20 <LCD_Touch_Calibration+0x3cc>)
 8001cde:	fb03 f301 	mul.w	r3, r3, r1
 8001ce2:	441a      	add	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8001cea:	4619      	mov	r1, r3
 8001cec:	23be      	movs	r3, #190	; 0xbe
 8001cee:	fb03 f301 	mul.w	r3, r3, r1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	hLCD->B = ((hLCD->ADC_X0*(Calib_X1-Calib_X2))+(hLCD->ADC_X1*(Calib_X2-Calib_X0))+(hLCD->ADC_X2*(Calib_X0-Calib_X1)))/K;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001d10:	461a      	mov	r2, r3
 8001d12:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8001d16:	fb03 f202 	mul.w	r2, r3, r2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8001d26:	fb03 f301 	mul.w	r3, r3, r1
 8001d2a:	441a      	add	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001d32:	4619      	mov	r1, r3
 8001d34:	f06f 03bd 	mvn.w	r3, #189	; 0xbd
 8001d38:	fb03 f301 	mul.w	r3, r3, r1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	hLCD->C = ((hLCD->ADC_Y1*((hLCD->ADC_X0*Calib_X2)-(hLCD->ADC_X2*Calib_X0)))+(hLCD->ADC_Y2*((hLCD->ADC_X1*Calib_X0)-(hLCD->ADC_X0*Calib_X1)))+(hLCD->ADC_Y0*((hLCD->ADC_X2*Calib_X1)-(hLCD->ADC_X1*Calib_X2))))/K;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001d62:	461a      	mov	r2, r3
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001d7a:	fb03 f300 	mul.w	r3, r3, r0
 8001d7e:	4413      	add	r3, r2
 8001d80:	fb03 f201 	mul.w	r2, r3, r1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001d92:	4619      	mov	r1, r3
 8001d94:	2332      	movs	r3, #50	; 0x32
 8001d96:	fb03 f101 	mul.w	r1, r3, r1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001da0:	4618      	mov	r0, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	0100      	lsls	r0, r0, #4
 8001da6:	1a1b      	subs	r3, r3, r0
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	440b      	add	r3, r1
 8001dac:	fb03 f304 	mul.w	r3, r3, r4
 8001db0:	441a      	add	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001db8:	4618      	mov	r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	461c      	mov	r4, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	0089      	lsls	r1, r1, #2
 8001dd8:	1a5b      	subs	r3, r3, r1
 8001dda:	01db      	lsls	r3, r3, #7
 8001ddc:	4423      	add	r3, r4
 8001dde:	fb03 f300 	mul.w	r3, r3, r0
 8001de2:	4413      	add	r3, r2
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dec:	ed97 7a03 	vldr	s14, [r7, #12]
 8001df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	hLCD->D = ((hLCD->ADC_Y0*(Calib_Y2-Calib_Y1))+(hLCD->ADC_Y1*(Calib_Y0-Calib_Y2))+(hLCD->ADC_Y2*(Calib_Y1-Calib_Y0)))/K;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001e00:	461a      	mov	r2, r3
 8001e02:	f06f 03b9 	mvn.w	r3, #185	; 0xb9
 8001e06:	fb03 f202 	mul.w	r2, r3, r2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001e10:	4619      	mov	r1, r3
 8001e12:	019b      	lsls	r3, r3, #6
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	18d1      	adds	r1, r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4613      	mov	r3, r2
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	hLCD->E = ((hLCD->ADC_X0*(Calib_Y1-Calib_Y2))+(hLCD->ADC_X1*(Calib_Y2-Calib_Y0))+(hLCD->ADC_X2*(Calib_Y0-Calib_Y1)))/K;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001e48:	461a      	mov	r2, r3
 8001e4a:	23ba      	movs	r3, #186	; 0xba
 8001e4c:	fb03 f202 	mul.w	r2, r3, r2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001e56:	4619      	mov	r1, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	1a5b      	subs	r3, r3, r1
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001e66:	4619      	mov	r1, r3
 8001e68:	f06f 03f8 	mvn.w	r3, #248	; 0xf8
 8001e6c:	fb03 f301 	mul.w	r3, r3, r1
 8001e70:	4413      	add	r3, r2
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

	hLCD->F = ((hLCD->ADC_Y0*((Calib_Y1*hLCD->ADC_X2)-(hLCD->ADC_X1*Calib_Y2)))+(hLCD->ADC_Y1*((hLCD->ADC_X0*Calib_Y2)-(hLCD->ADC_X2*Calib_Y0)))+(hLCD->ADC_Y2*((hLCD->ADC_X1*Calib_Y0)-(Calib_Y1*hLCD->ADC_X0))))/K;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001e96:	461a      	mov	r2, r3
 8001e98:	f240 1339 	movw	r3, #313	; 0x139
 8001e9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	01db      	lsls	r3, r3, #7
 8001eaa:	1ac3      	subs	r3, r0, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	fb03 f201 	mul.w	r2, r3, r1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	01db      	lsls	r3, r3, #7
 8001ec6:	1a59      	subs	r1, r3, r1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	1acb      	subs	r3, r1, r3
 8001ed2:	fb03 f300 	mul.w	r3, r3, r0
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8001ede:	4618      	mov	r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001ee6:	0199      	lsls	r1, r3, #6
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001eee:	461c      	mov	r4, r3
 8001ef0:	f46f 739c 	mvn.w	r3, #312	; 0x138
 8001ef4:	fb03 f304 	mul.w	r3, r3, r4
 8001ef8:	440b      	add	r3, r1
 8001efa:	fb03 f300 	mul.w	r3, r3, r0
 8001efe:	4413      	add	r3, r2
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98


}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	fffffeb2 	.word	0xfffffeb2

08001f24 <LCD_Touch_ADCInit>:




void LCD_Touch_ADCInit(LCD_Touchscreen_it *hLCD)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	LCD_Touch_ADCSwConfig(hLCD);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fc69 	bl	8001804 <LCD_Touch_ADCSwConfig>
	HAL_ADC_MspInit(&hLCD->hadc1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3314      	adds	r3, #20
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fdac 	bl	8001a94 <HAL_ADC_MspInit>

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <LCD_Touch_ReadX>:




uint32_t LCD_Touch_ReadX(LCD_Touchscreen_it *hLCD)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b0ad      	sub	sp, #180	; 0xb4
 8001f48:	af28      	add	r7, sp, #160	; 0xa0
 8001f4a:	6078      	str	r0, [r7, #4]
	uint32_t ReadValue=0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
	LCD_Touch_PinsConf(*hLCD,CoorX);
 8001f50:	687c      	ldr	r4, [r7, #4]
 8001f52:	2301      	movs	r3, #1
 8001f54:	9326      	str	r3, [sp, #152]	; 0x98
 8001f56:	4668      	mov	r0, sp
 8001f58:	f104 0310 	add.w	r3, r4, #16
 8001f5c:	2298      	movs	r2, #152	; 0x98
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f002 fb52 	bl	8004608 <memcpy>
 8001f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f68:	f7ff fd02 	bl	8001970 <LCD_Touch_PinsConf>
	hLCD->sConfig.Channel = ADC_CHANNEL_4;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c
	hLCD->hawdg.Channel = ADC_CHANNEL_4;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	679a      	str	r2, [r3, #120]	; 0x78
	HAL_ADC_ConfigChannel(&hLCD->hadc1, &hLCD->sConfig);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f103 0214 	add.w	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	335c      	adds	r3, #92	; 0x5c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 fce1 	bl	800294c <HAL_ADC_ConfigChannel>
	HAL_ADC_AnalogWDGConfig(&hLCD->hadc1, &hLCD->hawdg);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f103 0214 	add.w	r2, r3, #20
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	336c      	adds	r3, #108	; 0x6c
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 fe0a 	bl	8002bb0 <HAL_ADC_AnalogWDGConfig>




	for(int i=0;i<20;i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e01c      	b.n	8001fdc <LCD_Touch_ReadX+0x98>
	{
		HAL_ADC_Start(&hLCD->hadc1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3314      	adds	r3, #20
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fb46 	bl	8002638 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hLCD->hadc1, 1000);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fc38 	bl	800282a <HAL_ADC_PollForConversion>
		ReadValue += HAL_ADC_GetValue(&hLCD->hadc1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3314      	adds	r3, #20
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fcb7 	bl	8002932 <HAL_ADC_GetValue>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hLCD->hadc1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fbf7 	bl	80027c4 <HAL_ADC_Stop>
	for(int i=0;i<20;i++)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b13      	cmp	r3, #19
 8001fe0:	dddf      	ble.n	8001fa2 <LCD_Touch_ReadX+0x5e>

	}

	LCD_Touch_PinsOff(hLCD);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fc82 	bl	80018ec <LCD_Touch_PinsOff>

	ReadValue /=20;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <LCD_Touch_ReadX+0xbc>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]

	return ReadValue;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	cccccccd 	.word	0xcccccccd

08002004 <LCD_Touch_ReadY>:




uint32_t LCD_Touch_ReadY(LCD_Touchscreen_it *hLCD)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b0ad      	sub	sp, #180	; 0xb4
 8002008:	af28      	add	r7, sp, #160	; 0xa0
 800200a:	6078      	str	r0, [r7, #4]
	uint32_t ReadValue=0;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
	LCD_Touch_PinsConf(*hLCD,CoorY);
 8002010:	687c      	ldr	r4, [r7, #4]
 8002012:	2302      	movs	r3, #2
 8002014:	9326      	str	r3, [sp, #152]	; 0x98
 8002016:	4668      	mov	r0, sp
 8002018:	f104 0310 	add.w	r3, r4, #16
 800201c:	2298      	movs	r2, #152	; 0x98
 800201e:	4619      	mov	r1, r3
 8002020:	f002 faf2 	bl	8004608 <memcpy>
 8002024:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002028:	f7ff fca2 	bl	8001970 <LCD_Touch_PinsConf>
	hLCD->sConfig.Channel = ADC_CHANNEL_8;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2208      	movs	r2, #8
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
	hLCD->hawdg.Channel = ADC_CHANNEL_8;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	679a      	str	r2, [r3, #120]	; 0x78
	HAL_ADC_ConfigChannel(&hLCD->hadc1, & hLCD->sConfig);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f103 0214 	add.w	r2, r3, #20
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	335c      	adds	r3, #92	; 0x5c
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f000 fc81 	bl	800294c <HAL_ADC_ConfigChannel>
	HAL_ADC_AnalogWDGConfig(&hLCD->hadc1, &hLCD->hawdg);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0214 	add.w	r2, r3, #20
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	336c      	adds	r3, #108	; 0x6c
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 fdaa 	bl	8002bb0 <HAL_ADC_AnalogWDGConfig>


	for(int i=0;i<20;i++)
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	e01c      	b.n	800209c <LCD_Touch_ReadY+0x98>
	{
		HAL_ADC_Start(&hLCD->hadc1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3314      	adds	r3, #20
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fae6 	bl	8002638 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hLCD->hadc1, 1000);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3314      	adds	r3, #20
 8002070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fbd8 	bl	800282a <HAL_ADC_PollForConversion>
		ReadValue += HAL_ADC_GetValue(&hLCD->hadc1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3314      	adds	r3, #20
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fc57 	bl	8002932 <HAL_ADC_GetValue>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
		//ReadValue = HAL_ADC_GetValue(&hLCD->hadc1);
		HAL_ADC_Stop(&hLCD->hadc1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3314      	adds	r3, #20
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fb97 	bl	80027c4 <HAL_ADC_Stop>
	for(int i=0;i<20;i++)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b13      	cmp	r3, #19
 80020a0:	dddf      	ble.n	8002062 <LCD_Touch_ReadY+0x5e>
	}


	LCD_Touch_PinsOff(hLCD);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fc22 	bl	80018ec <LCD_Touch_PinsOff>

	ReadValue /=20;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <LCD_Touch_ReadY+0xbc>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]

	return ReadValue;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}
 80020be:	bf00      	nop
 80020c0:	cccccccd 	.word	0xcccccccd

080020c4 <LCD_Touch_CoorX>:




uint32_t LCD_Touch_CoorX(LCD_Touchscreen_it *hLCD)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	uint32_t CoordenadaX,LecturaX,LecturaY;
	LecturaX = LCD_Touch_ReadX(hLCD);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff39 	bl	8001f44 <LCD_Touch_ReadX>
 80020d2:	6178      	str	r0, [r7, #20]
	LecturaY = LCD_Touch_ReadY(hLCD);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff95 	bl	8002004 <LCD_Touch_ReadY>
 80020da:	6138      	str	r0, [r7, #16]

	//CoordenadaX=0.5558*LecturaX+0.0037*LecturaY-35.974;//(hLCD->A)*LCD_TouchReadX(hLCD)+(hLCD->B)*LCD_TouchReadY(hLCD)+hLCD->C;
	CoordenadaX = (hLCD->A)*LecturaX+(hLCD->B)*LecturaY+hLCD->C;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002116:	ee17 3a90 	vmov	r3, s15
 800211a:	60fb      	str	r3, [r7, #12]
	return CoordenadaX;
 800211c:	68fb      	ldr	r3, [r7, #12]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t Valor=0;
 800212e:	2300      	movs	r3, #0
 8002130:	807b      	strh	r3, [r7, #2]
	int8_t i=0;
 8002132:	2300      	movs	r3, #0
 8002134:	71fb      	strb	r3, [r7, #7]
	uint16_t Almacen=0;
 8002136:	2300      	movs	r3, #0
 8002138:	80bb      	strh	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213a:	f000 f9a5 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213e:	f000 f861 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002142:	f000 f8cd 	bl	80022e0 <MX_GPIO_Init>
//  MX_ADC1_Init();
  //MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  LCD_SCREEN_Init(hlcd);
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <main+0xcc>)
 8002148:	466c      	mov	r4, sp
 800214a:	f103 0210 	add.w	r2, r3, #16
 800214e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002152:	e884 0003 	stmia.w	r4, {r0, r1}
 8002156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002158:	f7fe fb32 	bl	80007c0 <LCD_SCREEN_Init>


  LCD_Touch_ADCInit(&htch);
 800215c:	4826      	ldr	r0, [pc, #152]	; (80021f8 <main+0xd0>)
 800215e:	f7ff fee1 	bl	8001f24 <LCD_Touch_ADCInit>
  LCD_Touch_Calibration(&htch);
 8002162:	4825      	ldr	r0, [pc, #148]	; (80021f8 <main+0xd0>)
 8002164:	f7ff fcf6 	bl	8001b54 <LCD_Touch_Calibration>


  LCD_SCREEN_Coordenates(0, 0, MaxWidth, MaxHigh);
 8002168:	f240 133f 	movw	r3, #319	; 0x13f
 800216c:	f240 12df 	movw	r2, #479	; 0x1df
 8002170:	2100      	movs	r1, #0
 8002172:	2000      	movs	r0, #0
 8002174:	f7fe fbec 	bl	8000950 <LCD_SCREEN_Coordenates>





	LCD_SD_Mount(&hsd);
 8002178:	4820      	ldr	r0, [pc, #128]	; (80021fc <main+0xd4>)
 800217a:	f7ff fa95 	bl	80016a8 <LCD_SD_Mount>
	LCD_SD_Begin(&hsd);
 800217e:	481f      	ldr	r0, [pc, #124]	; (80021fc <main+0xd4>)
 8002180:	f7ff faa7 	bl	80016d2 <LCD_SD_Begin>
	Valor=sizeof(FileSD)/sizeof(FileSD[0]);
 8002184:	230a      	movs	r3, #10
 8002186:	807b      	strh	r3, [r7, #2]


	while(1)
	{

		Almacen = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	80bb      	strh	r3, [r7, #4]
		LCD_SD_FileOpen(&hsd, FileSD[i]);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <main+0xd8>)
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	4619      	mov	r1, r3
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <main+0xd4>)
 800219a:	f7ff faa4 	bl	80016e6 <LCD_SD_FileOpen>
		while(Almacen==0)
 800219e:	e004      	b.n	80021aa <main+0x82>
		{
			Almacen=LCD_Touch_CoorX(&htch);
 80021a0:	4815      	ldr	r0, [pc, #84]	; (80021f8 <main+0xd0>)
 80021a2:	f7ff ff8f 	bl	80020c4 <LCD_Touch_CoorX>
 80021a6:	4603      	mov	r3, r0
 80021a8:	80bb      	strh	r3, [r7, #4]
		while(Almacen==0)
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f7      	beq.n	80021a0 <main+0x78>
		}

		if(Almacen>250)
 80021b0:	88bb      	ldrh	r3, [r7, #4]
 80021b2:	2bfa      	cmp	r3, #250	; 0xfa
 80021b4:	d90d      	bls.n	80021d2 <main+0xaa>
		{
			i++;
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	71fb      	strb	r3, [r7, #7]
			if(i>=Valor)i=0;
 80021c2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbdd      	blt.n	8002188 <main+0x60>
 80021cc:	2300      	movs	r3, #0
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	e7da      	b.n	8002188 <main+0x60>
		}else
		{
			i--;
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	71fb      	strb	r3, [r7, #7]

			if(i<0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	dad0      	bge.n	8002188 <main+0x60>
			{
				i=Valor-1;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	71fb      	strb	r3, [r7, #7]
		Almacen = 0;
 80021f0:	e7ca      	b.n	8002188 <main+0x60>
 80021f2:	bf00      	nop
 80021f4:	20000370 	.word	0x20000370
 80021f8:	20000050 	.word	0x20000050
 80021fc:	200000f8 	.word	0x200000f8
 8002200:	20000000 	.word	0x20000000

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b094      	sub	sp, #80	; 0x50
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	2234      	movs	r2, #52	; 0x34
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fa03 	bl	800461e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <SystemClock_Config+0xd4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <SystemClock_Config+0xd4>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <SystemClock_Config+0xd4>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <SystemClock_Config+0xd8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <SystemClock_Config+0xd8>)
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <SystemClock_Config+0xd8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002264:	2301      	movs	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800226c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226e:	2302      	movs	r3, #2
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002278:	2304      	movs	r3, #4
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 800227c:	2378      	movs	r3, #120	; 0x78
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002280:	2302      	movs	r3, #2
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002284:	2302      	movs	r3, #2
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fb1b 	bl	80038cc <HAL_RCC_OscConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800229c:	f000 f856 	bl	800234c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a0:	230f      	movs	r3, #15
 80022a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a4:	2302      	movs	r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80022b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2104      	movs	r1, #4
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f87e 	bl	80033c0 <HAL_RCC_ClockConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80022ca:	f000 f83f 	bl	800234c <Error_Handler>
  }
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	; 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000

080022e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_GPIO_Init+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <MX_GPIO_Init+0x68>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_GPIO_Init+0x68>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_GPIO_Init+0x68>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <MX_GPIO_Init+0x68>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <MX_GPIO_Init+0x68>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_GPIO_Init+0x68>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <MX_GPIO_Init+0x68>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_GPIO_Init+0x68>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_MspInit+0x4c>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_MspInit+0x4c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_MspInit+0x4c>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_MspInit+0x4c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800239a:	2007      	movs	r0, #7
 800239c:	f000 fe16 	bl	8002fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 f894 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <SystemInit+0x28>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <SystemInit+0x28>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SystemInit+0x28>)
 800241e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002422:	609a      	str	r2, [r3, #8]
#endif
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800243a:	e003      	b.n	8002444 <LoopCopyDataInit>

0800243c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800243e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002442:	3104      	adds	r1, #4

08002444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800244a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800244c:	d3f6      	bcc.n	800243c <CopyDataInit>
  ldr  r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002450:	e002      	b.n	8002458 <LoopFillZerobss>

08002452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002454:	f842 3b04 	str.w	r3, [r2], #4

08002458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800245c:	d3f9      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245e:	f7ff ffd3 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f002 f8ad 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff fe5f 	bl	8002128 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002470:	08004840 	.word	0x08004840
  ldr  r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002478:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 800247c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8002480:	2000038c 	.word	0x2000038c

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 fd8b 	bl	8002fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff ff4e 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fd95 	bl	800301a <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 fd6b 	bl	8002fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000028 	.word	0x20000028
 8002524:	20000030 	.word	0x20000030
 8002528:	2000002c 	.word	0x2000002c

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000030 	.word	0x20000030
 8002550:	20000388 	.word	0x20000388

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000388 	.word	0x20000388

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_Delay+0x40>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000030 	.word	0x20000030

080025b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e033      	b.n	800262e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fa60 	bl	8001a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f6:	f023 0302 	bic.w	r3, r3, #2
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fb34 	bl	8002c70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
 800261e:	e001      	b.n	8002624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Start+0x1a>
 800264e:	2302      	movs	r3, #2
 8002650:	e0a5      	b.n	800279e <HAL_ADC_Start+0x166>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d018      	beq.n	800269a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_ADC_Start+0x174>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_ADC_Start+0x178>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9a      	lsrs	r2, r3, #18
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800268c:	e002      	b.n	8002694 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3b01      	subs	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d179      	bne.n	800279c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f023 0206 	bic.w	r2, r3, #6
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_ADC_Start+0x17c>)
 8002706:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002710:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12a      	bne.n	8002774 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_ADC_Start+0x180>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d015      	beq.n	8002754 <HAL_ADC_Start+0x11c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_ADC_Start+0x184>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d105      	bne.n	800273e <HAL_ADC_Start+0x106>
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_ADC_Start+0x17c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_ADC_Start+0x188>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d129      	bne.n	800279c <HAL_ADC_Start+0x164>
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_ADC_Start+0x17c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d823      	bhi.n	800279c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11c      	bne.n	800279c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	e013      	b.n	800279c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_ADC_Start+0x180>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_ADC_Start+0x164>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800279a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000028 	.word	0x20000028
 80027b0:	431bde83 	.word	0x431bde83
 80027b4:	40012300 	.word	0x40012300
 80027b8:	40012000 	.word	0x40012000
 80027bc:	40012100 	.word	0x40012100
 80027c0:	40012200 	.word	0x40012200

080027c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADC_Stop+0x16>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e021      	b.n	800281e <HAL_ADC_Stop+0x5a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d113      	bne.n	8002870 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d10b      	bne.n	8002870 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e05c      	b.n	800292a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002870:	f7ff fe70 	bl	8002554 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002876:	e01a      	b.n	80028ae <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d016      	beq.n	80028ae <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_ADC_PollForConversion+0x6c>
 8002886:	f7ff fe65 	bl	8002554 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d20b      	bcs.n	80028ae <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03d      	b.n	800292a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d1dd      	bne.n	8002878 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0212 	mvn.w	r2, #18
 80028c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d123      	bne.n	8002928 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11f      	bne.n	8002928 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1c>
 8002964:	2302      	movs	r3, #2
 8002966:	e113      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x244>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d925      	bls.n	80029c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68d9      	ldr	r1, [r3, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43da      	mvns	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	400a      	ands	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4403      	add	r3, r0
 80029b6:	3b1e      	subs	r3, #30
 80029b8:	409a      	lsls	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e022      	b.n	8002a0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6919      	ldr	r1, [r3, #16]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	2207      	movs	r2, #7
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	400a      	ands	r2, r1
 80029e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4403      	add	r3, r0
 8002a00:	409a      	lsls	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d824      	bhi.n	8002a5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b05      	subs	r3, #5
 8002a24:	221f      	movs	r2, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b05      	subs	r3, #5
 8002a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5a:	e04c      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d824      	bhi.n	8002aae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	3b23      	subs	r3, #35	; 0x23
 8002a76:	221f      	movs	r2, #31
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	400a      	ands	r2, r1
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b23      	subs	r3, #35	; 0x23
 8002aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	e023      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b41      	subs	r3, #65	; 0x41
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b41      	subs	r3, #65	; 0x41
 8002aea:	fa00 f203 	lsl.w	r2, r0, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_ConfigChannel+0x250>)
 8002af8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_ADC_ConfigChannel+0x254>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10f      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1d8>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_ADC_ConfigChannel+0x254>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d12b      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_ADC_ConfigChannel+0x258>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x1f4>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b11      	cmp	r3, #17
 8002b3e:	d122      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <HAL_ADC_ConfigChannel+0x258>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_ADC_ConfigChannel+0x25c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_ADC_ConfigChannel+0x260>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9a      	lsrs	r2, r3, #18
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	10000012 	.word	0x10000012
 8002ba8:	20000028 	.word	0x20000028
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_AnalogWDGConfig+0x18>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e04d      	b.n	8002c64 <HAL_ADC_AnalogWDGConfig+0xb4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7c1b      	ldrb	r3, [r3, #16]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf8:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c0c:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	6852      	ldr	r2, [r2, #4]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 021f 	bic.w	r2, r2, #31
 8002c42:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <ADC_Init+0x1f0>)
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <ADC_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e00f      	b.n	8002d6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0202 	bic.w	r2, r2, #2
 8002d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6899      	ldr	r1, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7e1b      	ldrb	r3, [r3, #24]
 8002d88:	005a      	lsls	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	035a      	lsls	r2, r3, #13
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e007      	b.n	8002de4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	051a      	lsls	r2, r3, #20
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e26:	025a      	lsls	r2, r3, #9
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	029a      	lsls	r2, r3, #10
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40012300 	.word	0x40012300
 8002e64:	0f000001 	.word	0x0f000001

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f98:	d301      	bcc.n	8002f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <SysTick_Config+0x40>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	f7ff ff8e 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <SysTick_Config+0x40>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <SysTick_Config+0x40>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	e000e010 	.word	0xe000e010

08002fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff47 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff4:	f7ff ff5c 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 8002ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	6978      	ldr	r0, [r7, #20]
 8003000:	f7ff ff8e 	bl	8002f20 <NVIC_EncodePriority>
 8003004:	4602      	mov	r2, r0
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff5d 	bl	8002ecc <__NVIC_SetPriority>
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffb0 	bl	8002f88 <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	e165      	b.n	800331c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	429a      	cmp	r2, r3
 800306a:	f040 8154 	bne.w	8003316 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d00b      	beq.n	800308e <HAL_GPIO_Init+0x5a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003082:	2b11      	cmp	r3, #17
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b12      	cmp	r3, #18
 800308c:	d130      	bne.n	80030f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c4:	2201      	movs	r2, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0201 	and.w	r2, r3, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0xfc>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b12      	cmp	r3, #18
 800312e:	d123      	bne.n	8003178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	08da      	lsrs	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3208      	adds	r2, #8
 8003138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	220f      	movs	r2, #15
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80ae 	beq.w	8003316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <HAL_GPIO_Init+0x2fc>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4a5b      	ldr	r2, [pc, #364]	; (8003330 <HAL_GPIO_Init+0x2fc>)
 80031c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ca:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_GPIO_Init+0x2fc>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x300>)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	3302      	adds	r3, #2
 80031de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x304>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d025      	beq.n	800324e <HAL_GPIO_Init+0x21a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x308>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01f      	beq.n	800324a <HAL_GPIO_Init+0x216>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x30c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d019      	beq.n	8003246 <HAL_GPIO_Init+0x212>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x310>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x314>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x20a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a49      	ldr	r2, [pc, #292]	; (800334c <HAL_GPIO_Init+0x318>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x206>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a48      	ldr	r2, [pc, #288]	; (8003350 <HAL_GPIO_Init+0x31c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x202>
 8003232:	2306      	movs	r3, #6
 8003234:	e00c      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 8003236:	2307      	movs	r3, #7
 8003238:	e00a      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 800323a:	2305      	movs	r3, #5
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 800323e:	2304      	movs	r3, #4
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x21c>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_GPIO_Init+0x300>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_GPIO_Init+0x320>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003292:	4a30      	ldr	r2, [pc, #192]	; (8003354 <HAL_GPIO_Init+0x320>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_GPIO_Init+0x320>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_GPIO_Init+0x320>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_GPIO_Init+0x320>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_GPIO_Init+0x320>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_GPIO_Init+0x320>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_GPIO_Init+0x320>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f ae96 	bls.w	8003050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3724      	adds	r7, #36	; 0x24
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40023800 	.word	0x40023800
 8003334:	40013800 	.word	0x40013800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40021400 	.word	0x40021400
 8003350:	40021800 	.word	0x40021800
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	401a      	ands	r2, r3
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	041a      	lsls	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7ff f850 	bl	8002554 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7ff f84c 	bl	8002554 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ffb0 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	08004820 	.word	0x08004820
 8003584:	20000028 	.word	0x20000028
 8003588:	2000002c 	.word	0x2000002c

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a6:	4bc6      	ldr	r3, [pc, #792]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	f200 817e 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x324>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <HAL_RCC_GetSysClockFreq+0x30>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	080038b1 	.word	0x080038b1
 80035c4:	080038b1 	.word	0x080038b1
 80035c8:	080038b1 	.word	0x080038b1
 80035cc:	080035f7 	.word	0x080035f7
 80035d0:	080038b1 	.word	0x080038b1
 80035d4:	080038b1 	.word	0x080038b1
 80035d8:	080038b1 	.word	0x080038b1
 80035dc:	080035fd 	.word	0x080035fd
 80035e0:	080038b1 	.word	0x080038b1
 80035e4:	080038b1 	.word	0x080038b1
 80035e8:	080038b1 	.word	0x080038b1
 80035ec:	08003759 	.word	0x08003759
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4bb4      	ldr	r3, [pc, #720]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80035f2:	613b      	str	r3, [r7, #16]
       break;
 80035f4:	e15f      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4bb4      	ldr	r3, [pc, #720]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80035f8:	613b      	str	r3, [r7, #16]
      break;
 80035fa:	e15c      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4bb0      	ldr	r3, [pc, #704]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003606:	4bae      	ldr	r3, [pc, #696]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04a      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4bab      	ldr	r3, [pc, #684]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	f04f 0400 	mov.w	r4, #0
 800361c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	ea03 0501 	and.w	r5, r3, r1
 8003628:	ea04 0602 	and.w	r6, r4, r2
 800362c:	4629      	mov	r1, r5
 800362e:	4632      	mov	r2, r6
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	0154      	lsls	r4, r2, #5
 800363a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800363e:	014b      	lsls	r3, r1, #5
 8003640:	4619      	mov	r1, r3
 8003642:	4622      	mov	r2, r4
 8003644:	1b49      	subs	r1, r1, r5
 8003646:	eb62 0206 	sbc.w	r2, r2, r6
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f04f 0400 	mov.w	r4, #0
 8003652:	0194      	lsls	r4, r2, #6
 8003654:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003658:	018b      	lsls	r3, r1, #6
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	eb64 0402 	sbc.w	r4, r4, r2
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	00e2      	lsls	r2, r4, #3
 800366a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800366e:	00d9      	lsls	r1, r3, #3
 8003670:	460b      	mov	r3, r1
 8003672:	4614      	mov	r4, r2
 8003674:	195b      	adds	r3, r3, r5
 8003676:	eb44 0406 	adc.w	r4, r4, r6
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	0262      	lsls	r2, r4, #9
 8003684:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003688:	0259      	lsls	r1, r3, #9
 800368a:	460b      	mov	r3, r1
 800368c:	4614      	mov	r4, r2
 800368e:	4618      	mov	r0, r3
 8003690:	4621      	mov	r1, r4
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	461a      	mov	r2, r3
 800369a:	4623      	mov	r3, r4
 800369c:	f7fc fdba 	bl	8000214 <__aeabi_uldivmod>
 80036a0:	4603      	mov	r3, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e049      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b85      	ldr	r3, [pc, #532]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	ea03 0501 	and.w	r5, r3, r1
 80036be:	ea04 0602 	and.w	r6, r4, r2
 80036c2:	4629      	mov	r1, r5
 80036c4:	4632      	mov	r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0154      	lsls	r4, r2, #5
 80036d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036d4:	014b      	lsls	r3, r1, #5
 80036d6:	4619      	mov	r1, r3
 80036d8:	4622      	mov	r2, r4
 80036da:	1b49      	subs	r1, r1, r5
 80036dc:	eb62 0206 	sbc.w	r2, r2, r6
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	0194      	lsls	r4, r2, #6
 80036ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	1a5b      	subs	r3, r3, r1
 80036f2:	eb64 0402 	sbc.w	r4, r4, r2
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	00e2      	lsls	r2, r4, #3
 8003700:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003704:	00d9      	lsls	r1, r3, #3
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	195b      	adds	r3, r3, r5
 800370c:	eb44 0406 	adc.w	r4, r4, r6
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	02a2      	lsls	r2, r4, #10
 800371a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800371e:	0299      	lsls	r1, r3, #10
 8003720:	460b      	mov	r3, r1
 8003722:	4614      	mov	r4, r2
 8003724:	4618      	mov	r0, r3
 8003726:	4621      	mov	r1, r4
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	461a      	mov	r2, r3
 8003730:	4623      	mov	r3, r4
 8003732:	f7fc fd6f 	bl	8000214 <__aeabi_uldivmod>
 8003736:	4603      	mov	r3, r0
 8003738:	460c      	mov	r4, r1
 800373a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800373c:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	3301      	adds	r3, #1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	613b      	str	r3, [r7, #16]
      break;
 8003756:	e0ae      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04a      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	ea03 0501 	and.w	r5, r3, r1
 8003784:	ea04 0602 	and.w	r6, r4, r2
 8003788:	4629      	mov	r1, r5
 800378a:	4632      	mov	r2, r6
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	0154      	lsls	r4, r2, #5
 8003796:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800379a:	014b      	lsls	r3, r1, #5
 800379c:	4619      	mov	r1, r3
 800379e:	4622      	mov	r2, r4
 80037a0:	1b49      	subs	r1, r1, r5
 80037a2:	eb62 0206 	sbc.w	r2, r2, r6
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	0194      	lsls	r4, r2, #6
 80037b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b4:	018b      	lsls	r3, r1, #6
 80037b6:	1a5b      	subs	r3, r3, r1
 80037b8:	eb64 0402 	sbc.w	r4, r4, r2
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	00e2      	lsls	r2, r4, #3
 80037c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ca:	00d9      	lsls	r1, r3, #3
 80037cc:	460b      	mov	r3, r1
 80037ce:	4614      	mov	r4, r2
 80037d0:	195b      	adds	r3, r3, r5
 80037d2:	eb44 0406 	adc.w	r4, r4, r6
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	0262      	lsls	r2, r4, #9
 80037e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037e4:	0259      	lsls	r1, r3, #9
 80037e6:	460b      	mov	r3, r1
 80037e8:	4614      	mov	r4, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	4621      	mov	r1, r4
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f04f 0400 	mov.w	r4, #0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4623      	mov	r3, r4
 80037f8:	f7fc fd0c 	bl	8000214 <__aeabi_uldivmod>
 80037fc:	4603      	mov	r3, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e049      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	ea03 0501 	and.w	r5, r3, r1
 800381a:	ea04 0602 	and.w	r6, r4, r2
 800381e:	4629      	mov	r1, r5
 8003820:	4632      	mov	r2, r6
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	0154      	lsls	r4, r2, #5
 800382c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003830:	014b      	lsls	r3, r1, #5
 8003832:	4619      	mov	r1, r3
 8003834:	4622      	mov	r2, r4
 8003836:	1b49      	subs	r1, r1, r5
 8003838:	eb62 0206 	sbc.w	r2, r2, r6
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	0194      	lsls	r4, r2, #6
 8003846:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800384a:	018b      	lsls	r3, r1, #6
 800384c:	1a5b      	subs	r3, r3, r1
 800384e:	eb64 0402 	sbc.w	r4, r4, r2
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003860:	00d9      	lsls	r1, r3, #3
 8003862:	460b      	mov	r3, r1
 8003864:	4614      	mov	r4, r2
 8003866:	195b      	adds	r3, r3, r5
 8003868:	eb44 0406 	adc.w	r4, r4, r6
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	02a2      	lsls	r2, r4, #10
 8003876:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800387a:	0299      	lsls	r1, r3, #10
 800387c:	460b      	mov	r3, r1
 800387e:	4614      	mov	r4, r2
 8003880:	4618      	mov	r0, r3
 8003882:	4621      	mov	r1, r4
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	461a      	mov	r2, r3
 800388c:	4623      	mov	r3, r4
 800388e:	f7fc fcc1 	bl	8000214 <__aeabi_uldivmod>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0f1b      	lsrs	r3, r3, #28
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	613b      	str	r3, [r7, #16]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80038b2:	613b      	str	r3, [r7, #16]
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	693b      	ldr	r3, [r7, #16]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8083 	beq.w	80039ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038e6:	4b95      	ldr	r3, [pc, #596]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f2:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038fe:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d00c      	beq.n	8003926 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390c:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d112      	bne.n	800393e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003918:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003924:	d10b      	bne.n	800393e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d05b      	beq.n	80039ea <HAL_RCC_OscConfig+0x11e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d157      	bne.n	80039ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e216      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x8a>
 8003948:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7b      	ldr	r2, [pc, #492]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e01d      	b.n	8003992 <HAL_RCC_OscConfig+0xc6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0xae>
 8003960:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0xc6>
 800397a:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6f      	ldr	r2, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6c      	ldr	r2, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 800398c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fddb 	bl	8002554 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a2:	f7fe fdd7 	bl	8002554 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1db      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0xd6>
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fdc7 	bl	8002554 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ca:	f7fe fdc3 	bl	8002554 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1c7      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039dc:	4b57      	ldr	r3, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0xfe>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d06f      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a04:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a10:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d11c      	bne.n	8003a62 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a28:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d116      	bne.n	8003a62 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a34:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x180>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e18f      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4938      	ldr	r1, [pc, #224]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a60:	e03a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe fd70 	bl	8002554 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a78:	f7fe fd6c 	bl	8002554 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e170      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4925      	ldr	r1, [pc, #148]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fd4f 	bl	8002554 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fd4b 	bl	8002554 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e14f      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d037      	beq.n	8003b54 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d016      	beq.n	8003b1a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe fd2f 	bl	8002554 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe fd2b 	bl	8002554 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e12f      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x22e>
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fe fd18 	bl	8002554 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	e00f      	b.n	8003b48 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fe fd14 	bl	8002554 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d908      	bls.n	8003b48 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e118      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	42470000 	.word	0x42470000
 8003b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b8a      	ldr	r3, [pc, #552]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e9      	bne.n	8003b28 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8097 	beq.w	8003c90 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b83      	ldr	r3, [pc, #524]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b7f      	ldr	r3, [pc, #508]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a7e      	ldr	r2, [pc, #504]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b7c      	ldr	r3, [pc, #496]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b79      	ldr	r3, [pc, #484]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a75      	ldr	r2, [pc, #468]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fcd3 	bl	8002554 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fe fccf 	bl	8002554 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0d3      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x31a>
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e01c      	b.n	8003c20 <HAL_RCC_OscConfig+0x354>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x33c>
 8003bee:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a60      	ldr	r2, [pc, #384]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0x354>
 8003c08:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a59      	ldr	r2, [pc, #356]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	4b57      	ldr	r3, [pc, #348]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a56      	ldr	r2, [pc, #344]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c1a:	f023 0304 	bic.w	r3, r3, #4
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d015      	beq.n	8003c54 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fe fc94 	bl	8002554 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fe fc90 	bl	8002554 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e092      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ee      	beq.n	8003c30 <HAL_RCC_OscConfig+0x364>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fe fc7e 	bl	8002554 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fc7a 	bl	8002554 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e07c      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ee      	bne.n	8003c5c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	4a3a      	ldr	r2, [pc, #232]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d068      	beq.n	8003d6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d060      	beq.n	8003d66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d145      	bne.n	8003d38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fc4f 	bl	8002554 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe fc4b 	bl	8002554 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e04f      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	071b      	lsls	r3, r3, #28
 8003d04:	491b      	ldr	r1, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe fc20 	bl	8002554 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fe fc1c 	bl	8002554 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e020      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x44c>
 8003d36:	e018      	b.n	8003d6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fc09 	bl	8002554 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fe fc05 	bl	8002554 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e009      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_OscConfig+0x4a8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x47a>
 8003d64:	e001      	b.n	8003d6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	42470060 	.word	0x42470060

08003d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e056      	b.n	8003e40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd fc01 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 0104 	and.w	r1, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e64:	d112      	bne.n	8003e8c <HAL_SPI_Receive+0x44>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10e      	bne.n	8003e8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f8e9 	bl	800405a <HAL_SPI_TransmitReceive>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	e0e2      	b.n	8004052 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_Receive+0x52>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0db      	b.n	8004052 <HAL_SPI_Receive+0x20a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea2:	f7fe fb57 	bl	8002554 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eb8:	e0c2      	b.n	8004040 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_Receive+0x7e>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eca:	e0b9      	b.n	8004040 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d107      	bne.n	8003f24 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d007      	beq.n	8003f42 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d162      	bne.n	8004010 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f4a:	e02e      	b.n	8003faa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d115      	bne.n	8003f86 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f103 020c 	add.w	r2, r3, #12
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f84:	e011      	b.n	8003faa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f86:	f7fe fae5 	bl	8002554 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d803      	bhi.n	8003f9e <HAL_SPI_Receive+0x156>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d102      	bne.n	8003fa4 <HAL_SPI_Receive+0x15c>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fa8:	e04a      	b.n	8004040 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1cb      	bne.n	8003f4c <HAL_SPI_Receive+0x104>
 8003fb4:	e031      	b.n	800401a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d113      	bne.n	8003fec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fea:	e011      	b.n	8004010 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fec:	f7fe fab2 	bl	8002554 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d803      	bhi.n	8004004 <HAL_SPI_Receive+0x1bc>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <HAL_SPI_Receive+0x1c2>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800400e:	e017      	b.n	8004040 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1cd      	bne.n	8003fb6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa27 	bl	8004472 <SPI_EndRxTransaction>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
 800403c:	e000      	b.n	8004040 <HAL_SPI_Receive+0x1f8>
  }

error :
 800403e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08c      	sub	sp, #48	; 0x30
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x26>
 800407c:	2302      	movs	r3, #2
 800407e:	e18a      	b.n	8004396 <HAL_SPI_TransmitReceive+0x33c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004088:	f7fe fa64 	bl	8002554 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d00f      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x70>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b0:	d107      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x68>
 80040ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d003      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040c8:	e15b      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x82>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x82>
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040e2:	e14e      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d003      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2205      	movs	r2, #5
 80040f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	887a      	ldrh	r2, [r7, #2]
 800410e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	887a      	ldrh	r2, [r7, #2]
 800411a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d007      	beq.n	800414c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	d178      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x10a>
 800415e:	8b7b      	ldrh	r3, [r7, #26]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d166      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004188:	e053      	b.n	8004232 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d11b      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x176>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x176>
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d113      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d119      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x1b8>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d014      	beq.n	8004212 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	b292      	uxth	r2, r2
 80041f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420e:	2301      	movs	r3, #1
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004212:	f7fe f99f 	bl	8002554 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421e:	429a      	cmp	r2, r3
 8004220:	d807      	bhi.n	8004232 <HAL_SPI_TransmitReceive+0x1d8>
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d003      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004230:	e0a7      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1a6      	bne.n	800418a <HAL_SPI_TransmitReceive+0x130>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1a1      	bne.n	800418a <HAL_SPI_TransmitReceive+0x130>
 8004246:	e07c      	b.n	8004342 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x1fc>
 8004250:	8b7b      	ldrh	r3, [r7, #26]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d16b      	bne.n	800432e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427c:	e057      	b.n	800432e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11c      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x26c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x26c>
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d114      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x2ae>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004308:	f7fe f924 	bl	8002554 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004314:	429a      	cmp	r2, r3
 8004316:	d803      	bhi.n	8004320 <HAL_SPI_TransmitReceive+0x2c6>
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d102      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x2cc>
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800432c:	e029      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1a2      	bne.n	800427e <HAL_SPI_TransmitReceive+0x224>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d19d      	bne.n	800427e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f8f8 	bl	800453c <SPI_EndRxTxTransaction>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d006      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800435e:	e010      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	e000      	b.n	8004382 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004380:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004396:	4618      	mov	r0, r3
 8004398:	3730      	adds	r7, #48	; 0x30
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	e04c      	b.n	800444a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d048      	beq.n	800444a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043b8:	f7fe f8cc 	bl	8002554 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d902      	bls.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x30>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d13d      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d111      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d004      	beq.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fa:	d107      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d10f      	bne.n	8004436 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e00f      	b.n	800446a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	429a      	cmp	r2, r3
 8004466:	d1a3      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af02      	add	r7, sp, #8
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004486:	d111      	bne.n	80044ac <SPI_EndRxTransaction+0x3a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	d004      	beq.n	800449c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449a:	d107      	bne.n	80044ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b4:	d12a      	bne.n	800450c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044be:	d012      	beq.n	80044e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff ff67 	bl	800439e <SPI_WaitFlagStateUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d02d      	beq.n	8004532 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e026      	b.n	8004534 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2101      	movs	r1, #1
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff ff54 	bl	800439e <SPI_WaitFlagStateUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01a      	beq.n	8004532 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	f043 0220 	orr.w	r2, r3, #32
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e013      	b.n	8004534 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	2101      	movs	r1, #1
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff ff41 	bl	800439e <SPI_WaitFlagStateUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e000      	b.n	8004534 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <SPI_EndRxTxTransaction+0x7c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <SPI_EndRxTxTransaction+0x80>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0d5b      	lsrs	r3, r3, #21
 8004554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d112      	bne.n	800458e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff13 	bl	800439e <SPI_WaitFlagStateUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00f      	b.n	80045ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d0f2      	beq.n	800458e <SPI_EndRxTxTransaction+0x52>
 80045a8:	e000      	b.n	80045ac <SPI_EndRxTxTransaction+0x70>
        break;
 80045aa:	bf00      	nop
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000028 	.word	0x20000028
 80045bc:	165e9f81 	.word	0x165e9f81

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0d      	ldr	r6, [pc, #52]	; (80045f8 <__libc_init_array+0x38>)
 80045c4:	4c0d      	ldr	r4, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c6:	1ba4      	subs	r4, r4, r6
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	2500      	movs	r5, #0
 80045cc:	42a5      	cmp	r5, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	4e0b      	ldr	r6, [pc, #44]	; (8004600 <__libc_init_array+0x40>)
 80045d2:	4c0c      	ldr	r4, [pc, #48]	; (8004604 <__libc_init_array+0x44>)
 80045d4:	f000 f834 	bl	8004640 <_init>
 80045d8:	1ba4      	subs	r4, r4, r6
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	2500      	movs	r5, #0
 80045de:	42a5      	cmp	r5, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e8:	4798      	blx	r3
 80045ea:	3501      	adds	r5, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f2:	4798      	blx	r3
 80045f4:	3501      	adds	r5, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	08004838 	.word	0x08004838
 80045fc:	08004838 	.word	0x08004838
 8004600:	08004838 	.word	0x08004838
 8004604:	0800483c 	.word	0x0800483c

08004608 <memcpy>:
 8004608:	b510      	push	{r4, lr}
 800460a:	1e43      	subs	r3, r0, #1
 800460c:	440a      	add	r2, r1
 800460e:	4291      	cmp	r1, r2
 8004610:	d100      	bne.n	8004614 <memcpy+0xc>
 8004612:	bd10      	pop	{r4, pc}
 8004614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800461c:	e7f7      	b.n	800460e <memcpy+0x6>

0800461e <memset>:
 800461e:	4402      	add	r2, r0
 8004620:	4603      	mov	r3, r0
 8004622:	4293      	cmp	r3, r2
 8004624:	d100      	bne.n	8004628 <memset+0xa>
 8004626:	4770      	bx	lr
 8004628:	f803 1b01 	strb.w	r1, [r3], #1
 800462c:	e7f9      	b.n	8004622 <memset+0x4>

0800462e <strcpy>:
 800462e:	4603      	mov	r3, r0
 8004630:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004634:	f803 2b01 	strb.w	r2, [r3], #1
 8004638:	2a00      	cmp	r2, #0
 800463a:	d1f9      	bne.n	8004630 <strcpy+0x2>
 800463c:	4770      	bx	lr
	...

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
