
TFT_Sku_Mar3501-Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800468c  0800468c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000018  080046ac  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080046ac  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb30  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d50  00000000  00000000  0002bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000215bf  00000000  00000000  0002e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c1a  00000000  00000000  0004ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccc8c  00000000  00000000  00058b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  001258a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004518 	.word	0x08004518

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08004518 	.word	0x08004518

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <LCD_SCREEN_Wr>:
/*
 * Function:
 * 	Here we can make the toggling of the wr pin.
 */
static void  LCD_SCREEN_Wr(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(WR_GPIOx, WR_Pin_No);
 8000518:	2102      	movs	r1, #2
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <LCD_SCREEN_Wr+0x10>)
 800051c:	f002 fea1 	bl	8003262 <HAL_GPIO_TogglePin>

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020000 	.word	0x40020000

08000528 <LCD_SCREEN_ClkPinsEnable>:
 * Function:
 *  Activate the clocks of GPIO on the BUS.
 */

static void LCD_SCREEN_ClkPinsEnable(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LCD_SCREEN_ClkPinsEnable+0x68>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <LCD_SCREEN_ConvertDatatoPins>:
 * @datos: value that you want to put in the pins (D0..D7)
 *
 *
 */
static void LCD_SCREEN_ConvertDatatoPins(uint8_t *datos)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, ((*datos>>0) & 1));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	482d      	ldr	r0, [pc, #180]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 80005ae:	f002 fe3f 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIOx, D1_Pin_No, ((*datos>>1) & 1));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	085b      	lsrs	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4828      	ldr	r0, [pc, #160]	; (8000668 <LCD_SCREEN_ConvertDatatoPins+0xd4>)
 80005c6:	f002 fe33 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIOx, D2_Pin_No, ((*datos>>2) & 1));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4821      	ldr	r0, [pc, #132]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 80005e0:	f002 fe26 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIOx, D3_Pin_No, ((*datos>>3) & 1));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2108      	movs	r1, #8
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 80005f8:	f002 fe1a 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIOx, D4_Pin_No, ((*datos>>4) & 1));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	2120      	movs	r1, #32
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000610:	f002 fe0e 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIOx, D5_Pin_No, ((*datos>>5) & 1));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	095b      	lsrs	r3, r3, #5
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	2110      	movs	r1, #16
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000628:	f002 fe02 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIOx, D6_Pin_No, ((*datos>>6) & 1));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <LCD_SCREEN_ConvertDatatoPins+0xd8>)
 8000642:	f002 fdf5 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIOx, D7_Pin_No, ((*datos>>7) & 1));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <LCD_SCREEN_ConvertDatatoPins+0xd0>)
 8000656:	f002 fdeb 	bl	8003230 <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000
 8000668:	40020800 	.word	0x40020800
 800066c:	40020400 	.word	0x40020400

08000670 <LCD_SCREEN_HwInit>:
 * Function:
 * 	Hardware Pins Configuration for the SCREEN.
 *  *
 */
void LCD_SCREEN_HwInit(LCD_SCREEN_Handle_t hLCD)
{
 8000670:	b084      	sub	sp, #16
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
 8000676:	f107 0c08 	add.w	ip, r7, #8
 800067a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	LCD_SCREEN_ClkPinsEnable();
 800067e:	f7ff ff53 	bl	8000528 <LCD_SCREEN_ClkPinsEnable>
	hLCD.hLCD_GPIOx.Pull = GPIO_PULLUP;
 8000682:	2301      	movs	r3, #1
 8000684:	613b      	str	r3, [r7, #16]
	hLCD.hLCD_GPIOx.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
	hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]


	//RST
	hLCD.hLCD_GPIOx.Pin = RST_Pin_No;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RST_GPIOx, &hLCD.hLCD_GPIOx);
 8000692:	f107 0108 	add.w	r1, r7, #8
 8000696:	4835      	ldr	r0, [pc, #212]	; (800076c <LCD_SCREEN_HwInit+0xfc>)
 8000698:	f002 fc38 	bl	8002f0c <HAL_GPIO_Init>
	//CS
	hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	4832      	ldr	r0, [pc, #200]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 80006a6:	f002 fc31 	bl	8002f0c <HAL_GPIO_Init>
	//RS
	hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 80006aa:	2310      	movs	r3, #16
 80006ac:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006b4:	f002 fc2a 	bl	8002f0c <HAL_GPIO_Init>
	//WR
	hLCD.hLCD_GPIOx.Pin = WR_Pin_No;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(WR_GPIOx, &hLCD.hLCD_GPIOx);
 80006bc:	f107 0108 	add.w	r1, r7, #8
 80006c0:	482c      	ldr	r0, [pc, #176]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006c2:	f002 fc23 	bl	8002f0c <HAL_GPIO_Init>
	//RD
	hLCD.hLCD_GPIOx.Pin = RD_Pin_No;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RD_GPIOx, &hLCD.hLCD_GPIOx);
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006d0:	f002 fc1c 	bl	8002f0c <HAL_GPIO_Init>



	hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 80006d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006e0:	f002 fc14 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 80006e8:	f107 0108 	add.w	r1, r7, #8
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <LCD_SCREEN_HwInit+0xfc>)
 80006ee:	f002 fc0d 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D2_Pin_No;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D2_GPIOx, &hLCD.hLCD_GPIOx);
 80006f8:	f107 0108 	add.w	r1, r7, #8
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 80006fe:	f002 fc05 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D3_Pin_No;
 8000702:	2308      	movs	r3, #8
 8000704:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D3_GPIOx, &hLCD.hLCD_GPIOx);
 8000706:	f107 0108 	add.w	r1, r7, #8
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800070c:	f002 fbfe 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D4_Pin_No;
 8000710:	2320      	movs	r3, #32
 8000712:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D4_GPIOx, &hLCD.hLCD_GPIOx);
 8000714:	f107 0108 	add.w	r1, r7, #8
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800071a:	f002 fbf7 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D5_Pin_No;
 800071e:	2310      	movs	r3, #16
 8000720:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D5_GPIOx, &hLCD.hLCD_GPIOx);
 8000722:	f107 0108 	add.w	r1, r7, #8
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 8000728:	f002 fbf0 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D6_Pin_No;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D6_GPIOx, &hLCD.hLCD_GPIOx);
 8000732:	f107 0108 	add.w	r1, r7, #8
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 8000738:	f002 fbe8 	bl	8002f0c <HAL_GPIO_Init>

	hLCD.hLCD_GPIOx.Pin = D7_Pin_No;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D7_GPIOx, &hLCD.hLCD_GPIOx);
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <LCD_SCREEN_HwInit+0x104>)
 8000748:	f002 fbe0 	bl	8002f0c <HAL_GPIO_Init>

	//SS

	hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
	hLCD.hLCD_GPIOx.Pin = D10_Pin_No;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(D10_GPIOx, &hLCD.hLCD_GPIOx);
 8000754:	f107 0108 	add.w	r1, r7, #8
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <LCD_SCREEN_HwInit+0x100>)
 800075a:	f002 fbd7 	bl	8002f0c <HAL_GPIO_Init>
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40020800 	.word	0x40020800
 8000770:	40020400 	.word	0x40020400
 8000774:	40020000 	.word	0x40020000

08000778 <LCD_SCREEN_Enable>:
/*
 * Function:
 *   Setting the CS pin of the screen.
 */
void  LCD_SCREEN_Enable(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LCD_SCREEN_Enable+0x40>)
 8000782:	f002 fd55 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000786:	200a      	movs	r0, #10
 8000788:	f001 febc 	bl	8002504 <HAL_Delay>
	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2101      	movs	r1, #1
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <LCD_SCREEN_Enable+0x40>)
 8000792:	f002 fd4d 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2110      	movs	r1, #16
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 800079c:	f002 fd48 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, WR_Pin_No, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2102      	movs	r1, #2
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 80007a6:	f002 fd43 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2101      	movs	r1, #1
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <LCD_SCREEN_Enable+0x44>)
 80007b0:	f002 fd3e 	bl	8003230 <HAL_GPIO_WritePin>

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020000 	.word	0x40020000

080007c0 <LCD_SCREEN_Init>:
 * Function:
 * 	Initialization of the hardware and Initial parameters of the screen.
 *
 */
void LCD_SCREEN_Init(LCD_SCREEN_Handle_t hLCD)
{
 80007c0:	b084      	sub	sp, #16
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af02      	add	r7, sp, #8
 80007c8:	f107 0c08 	add.w	ip, r7, #8
 80007cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SCREEN_HwInit(hLCD);
 80007d0:	466a      	mov	r2, sp
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007da:	e882 0003 	stmia.w	r2, {r0, r1}
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e4:	f7ff ff44 	bl	8000670 <LCD_SCREEN_HwInit>

	LCD_SCREEN_Reset();	//Hardware Reset
 80007e8:	f000 f814 	bl	8000814 <LCD_SCREEN_Reset>
	LCD_SCREEN_Enable();//Activation of CS(LOW level)
 80007ec:	f7ff ffc4 	bl	8000778 <LCD_SCREEN_Enable>


	//SCREEN Initial Parameters Writing.
	HAL_Delay(100);
 80007f0:	2064      	movs	r0, #100	; 0x64
 80007f2:	f001 fe87 	bl	8002504 <HAL_Delay>
	LCD_SCREEN_WriteData((short int*)InitCmd,sizeof(InitCmd));
 80007f6:	21ac      	movs	r1, #172	; 0xac
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <LCD_SCREEN_Init+0x50>)
 80007fa:	f000 f837 	bl	800086c <LCD_SCREEN_WriteData>
	HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f001 fe80 	bl	8002504 <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800080c:	b004      	add	sp, #16
 800080e:	4770      	bx	lr
 8000810:	080045c8 	.word	0x080045c8

08000814 <LCD_SCREEN_Reset>:
/*
 * Function:
 * 	Hardware reset of the screen.
 */
void  LCD_SCREEN_Reset(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <LCD_SCREEN_Reset+0x4c>)
 800081e:	f002 fd07 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f001 fe6d 	bl	8002504 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2102      	movs	r1, #2
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <LCD_SCREEN_Reset+0x4c>)
 8000830:	f002 fcfe 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <LCD_SCREEN_Reset+0x50>)
 800083a:	f002 fcf9 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 8000844:	f002 fcf4 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, WR_Pin_No, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 800084e:	f002 fcef 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2101      	movs	r1, #1
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <LCD_SCREEN_Reset+0x54>)
 8000858:	f002 fcea 	bl	8003230 <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020800 	.word	0x40020800
 8000864:	40020400 	.word	0x40020400
 8000868:	40020000 	.word	0x40020000

0800086c <LCD_SCREEN_WriteData>:
 *  a new CMD, it's necessary to put a -1 between them. With this, the program knows that the next
 *  number is a CMD and followed for parameters.
 *
 */
void  LCD_SCREEN_WriteData(short int *data,uint32_t lenght)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Counter;
	Counter=lenght;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	60fb      	str	r3, [r7, #12]

	while(Counter >0)
 800087a:	e034      	b.n	80008e6 <LCD_SCREEN_WriteData+0x7a>
	{
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <LCD_SCREEN_WriteData+0x88>)
 8000882:	f002 fcd5 	bl	8003230 <HAL_GPIO_WritePin>
		LCD_SCREEN_Wr();
 8000886:	f7ff fe45 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins((uint8_t*)data);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe82 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000890:	f7ff fe40 	bl	8000514 <LCD_SCREEN_Wr>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	4816      	ldr	r0, [pc, #88]	; (80008f4 <LCD_SCREEN_WriteData+0x88>)
 800089a:	f002 fcc9 	bl	8003230 <HAL_GPIO_WritePin>
		Counter--;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
		data++;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3302      	adds	r3, #2
 80008a8:	607b      	str	r3, [r7, #4]
		while(Counter > 0)
 80008aa:	e019      	b.n	80008e0 <LCD_SCREEN_WriteData+0x74>
		{
			if(*data==-1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b6:	d106      	bne.n	80008c6 <LCD_SCREEN_WriteData+0x5a>
			{
				data++;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3302      	adds	r3, #2
 80008bc:	607b      	str	r3, [r7, #4]
				Counter--;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
				break;
 80008c4:	e00f      	b.n	80008e6 <LCD_SCREEN_WriteData+0x7a>
			}
			LCD_SCREEN_Wr();
 80008c6:	f7ff fe25 	bl	8000514 <LCD_SCREEN_Wr>
			LCD_SCREEN_ConvertDatatoPins((uint8_t*)data);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fe62 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
			LCD_SCREEN_Wr();
 80008d0:	f7ff fe20 	bl	8000514 <LCD_SCREEN_Wr>
			data++;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3302      	adds	r3, #2
 80008d8:	607b      	str	r3, [r7, #4]
			Counter--;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3b01      	subs	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
		while(Counter > 0)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1e2      	bne.n	80008ac <LCD_SCREEN_WriteData+0x40>
	while(Counter >0)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1c7      	bne.n	800087c <LCD_SCREEN_WriteData+0x10>

		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020000 	.word	0x40020000

080008f8 <LCD_SCREEN_WriteDataSingle>:
/*
 * Function:
 *   This is a function for send only one CMD or data.
 */
void  LCD_SCREEN_WriteDataSingle(uint8_t data,uint8_t CmdorData)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if(CmdorData==Comando)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d112      	bne.n	8000934 <LCD_SCREEN_WriteDataSingle+0x3c>
	{
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <LCD_SCREEN_WriteDataSingle+0x54>)
 8000914:	f002 fc8c 	bl	8003230 <HAL_GPIO_WritePin>
		LCD_SCREEN_Wr();
 8000918:	f7ff fdfc 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins(&data);
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe38 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000924:	f7ff fdf6 	bl	8000514 <LCD_SCREEN_Wr>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2110      	movs	r1, #16
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <LCD_SCREEN_WriteDataSingle+0x54>)
 800092e:	f002 fc7f 	bl	8003230 <HAL_GPIO_WritePin>
	{
		LCD_SCREEN_Wr();
		LCD_SCREEN_ConvertDatatoPins(&data);
		LCD_SCREEN_Wr();
	}
}
 8000932:	e007      	b.n	8000944 <LCD_SCREEN_WriteDataSingle+0x4c>
		LCD_SCREEN_Wr();
 8000934:	f7ff fdee 	bl	8000514 <LCD_SCREEN_Wr>
		LCD_SCREEN_ConvertDatatoPins(&data);
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe2a 	bl	8000594 <LCD_SCREEN_ConvertDatatoPins>
		LCD_SCREEN_Wr();
 8000940:	f7ff fde8 	bl	8000514 <LCD_SCREEN_Wr>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40020000 	.word	0x40020000

08000950 <LCD_SCREEN_Coordenates>:
 *   Here we can put the coordinates for the crop and the size(HighxWidth) of where we want to paint,
 *   and the size of it.
 *
 */
void LCD_SCREEN_Coordenates(uint16_t Xo,uint16_t Yo,uint16_t Xe,uint16_t Ye)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4604      	mov	r4, r0
 8000958:	4608      	mov	r0, r1
 800095a:	4611      	mov	r1, r2
 800095c:	461a      	mov	r2, r3
 800095e:	4623      	mov	r3, r4
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	4603      	mov	r3, r0
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	807b      	strh	r3, [r7, #2]
 800096a:	4613      	mov	r3, r2
 800096c:	803b      	strh	r3, [r7, #0]
	LCD_SCREEN_WriteDataSingle(0x2B, Comando);
 800096e:	2101      	movs	r1, #1
 8000970:	202b      	movs	r0, #43	; 0x2b
 8000972:	f7ff ffc1 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Yo>>8),Data);
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffb9 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Yo,Data);
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb3 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Ye>>8),Data);
 8000992:	883b      	ldrh	r3, [r7, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffab 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Ye,Data);
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2102      	movs	r1, #2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffa5 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>

	LCD_SCREEN_WriteDataSingle(0x2A, Comando);
 80009ae:	2101      	movs	r1, #1
 80009b0:	202a      	movs	r0, #42	; 0x2a
 80009b2:	f7ff ffa1 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Xo>>8),Data);
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff99 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Xo,Data);
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff93 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)(Xe>>8),Data);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff8b 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	LCD_SCREEN_WriteDataSingle((uint8_t)Xe,Data);
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff85 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <LCD_SCREEN_PaintColor>:
 * Function:
 *   This function is for paint some color in the coordinates that it was defined previously(LCD_SCREEN_Coordenates)
 *   @NOTE:It's not finished yet, the number 100 of the loop, is temporary.
 */
void LCD_SCREEN_PaintColor(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
	LCD_SCREEN_WriteDataSingle(0x2C, Comando);
 80009fc:	2101      	movs	r1, #1
 80009fe:	202c      	movs	r0, #44	; 0x2c
 8000a00:	f7ff ff7a 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	for(int i =0;i<100;i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e00a      	b.n	8000a20 <LCD_SCREEN_PaintColor+0x2a>
	{
		LCD_SCREEN_WriteDataSingle((uint8_t)(Violeta>>8), Data);
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	20f8      	movs	r0, #248	; 0xf8
 8000a0e:	f7ff ff73 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
		LCD_SCREEN_WriteDataSingle((uint8_t)Violeta, Data);
 8000a12:	2102      	movs	r1, #2
 8000a14:	201f      	movs	r0, #31
 8000a16:	f7ff ff6f 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	for(int i =0;i<100;i++)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b63      	cmp	r3, #99	; 0x63
 8000a24:	ddf1      	ble.n	8000a0a <LCD_SCREEN_PaintColor+0x14>
	}
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <LCD_SD_SPISoftInit>:
 * Function:
 * 	SPI protocol configuration
 */

static void LCD_SD_SPISoftInit(LCD_SD_Handle_it *hLCD)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

	hLCD->hspi1.Instance = SPI1;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a20      	ldr	r2, [pc, #128]	; (8000abc <LCD_SD_SPISoftInit+0x8c>)
 8000a3c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hLCD->hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a46:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	hLCD->hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	hLCD->hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hLCD->hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	hLCD->hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hLCD->hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a70:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hLCD->hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128 ;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	hLCD->hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	hLCD->hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hLCD->hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	hLCD->hspi1.Init.CRCPolynomial = 10;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	220a      	movs	r2, #10
 8000a98:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	if (HAL_SPI_Init(&hLCD->hspi1) != HAL_OK)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f8d8 	bl	8003c58 <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <LCD_SD_SPISoftInit+0x82>
	{
	Error_Handler();
 8000aae:	f001 fc19 	bl	80022e4 <Error_Handler>
	}


}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013000 	.word	0x40013000

08000ac0 <LCD_SD_SPIHwInit>:
/*
 * Function:
 * 	Hardware and clock configuration for SPI communication.
 */
static void LCD_SD_SPIHwInit(SPI_HandleTypeDef *hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	HAL_SPI_MspInit(hspi);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 fd73 	bl	80015b4 <HAL_SPI_MspInit>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <LCD_SD_ReadFileData>:
 * Function:
 * 	Function to read the data store inside of SD card..
 */

static void LCD_SD_ReadFileData(LCD_SD_Handle_it *hLCD,uint32_t FileStartAddress1,uint32_t AmountofBytes)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b091      	sub	sp, #68	; 0x44
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	uint32_t FileStartAddress= FileStartAddress1*hLCD->SDhandle.BytesPerSector;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t tempTx=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CMD18[]	=	{SD_CMD18,(uint8_t)(FileStartAddress>>24),(uint8_t)(FileStartAddress>>16),(uint8_t)(FileStartAddress>>8),(uint8_t)FileStartAddress,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 8000afa:	2352      	movs	r3, #82	; 0x52
 8000afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000b26:	2301      	movs	r3, #1
 8000b28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t CMD12[]	=	{SD_CMD12,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000b38:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <LCD_SD_ReadFileData+0x13c>)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b42:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f240 2202 	movw	r2, #514	; 0x202
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fccc 	bl	80044f6 <memset>

	HAL_Delay(100);
 8000b5e:	2064      	movs	r0, #100	; 0x64
 8000b60:	f001 fcd0 	bl	8002504 <HAL_Delay>
	LCD_SD_SPIEmptyCycles(hLCD);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 fb79 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD18,(uint8_t*)ReceiveAns, sizeof(CMD18));
 8000b6a:	f107 0214 	add.w	r2, r7, #20
 8000b6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b72:	2308      	movs	r3, #8
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 fb47 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 8000b7a:	e006      	b.n	8000b8a <LCD_SD_ReadFileData+0xb2>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 fb56 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b8e:	d1f5      	bne.n	8000b7c <LCD_SD_ReadFileData+0xa4>
	}

	ReceiveAns[0]=0x00;
 8000b90:	2300      	movs	r3, #0
 8000b92:	753b      	strb	r3, [r7, #20]
	uint16_t CounterSize=0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	86fb      	strh	r3, [r7, #54]	; 0x36
	LCD_SCREEN_WriteDataSingle(MemoryWriteCMD, Comando);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	202c      	movs	r0, #44	; 0x2c
 8000b9c:	f7ff feac 	bl	80008f8 <LCD_SCREEN_WriteDataSingle>
	do
	{
		LCD_SD_SPIReceive_IT(&hLCD->hspi1,LCD_SCREEN_WriteDataSingle,&tempTx, (uint8_t*)(hLCD->SDhandle.ReceiveBytesSector),hLCD->SDhandle.BytesPerSector+2,0xFF);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8000bae:	3302      	adds	r3, #2
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	9400      	str	r4, [sp, #0]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4916      	ldr	r1, [pc, #88]	; (8000c18 <LCD_SD_ReadFileData+0x140>)
 8000bc0:	f000 fb72 	bl	80012a8 <LCD_SD_SPIReceive_IT>
		while(ReceiveAns[0] != 0xFE)
 8000bc4:	e006      	b.n	8000bd4 <LCD_SD_ReadFileData+0xfc>
		{
			LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 fb31 	bl	8001236 <LCD_SD_SPIReceive>
		while(ReceiveAns[0] != 0xFE)
 8000bd4:	7d3b      	ldrb	r3, [r7, #20]
 8000bd6:	2bfe      	cmp	r3, #254	; 0xfe
 8000bd8:	d1f5      	bne.n	8000bc6 <LCD_SD_ReadFileData+0xee>
		}
		ReceiveAns[0]=0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	753b      	strb	r3, [r7, #20]
		CounterSize++;
 8000bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000be0:	3301      	adds	r3, #1
 8000be2:	86fb      	strh	r3, [r7, #54]	; 0x36
	}while(CounterSize<=(hLCD->SDhandle.FileSectorsSize));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8b3 321c 	ldrh.w	r3, [r3, #540]	; 0x21c
 8000bea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d9d7      	bls.n	8000ba0 <LCD_SD_ReadFileData+0xc8>


	ReceiveAns[0]=0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	753b      	strb	r3, [r7, #20]
	while(ReceiveAns[0] == 0x00)
 8000bf4:	e007      	b.n	8000c06 <LCD_SD_ReadFileData+0x12e>
	{

		LCD_SD_SPISend(hLCD,(uint8_t*)CMD12,(uint8_t*)ReceiveAns, sizeof(CMD12));
 8000bf6:	f107 0214 	add.w	r2, r7, #20
 8000bfa:	f107 011c 	add.w	r1, r7, #28
 8000bfe:	2308      	movs	r3, #8
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 fb01 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[0] == 0x00)
 8000c06:	7d3b      	ldrb	r3, [r7, #20]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f4      	beq.n	8000bf6 <LCD_SD_ReadFileData+0x11e>
	}



}
 8000c0c:	bf00      	nop
 8000c0e:	373c      	adds	r7, #60	; 0x3c
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	08004530 	.word	0x08004530
 8000c18:	080008f9 	.word	0x080008f9

08000c1c <LCD_SD_FindFile>:
 * Function:
 * 	This function is for search the file that we want to read. This part will read the table of files and try
 *  to find it.
 */
static uint16_t LCD_SD_FindFile(LCD_SD_Handle_it *hLCD,char FileNameOut[],uint32_t SizeName)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	466b      	mov	r3, sp
 8000c2a:	461d      	mov	r5, r3

	uint8_t	 EqualCounter=0,LoopCounter=0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hLCD->SDhandle.FileFound=0;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	char FileName[SizeName];
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4603      	mov	r3, r0
 8000c44:	3b01      	subs	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	f04f 0400 	mov.w	r4, #0
 8000c56:	00d4      	lsls	r4, r2, #3
 8000c58:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c5c:	00cb      	lsls	r3, r1, #3
 8000c5e:	4601      	mov	r1, r0
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	f04f 0400 	mov.w	r4, #0
 8000c6c:	00d4      	lsls	r4, r2, #3
 8000c6e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c72:	00cb      	lsls	r3, r1, #3
 8000c74:	1dc3      	adds	r3, r0, #7
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c7e:	466b      	mov	r3, sp
 8000c80:	3300      	adds	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
	strcpy(FileName,FileNameOut);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fc3c 	bl	8004506 <strcpy>

	for(int i=0;i<SizeName;i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	e019      	b.n	8000cc8 <LCD_SD_FindFile+0xac>
	{
		if((FileName[i]>0x60)&&(FileName[i]<0x7B))	//if the value is between this range, is a low letter
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b60      	cmp	r3, #96	; 0x60
 8000c9e:	d910      	bls.n	8000cc2 <LCD_SD_FindFile+0xa6>
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b7a      	cmp	r3, #122	; 0x7a
 8000caa:	d80a      	bhi.n	8000cc2 <LCD_SD_FindFile+0xa6>
		{
			FileName[i]=FileName[i]-32;		//This convert the low letter in CAPS using ASCII table.
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3b20      	subs	r3, #32
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<SizeName;i++)
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8e1      	bhi.n	8000c94 <LCD_SD_FindFile+0x78>
		}
	}


#warning TODO: It needs a part where if the file doesnt  exist return a value.
	while(hLCD->SDhandle.FileFound!=1)
 8000cd0:	e0cd      	b.n	8000e6e <LCD_SD_FindFile+0x252>
	{
		LCD_SD_READSector(hLCD, hLCD->SDhandle.FileDirectory+LoopCounter);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cdc:	4413      	add	r3, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 fd27 	bl	8001734 <LCD_SD_READSector>
			//Here search the format of the file.
		for(int i=8;i<sizeof(hLCD->SDhandle.ReceiveBytesSector);i+=32)
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e0b5      	b.n	8000e58 <LCD_SD_FindFile+0x23c>
		{
			if((hLCD->SDhandle.ReceiveBytesSector[i]==FileName[SizeName-3])&&(hLCD->SDhandle.ReceiveBytesSector[i+1]==FileName[SizeName-2])&&(hLCD->SDhandle.ReceiveBytesSector[i+2]==FileName[SizeName-1]))
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b03      	subs	r3, #3
 8000cf8:	6939      	ldr	r1, [r7, #16]
 8000cfa:	5ccb      	ldrb	r3, [r1, r3]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 80a8 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3301      	adds	r3, #1
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	5cd2      	ldrb	r2, [r2, r3]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	5ccb      	ldrb	r3, [r1, r3]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f040 809d 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	5cd2      	ldrb	r2, [r2, r3]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	5ccb      	ldrb	r3, [r1, r3]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8092 	bne.w	8000e52 <LCD_SD_FindFile+0x236>
			{

				for(int j=0;j<6;j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e02e      	b.n	8000d92 <LCD_SD_FindFile+0x176>
				{
					if((hLCD->SDhandle.ReceiveBytesSector[(i-8)]==FileName[0]))	//The first character has to be the same.
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	3b08      	subs	r3, #8
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	5cd2      	ldrb	r2, [r2, r3]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d11f      	bne.n	8000d84 <LCD_SD_FindFile+0x168>
					{
						if((hLCD->SDhandle.ReceiveBytesSector[j+(i-8)]==FileName[j])||(hLCD->SDhandle.ReceiveBytesSector[j+(i-8)]==' '))
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1a3 0208 	sub.w	r2, r3, #8
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	5cd2      	ldrb	r2, [r2, r3]
 8000d52:	6939      	ldr	r1, [r7, #16]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	440b      	add	r3, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d008      	beq.n	8000d70 <LCD_SD_FindFile+0x154>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f1a3 0208 	sub.w	r2, r3, #8
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	4413      	add	r3, r2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d105      	bne.n	8000d7c <LCD_SD_FindFile+0x160>
						{
							EqualCounter++;
 8000d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d74:	3301      	adds	r3, #1
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d7a:	e007      	b.n	8000d8c <LCD_SD_FindFile+0x170>
						}
						else
						{
							EqualCounter=0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8000d82:	e009      	b.n	8000d98 <LCD_SD_FindFile+0x17c>
						}
					}
					else
					{
						EqualCounter=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8000d8a:	e005      	b.n	8000d98 <LCD_SD_FindFile+0x17c>
				for(int j=0;j<6;j++)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	ddcd      	ble.n	8000d34 <LCD_SD_FindFile+0x118>
					}

				}
				if(EqualCounter==6)
 8000d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d158      	bne.n	8000e52 <LCD_SD_FindFile+0x236>
				{
					if((hLCD->SDhandle.ReceiveBytesSector[i-1]==(uint8_t)FileName[SizeName-6])||((hLCD->SDhandle.ReceiveBytesSector[i-1]=='1'))||((hLCD->SDhandle.ReceiveBytesSector[i-1]==' '))) //el ultimo caracter de nombre puede ser un 1, otro caracter igual al nombre o un espacio si el nombre es corto
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	5cd2      	ldrb	r2, [r2, r3]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b06      	subs	r3, #6
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	5ccb      	ldrb	r3, [r1, r3]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d00b      	beq.n	8000dcc <LCD_SD_FindFile+0x1b0>
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	2b31      	cmp	r3, #49	; 0x31
 8000dbe:	d005      	beq.n	8000dcc <LCD_SD_FindFile+0x1b0>
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	2b20      	cmp	r3, #32
 8000dca:	d142      	bne.n	8000e52 <LCD_SD_FindFile+0x236>
					{
						hLCD->SDhandle.FileSector = hLCD->SDhandle.FileDirectory+((((hLCD->SDhandle.ReceiveBytesSector[i+19]<<8)|(hLCD->SDhandle.ReceiveBytesSector[i+18]))-2)*(hLCD->SDhandle.ClusterSize));//SectorFileDirectory+(OffsetsDeClustersdelArchivo-2)*Cluster;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	3213      	adds	r2, #19
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	5c8a      	ldrb	r2, [r1, r2]
 8000dda:	0212      	lsls	r2, r2, #8
 8000ddc:	69f9      	ldr	r1, [r7, #28]
 8000dde:	3112      	adds	r1, #18
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	5c41      	ldrb	r1, [r0, r1]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	3a02      	subs	r2, #2
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	f891 120c 	ldrb.w	r1, [r1, #524]	; 0x20c
 8000dee:	fb01 f202 	mul.w	r2, r1, r2
 8000df2:	441a      	add	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
						hLCD->SDhandle.FileSize = (hLCD->SDhandle.ReceiveBytesSector[i+23]<<24)|(hLCD->SDhandle.ReceiveBytesSector[i+22]<<16)|(hLCD->SDhandle.ReceiveBytesSector[i+21]<<8)|(hLCD->SDhandle.ReceiveBytesSector[i+20]);
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3317      	adds	r3, #23
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	061a      	lsls	r2, r3, #24
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3316      	adds	r3, #22
 8000e08:	68f9      	ldr	r1, [r7, #12]
 8000e0a:	5ccb      	ldrb	r3, [r1, r3]
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3315      	adds	r3, #21
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	3214      	adds	r2, #20
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	5c8a      	ldrb	r2, [r1, r2]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
						hLCD->SDhandle.FileSectorsSize =hLCD->SDhandle.FileSize/hLCD->SDhandle.BytesPerSector;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8000e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
						hLCD->SDhandle.FileFound=1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e014      	b.n	8000e7c <LCD_SD_FindFile+0x260>
		for(int i=8;i<sizeof(hLCD->SDhandle.ReceiveBytesSector);i+=32)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3320      	adds	r3, #32
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f240 2201 	movw	r2, #513	; 0x201
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	f67f af44 	bls.w	8000cec <LCD_SD_FindFile+0xd0>
					}
				}
			}
		}
		LoopCounter++;
 8000e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(hLCD->SDhandle.FileFound!=1)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f47f af2c 	bne.w	8000cd2 <LCD_SD_FindFile+0xb6>

	}

	return 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	46ad      	mov	sp, r5
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e88 <LCD_SD_Mounting>:
 * Function:
 * 	Process to mount the SD card, using the steps in the SD card procotol for prepare it.
 * 	@for more information, you should read the SD card IDLE state in the reference manual.
 */
static uint8_t LCD_SD_Mounting(LCD_SD_Handle_it *hLCD)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b092      	sub	sp, #72	; 0x48
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

	uint8_t CMD0[] 		= 	{SD_CMD0,0x00,0x00,0x00,0x00,SD_CRC_CMD0,0x00,0x00};
 8000e90:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <LCD_SD_Mounting+0x188>)
 8000e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD8[] 		= 	{SD_CMD8,0x00,0x00,0x01,0xAA,SD_CRC_CMD8,0x00,0x00};
 8000e9e:	4a5d      	ldr	r2, [pc, #372]	; (8001014 <LCD_SD_Mounting+0x18c>)
 8000ea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD16[] 	= 	{SD_CMD16,0x00,0x00,0x02,0x00,SD_CRC_NO,0x00,0x00};
 8000eac:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <LCD_SD_Mounting+0x190>)
 8000eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD55[] 	= 	{SD_CMD55,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <LCD_SD_Mounting+0x194>)
 8000ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ACMD41[] 	= 	{SD_ACMD41,0x40,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ec8:	4a55      	ldr	r2, [pc, #340]	; (8001020 <LCD_SD_Mounting+0x198>)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD58[]		= 	{SD_CMD58,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ed6:	4a53      	ldr	r2, [pc, #332]	; (8001024 <LCD_SD_Mounting+0x19c>)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CMD59[]		= 	{SD_CMD59,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <LCD_SD_Mounting+0x1a0>)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eee:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t ReceiveAns[8] = {0x0,0x0,0x0,0x0,0x0,0x0,0x00,0x00};
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]



	while(ReceiveAns[7]!=0x01)
 8000efc:	e00a      	b.n	8000f14 <LCD_SD_Mounting+0x8c>
	{
		LCD_SD_SPIEmptyCycles(hLCD);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f9ac 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)CMD0,(uint8_t*)ReceiveAns, sizeof(CMD0));
 8000f04:	f107 0208 	add.w	r2, r7, #8
 8000f08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f97a 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[7]!=0x01)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d1f1      	bne.n	8000efe <LCD_SD_Mounting+0x76>
	}



	LCD_SD_SPIEmptyCycles(hLCD);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f99e 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD8,(uint8_t*)ReceiveAns, sizeof(CMD8));
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f28:	2308      	movs	r3, #8
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f96c 	bl	8001208 <LCD_SD_SPISend>
	LCD_SD_SPIReceive(hLCD, (uint8_t*)ReceiveAns, sizeof(ReceiveAns));
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f97c 	bl	8001236 <LCD_SD_SPIReceive>


	LCD_SD_SPIEmptyCycles(hLCD);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f98c 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD58,(uint8_t*)ReceiveAns, sizeof(CMD58));
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	f107 0118 	add.w	r1, r7, #24
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f95a 	bl	8001208 <LCD_SD_SPISend>

	LCD_SD_SPIEmptyCycles(hLCD);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f981 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD59,(uint8_t*)ReceiveAns, sizeof(CMD59));
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f107 0110 	add.w	r1, r7, #16
 8000f62:	2308      	movs	r3, #8
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f94f 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[7]!=0x00)
 8000f6a:	e015      	b.n	8000f98 <LCD_SD_Mounting+0x110>
	{
		LCD_SD_SPIEmptyCycles(hLCD);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f975 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)CMD55,(uint8_t*)ReceiveAns, sizeof(CMD55));
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f943 	bl	8001208 <LCD_SD_SPISend>
		LCD_SD_SPIEmptyCycles(hLCD);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f96a 	bl	800125c <LCD_SD_SPIEmptyCycles>
		LCD_SD_SPISend(hLCD,(uint8_t*)ACMD41,(uint8_t*)ReceiveAns, sizeof(ACMD41));
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	f107 0120 	add.w	r1, r7, #32
 8000f90:	2308      	movs	r3, #8
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f938 	bl	8001208 <LCD_SD_SPISend>
	while(ReceiveAns[7]!=0x00)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1e6      	bne.n	8000f6c <LCD_SD_Mounting+0xe4>
	}


	hLCD->hspi1.Instance->CR1 &= ~(SPI_CR1_SPE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 &= ~(0x07<<SPI_CR1_BR_Pos);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fc0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000fc4:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 |= (3<<SPI_CR1_BR_Pos);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fd4:	f042 0218 	orr.w	r2, r2, #24
 8000fd8:	601a      	str	r2, [r3, #0]
	hLCD->hspi1.Instance->CR1 |= (SPI_CR1_SPE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	601a      	str	r2, [r3, #0]
	LCD_SD_SPIEmptyCycles(hLCD);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f934 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD16,(uint8_t*)ReceiveAns, sizeof(CMD16));
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f902 	bl	8001208 <LCD_SD_SPISend>

	return ReceiveAns[1];
 8001004:	7a7b      	ldrb	r3, [r7, #9]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3748      	adds	r7, #72	; 0x48
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	08004538 	.word	0x08004538
 8001014:	08004540 	.word	0x08004540
 8001018:	08004548 	.word	0x08004548
 800101c:	08004550 	.word	0x08004550
 8001020:	08004558 	.word	0x08004558
 8001024:	08004560 	.word	0x08004560
 8001028:	08004568 	.word	0x08004568

0800102c <LCD_SD_FindFilesDirectory>:
/*
 * Function:
 * 		As before, this function is to find the directory file. Where are all the files location.
 */
static void LCD_SD_FindFilesDirectory(LCD_SD_Handle_it *hLCD)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	uint16_t ReservedSector	=	0;
 8001034:	2300      	movs	r3, #0
 8001036:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t HiddenSector	=	0;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
	uint32_t SectorPerFlat	=	0;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]

	uint32_t SectorAddress=hLCD->SDhandle.PartitionTable*512;	//Convertir Sector en dirección, ya que cada sector tiene 512 bytes.
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	61bb      	str	r3, [r7, #24]
	uint8_t CMD17[]={SD_CMD17,(uint8_t)(SectorAddress>>24),(uint8_t)(SectorAddress>>16),(uint8_t)(SectorAddress>>8),(uint8_t)SectorAddress,SD_CRC_NO,0x00,0x00};
 800104a:	2351      	movs	r3, #81	; 0x51
 800104c:	743b      	strb	r3, [r7, #16]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	0e1b      	lsrs	r3, r3, #24
 8001052:	b2db      	uxtb	r3, r3
 8001054:	747b      	strb	r3, [r7, #17]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b2db      	uxtb	r3, r3
 8001064:	74fb      	strb	r3, [r7, #19]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	753b      	strb	r3, [r7, #20]
 800106c:	2301      	movs	r3, #1
 800106e:	757b      	strb	r3, [r7, #21]
 8001070:	2300      	movs	r3, #0
 8001072:	75bb      	strb	r3, [r7, #22]
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]

	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]


	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f240 2202 	movw	r2, #514	; 0x202
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fa33 	bl	80044f6 <memset>



	LCD_SD_SPIEmptyCycles(hLCD);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f8e3 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	f107 0110 	add.w	r1, r7, #16
 800109e:	2308      	movs	r3, #8
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8b1 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 80010a6:	e006      	b.n	80010b6 <LCD_SD_FindFilesDirectory+0x8a>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8c0 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	2bfe      	cmp	r3, #254	; 0xfe
 80010ba:	d1f5      	bne.n	80010a8 <LCD_SD_FindFilesDirectory+0x7c>
	}
	LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f240 2202 	movw	r2, #514	; 0x202
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8b6 	bl	8001236 <LCD_SD_SPIReceive>

	if((hLCD->SDhandle.ReceiveBytesSector[01]==0x58)&&(hLCD->SDhandle.ReceiveBytesSector[00]==0xEB))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	2b58      	cmp	r3, #88	; 0x58
 80010d0:	d14b      	bne.n	800116a <LCD_SD_FindFilesDirectory+0x13e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2beb      	cmp	r3, #235	; 0xeb
 80010d8:	d147      	bne.n	800116a <LCD_SD_FindFilesDirectory+0x13e>
	{
		HiddenSector 	= (hLCD->SDhandle.ReceiveBytesSector[0x1F]<<24) | (hLCD->SDhandle.ReceiveBytesSector[0x1E]<<16) | (hLCD->SDhandle.ReceiveBytesSector[0x1D]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x1C]);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7fdb      	ldrb	r3, [r3, #31]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f9b      	ldrb	r3, [r3, #30]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7f5b      	ldrb	r3, [r3, #29]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	4313      	orrs	r3, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	7f12      	ldrb	r2, [r2, #28]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	623b      	str	r3, [r7, #32]
		SectorPerFlat 	= (hLCD->SDhandle.ReceiveBytesSector[0x27]<<24) | (hLCD->SDhandle.ReceiveBytesSector[0x26]<<16) | (hLCD->SDhandle.ReceiveBytesSector[0x25]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x24]);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010fe:	061a      	lsls	r2, r3, #24
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4313      	orrs	r3, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800111a:	4313      	orrs	r3, r2
 800111c:	61fb      	str	r3, [r7, #28]
		ReservedSector 	= (hLCD->SDhandle.ReceiveBytesSector[0x0F]<<8)  | (hLCD->SDhandle.ReceiveBytesSector[0x0E]);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7bdb      	ldrb	r3, [r3, #15]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b9b      	ldrb	r3, [r3, #14]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	84fb      	strh	r3, [r7, #38]	; 0x26
		hLCD->SDhandle.FileDirectory	=	HiddenSector + ReservedSector + (2*SectorPerFlat);
 8001132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	441a      	add	r2, r3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	441a      	add	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		hLCD->SDhandle.ClusterSize		= hLCD->SDhandle.ReceiveBytesSector[0x0D];
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b5a      	ldrb	r2, [r3, #13]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
		hLCD->SDhandle.BytesPerSector	= (hLCD->SDhandle.ReceiveBytesSector[0x0C]<<8)|(hLCD->SDhandle.ReceiveBytesSector[0x0B]);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7b1b      	ldrb	r3, [r3, #12]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7adb      	ldrb	r3, [r3, #11]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21b      	sxth	r3, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8001168:	e003      	b.n	8001172 <LCD_SD_FindFilesDirectory+0x146>
	}else
		hLCD->SDhandle.FileDirectory = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <LCD_SD_FindPartitionTable>:
/*
 * Function:
 * 	In this case the function will try to find the partition table, where are all the data of the sd card.
 */
static void LCD_SD_FindPartitionTable(LCD_SD_Handle_it *hLCD)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	uint8_t CMD17[]={SD_CMD17,0x00,0x00,0x00,0x00,SD_CRC_NO,0x00,0x00};
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <LCD_SD_FindPartitionTable+0x88>)
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
	memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f240 2202 	movw	r2, #514	; 0x202
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f9a6 	bl	80044f6 <memset>



	LCD_SD_SPIEmptyCycles(hLCD);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f856 	bl	800125c <LCD_SD_SPIEmptyCycles>
	LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	f107 0110 	add.w	r1, r7, #16
 80011b8:	2308      	movs	r3, #8
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f824 	bl	8001208 <LCD_SD_SPISend>

	while(ReceiveAns[0] != 0xFE)
 80011c0:	e006      	b.n	80011d0 <LCD_SD_FindPartitionTable+0x54>
	{
		LCD_SD_SPIReceive(hLCD, ReceiveAns, 1);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f833 	bl	8001236 <LCD_SD_SPIReceive>
	while(ReceiveAns[0] != 0xFE)
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	2bfe      	cmp	r3, #254	; 0xfe
 80011d4:	d1f5      	bne.n	80011c2 <LCD_SD_FindPartitionTable+0x46>
	}
	LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f240 2202 	movw	r2, #514	; 0x202
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f829 	bl	8001236 <LCD_SD_SPIReceive>

	hLCD->SDhandle.PartitionTable = (hLCD->SDhandle.ReceiveBytesSector[0x1C7]<<8) | (hLCD->SDhandle.ReceiveBytesSector[0x1C6]);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	f892 21c6 	ldrb.w	r2, [r2, #454]	; 0x1c6
 80011f2:	4313      	orrs	r3, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08004570 	.word	0x08004570

08001208 <LCD_SD_SPISend>:
 * Function:
 * 	An easy way to send data through the SPI protocol to SD Reader.
 */

static void LCD_SD_SPISend(LCD_SD_Handle_it *hLCD, uint8_t *PtCmd, uint8_t *PtCmdAns,uint32_t Size)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
	HAL_SPI_TransmitReceive(&hLCD->hspi1, PtCmd, PtCmdAns, Size, 0xFF);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b29a      	uxth	r2, r3
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	f002 fe82 	bl	8003f32 <HAL_SPI_TransmitReceive>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LCD_SD_SPIReceive>:
/*
 * Function:
 * 	An easy way to receive data through the SPI protocol from SD Reader.
 */
static void LCD_SD_SPIReceive(LCD_SD_Handle_it *hLCD, uint8_t *PtData,uint32_t Size)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
	HAL_SPI_Receive(&hLCD->hspi1, (uint8_t*)PtData, Size, 0xFF);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b29a      	uxth	r2, r3
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	f002 fd66 	bl	8003d20 <HAL_SPI_Receive>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <LCD_SD_SPIEmptyCycles>:
/*
 * Function:
 *   This is a simple empty cycles to make a delay between messages. Because it needs a delay between SPI messages.
 */
static void LCD_SD_SPIEmptyCycles(LCD_SD_Handle_it *hLCD)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]


	uint8_t Garbage[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <LCD_SD_SPIEmptyCycles+0x48>)
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t AnsGarbage[8];

	for(int i =0;i<2;i++)
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e00e      	b.n	8001296 <LCD_SD_SPIEmptyCycles+0x3a>
	{

		HAL_SPI_TransmitReceive(&hLCD->hspi1,(uint8_t*)Garbage,(uint8_t*)AnsGarbage, sizeof(Garbage), 0xFF);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	f107 0114 	add.w	r1, r7, #20
 8001286:	23ff      	movs	r3, #255	; 0xff
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2308      	movs	r3, #8
 800128c:	f002 fe51 	bl	8003f32 <HAL_SPI_TransmitReceive>
	for(int i =0;i<2;i++)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	dded      	ble.n	8001278 <LCD_SD_SPIEmptyCycles+0x1c>

	}


}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08004578 	.word	0x08004578

080012a8 <LCD_SD_SPIReceive_IT>:
/*
 * Function:
 *	In this case I recycled a HAL process of SPI protocol, and modify it, to write the pins in the screen.
 */
static HAL_StatusTypeDef LCD_SD_SPIReceive_IT(SPI_HandleTypeDef *hspi,void (*WrPins)(uint8_t,uint8_t),uint8_t *pTxData, uint8_t *pRxData, uint32_t Size, uint32_t Timeout)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  uint32_t             tickstart;

  //static uint8_t		StartFrstSector=0;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012b6:	2301      	movs	r3, #1
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <LCD_SD_SPIReceive_IT+0x26>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e16e      	b.n	80015ac <LCD_SD_SPIReceive_IT+0x304>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012d6:	f001 f909 	bl	80024ec <HAL_GetTick>
 80012da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80012f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00f      	beq.n	8001318 <LCD_SD_SPIReceive_IT+0x70>
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012fe:	d107      	bne.n	8001310 <LCD_SD_SPIReceive_IT+0x68>
		((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <LCD_SD_SPIReceive_IT+0x68>
 8001308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800130c:	2b04      	cmp	r3, #4
 800130e:	d003      	beq.n	8001318 <LCD_SD_SPIReceive_IT+0x70>
  {
	errorcode = HAL_BUSY;
 8001310:	2302      	movs	r3, #2
 8001312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	goto error;
 8001316:	e13f      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <LCD_SD_SPIReceive_IT+0x82>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <LCD_SD_SPIReceive_IT+0x82>
 8001324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <LCD_SD_SPIReceive_IT+0x8a>
  {
	errorcode = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	goto error;
 8001330:	e132      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b04      	cmp	r3, #4
 800133c:	d003      	beq.n	8001346 <LCD_SD_SPIReceive_IT+0x9e>
  {
	hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = NULL;//(uint8_t *)pTxData;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138e:	2b40      	cmp	r3, #64	; 0x40
 8001390:	d007      	beq.n	80013a2 <LCD_SD_SPIReceive_IT+0xfa>
  {
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013aa:	d178      	bne.n	800149e <LCD_SD_SPIReceive_IT+0x1f6>
  {
	if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <LCD_SD_SPIReceive_IT+0x112>
 80013b4:	8b7b      	ldrh	r3, [r7, #26]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d166      	bne.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	{
	  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60da      	str	r2, [r3, #12]
	  hspi->pTxBuffPtr += sizeof(uint16_t);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	1c9a      	adds	r2, r3, #2
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi->TxXferCount--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	86da      	strh	r2, [r3, #54]	; 0x36
	}
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013de:	e053      	b.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	{
	  /* Check TXE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d11b      	bne.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d016      	beq.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d113      	bne.n	8001426 <LCD_SD_SPIReceive_IT+0x17e>
	  {
		hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += sizeof(uint16_t);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	1c9a      	adds	r2, r3, #2
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
		hspi->TxXferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	86da      	strh	r2, [r3, #54]	; 0x36
		/* Next Data is a reception (Rx). Tx not allowed */
		txallowed = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c

	  }

	  /* Check RXNE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d119      	bne.n	8001468 <LCD_SD_SPIReceive_IT+0x1c0>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001438:	b29b      	uxth	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d014      	beq.n	8001468 <LCD_SD_SPIReceive_IT+0x1c0>
	  {
		*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	b292      	uxth	r2, r2
 800144a:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += sizeof(uint16_t);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	1c9a      	adds	r2, r3, #2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
		hspi->RxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	87da      	strh	r2, [r3, #62]	; 0x3e
		/* Next Data is a Transmission (Tx). Tx is allowed */
		txallowed = 1U;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }
	  if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001468:	f001 f840 	bl	80024ec <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001474:	429a      	cmp	r2, r3
 8001476:	d807      	bhi.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
 8001478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d003      	beq.n	8001488 <LCD_SD_SPIReceive_IT+0x1e0>
	  {
		errorcode = HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		goto error;
 8001486:	e087      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1a6      	bne.n	80013e0 <LCD_SD_SPIReceive_IT+0x138>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001496:	b29b      	uxth	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1a1      	bne.n	80013e0 <LCD_SD_SPIReceive_IT+0x138>
 800149c:	e06b      	b.n	8001576 <LCD_SD_SPIReceive_IT+0x2ce>
	}
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
	if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <LCD_SD_SPIReceive_IT+0x204>
 80014a6:	8b7b      	ldrh	r3, [r7, #26]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15a      	bne.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	{
	  *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	330c      	adds	r3, #12
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	701a      	strb	r2, [r3, #0]
	  hspi->pTxBuffPtr += 0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi->TxXferCount--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	86da      	strh	r2, [r3, #54]	; 0x36
	}
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014d0:	e047      	b.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	{
	  /* Check TXE flag */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d117      	bne.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d012      	beq.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10f      	bne.n	8001510 <LCD_SD_SPIReceive_IT+0x268>
	  {
		*(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	330c      	adds	r3, #12
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
		//hspi->pTxBuffPtr++;
		hspi->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	86da      	strh	r2, [r3, #54]	; 0x36
		/* Next Data is a reception (Rx). Tx not allowed */
		txallowed = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  }

	  /* Wait until RXNE flag is reset */
	  if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d121      	bne.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01c      	beq.n	8001562 <LCD_SD_SPIReceive_IT+0x2ba>
	  {
		(*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

		if(hspi->RxXferCount>2)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d907      	bls.n	8001550 <LCD_SD_SPIReceive_IT+0x2a8>
		{
			WrPins(((uint8_t)hspi->Instance->DR),Data);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2102      	movs	r1, #2
 800154c:	4610      	mov	r0, r2
 800154e:	4798      	blx	r3
		}


		hspi->RxXferCount--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	87da      	strh	r2, [r3, #62]	; 0x3e

		/* Next Data is a Transmission (Tx). Tx is allowed */
		txallowed = 1U;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001566:	b29b      	uxth	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1b2      	bne.n	80014d2 <LCD_SD_SPIReceive_IT+0x22a>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ad      	bne.n	80014d2 <LCD_SD_SPIReceive_IT+0x22a>
	}
  }


  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10b      	bne.n	8001596 <LCD_SD_SPIReceive_IT+0x2ee>
  {
	__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	e000      	b.n	8001598 <LCD_SD_SPIReceive_IT+0x2f0>
  }

error :
 8001596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3730      	adds	r7, #48	; 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_SPI_MspInit>:




void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
	  if(hspi->Instance==SPI1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a25      	ldr	r2, [pc, #148]	; (8001668 <HAL_SPI_MspInit+0xb4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d143      	bne.n	800165e <HAL_SPI_MspInit+0xaa>
	  {

	    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_SPI_MspInit+0xb8>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_SPI_MspInit+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]

	    GPIO_InitStruct.Pin = SPI_SD_SCK|SPI_SD_MISO|SPI_SD_MOSI;
 800162a:	23e0      	movs	r3, #224	; 0xe0
 800162c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163a:	2305      	movs	r3, #5
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(SPI_SD_GPIO, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <HAL_SPI_MspInit+0xbc>)
 8001646:	f001 fc61 	bl	8002f0c <HAL_GPIO_Init>


	    GPIO_InitStruct.Pin = SPI_SD_SS;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(SPI_SD_GPIO_SS, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_SPI_MspInit+0xc0>)
 800165a:	f001 fc57 	bl	8002f0c <HAL_GPIO_Init>


	  }
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013000 	.word	0x40013000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400

08001678 <LCD_SD_Init>:
/*
 * Function:
 * 	Combination of previous function to Init the SD card
 */
void LCD_SD_Init(LCD_SD_Handle_it *hLCD)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	LCD_SD_SPISoftInit(hLCD);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff f9d5 	bl	8000a30 <LCD_SD_SPISoftInit>
	LCD_SD_SPIHwInit(&hLCD->hspi1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa17 	bl	8000ac0 <LCD_SD_SPIHwInit>
	HAL_GPIO_WritePin(SPI_SD_GPIO_SS, SPI_SD_SS, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <LCD_SD_Init+0x2c>)
 8001698:	f001 fdca 	bl	8003230 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020400 	.word	0x40020400

080016a8 <LCD_SD_Mount>:
/*
 * Function:
 * 	Combination of previous function to mount the SD card on the ucontroller.
 */
uint8_t LCD_SD_Mount(LCD_SD_Handle_it *hLCD)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	LCD_SD_Init(hLCD);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffe1 	bl	8001678 <LCD_SD_Init>
	LCD_SD_Mounting(hLCD);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fbe6 	bl	8000e88 <LCD_SD_Mounting>
	LCD_SD_FindPartitionTable(hLCD);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fd5d 	bl	800117c <LCD_SD_FindPartitionTable>
	LCD_SD_FindFilesDirectory(hLCD);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fcb2 	bl	800102c <LCD_SD_FindFilesDirectory>



	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LCD_SD_Begin>:
/*
 * Function:
 * 	UNUSED.
 */
void LCD_SD_Begin(LCD_SD_Handle_it *hLCD)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LCD_SD_FileOpen>:
/*
 * Function:
 * 	Here we can search for the file in the SD card.
 */
uint8_t LCD_SD_FileOpen(LCD_SD_Handle_it *hLCD,char FileName[])
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f000 ff07 	bl	8002504 <HAL_Delay>
	if(LCD_SD_FindFile(hLCD,FileName,strlen(FileName))&1)
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f7fe fd84 	bl	8000204 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fa8a 	bl	8000c1c <LCD_SD_FindFile>
 8001708:	4603      	mov	r3, r0
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <LCD_SD_FileOpen+0x44>
	{

		//LCD_SD_ReadHeaderFile(hLCD);
		LCD_SD_ReadFileData(hLCD,hLCD->SDhandle.FileSector,hLCD->SDhandle.FileSize);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800171e:	461a      	mov	r2, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f9d9 	bl	8000ad8 <LCD_SD_ReadFileData>

		return 1;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LCD_SD_FileOpen+0x46>
	}else
	{
		return 0;
 800172a:	2300      	movs	r3, #0
	}

}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <LCD_SD_READSector>:
 * 	This function search the sector 0 and after that try to find the partition table. When it find it, look
 * 	in the file's directory.
 */

void LCD_SD_READSector(LCD_SD_Handle_it *hLCD,uint32_t SectorNumber)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
		uint32_t SectorAddress= SectorNumber*hLCD->SDhandle.BytesPerSector;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8001744:	461a      	mov	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]
		uint8_t CMD17[]={SD_CMD17,(uint8_t)(SectorAddress>>24),(uint8_t)(SectorAddress>>16),(uint8_t)(SectorAddress>>8),(uint8_t)SectorAddress,SD_CRC_NO,0x00,0x00};//Buscamos la dirección 0 del SD
 800174e:	2351      	movs	r3, #81	; 0x51
 8001750:	753b      	strb	r3, [r7, #20]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	0e1b      	lsrs	r3, r3, #24
 8001756:	b2db      	uxtb	r3, r3
 8001758:	757b      	strb	r3, [r7, #21]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	b2db      	uxtb	r3, r3
 8001760:	75bb      	strb	r3, [r7, #22]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b2db      	uxtb	r3, r3
 8001768:	75fb      	strb	r3, [r7, #23]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	763b      	strb	r3, [r7, #24]
 8001770:	2301      	movs	r3, #1
 8001772:	767b      	strb	r3, [r7, #25]
 8001774:	2300      	movs	r3, #0
 8001776:	76bb      	strb	r3, [r7, #26]
 8001778:	2300      	movs	r3, #0
 800177a:	76fb      	strb	r3, [r7, #27]
		uint8_t ReceiveAns[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
		memset(hLCD->SDhandle.ReceiveBytesSector,0,sizeof(hLCD->SDhandle.ReceiveBytesSector));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f240 2202 	movw	r2, #514	; 0x202
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 feb1 	bl	80044f6 <memset>


		LCD_SD_SPIEmptyCycles(hLCD);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fd61 	bl	800125c <LCD_SD_SPIEmptyCycles>

		LCD_SD_SPISend(hLCD,(uint8_t*)CMD17,(uint8_t*)ReceiveAns, sizeof(CMD17));
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	f107 0114 	add.w	r1, r7, #20
 80017a2:	2308      	movs	r3, #8
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fd2f 	bl	8001208 <LCD_SD_SPISend>

		while(ReceiveAns[0] != 0xFE)
 80017aa:	e006      	b.n	80017ba <LCD_SD_READSector+0x86>
		{
			LCD_SD_SPIReceive(hLCD,(uint8_t*)ReceiveAns, 1);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fd3e 	bl	8001236 <LCD_SD_SPIReceive>
		while(ReceiveAns[0] != 0xFE)
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	2bfe      	cmp	r3, #254	; 0xfe
 80017be:	d1f5      	bne.n	80017ac <LCD_SD_READSector+0x78>

		}

		LCD_SD_SPIReceive(hLCD, (uint8_t*)hLCD->SDhandle.ReceiveBytesSector, sizeof(hLCD->SDhandle.ReceiveBytesSector));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f240 2202 	movw	r2, #514	; 0x202
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fd34 	bl	8001236 <LCD_SD_SPIReceive>



}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <LCD_Touch_Painting>:
 *  Here you can use to paint the screen while it is being touched.
 *  This is for drawing the screen using the pencil or the fingers.
 */

static uint8_t LCD_Touch_Painting(LCD_Touchscreen_it *hLCD)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	uint32_t CoordX,CoordY;//,ScreenCoordX,ScreenCoordY;

	CoordX= LCD_Touch_ReadX(hLCD);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fb94 	bl	8001f0c <LCD_Touch_ReadX>
 80017e4:	60f8      	str	r0, [r7, #12]
	CoordY= LCD_Touch_ReadY(hLCD);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fbe4 	bl	8001fb4 <LCD_Touch_ReadY>
 80017ec:	60b8      	str	r0, [r7, #8]
	if((CoordX>=100)&&(CoordY>=100))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b63      	cmp	r3, #99	; 0x63
 80017f2:	d904      	bls.n	80017fe <LCD_Touch_Painting+0x28>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b63      	cmp	r3, #99	; 0x63
 80017f8:	d901      	bls.n	80017fe <LCD_Touch_Painting+0x28>
	{

		return ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LCD_Touch_Painting+0x2a>
	}else
	{
		return DISABLE;
 80017fe:	2300      	movs	r3, #0
	}



}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <LCD_Touch_ADCSwConfig>:
/*
 * Function:
 *	ADC hardware configuration
 */
static void LCD_Touch_ADCSwConfig(LCD_Touchscreen_it *hLCD)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	hLCD->hadc1.Instance = ADC1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a26      	ldr	r2, [pc, #152]	; (80018ac <LCD_Touch_ADCSwConfig+0xa4>)
 8001814:	615a      	str	r2, [r3, #20]
	hLCD->hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800181c:	619a      	str	r2, [r3, #24]
	hLCD->hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001824:	61da      	str	r2, [r3, #28]
	hLCD->hadc1.Init.ScanConvMode = DISABLE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
	hLCD->hadc1.Init.ContinuousConvMode = DISABLE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hLCD->hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hLCD->hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
	hLCD->hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <LCD_Touch_ADCSwConfig+0xa8>)
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
	hLCD->hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
	hLCD->hadc1.Init.NbrOfConversion = 1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
	hLCD->hadc1.Init.DMAContinuousRequests = DISABLE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	hLCD->hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hLCD->hadc1) != HAL_OK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3314      	adds	r3, #20
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fe6e 	bl	8002548 <HAL_ADC_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <LCD_Touch_ADCSwConfig+0x6e>
	{
	Error_Handler();
 8001872:	f000 fd37 	bl	80022e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	hLCD->sConfig.Channel = ADC_CHANNEL_4;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2204      	movs	r2, #4
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
	hLCD->sConfig.Rank = 1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	661a      	str	r2, [r3, #96]	; 0x60
	hLCD->sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_ADC_ConfigChannel(&hLCD->hadc1, & hLCD->sConfig) != HAL_OK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f103 0214 	add.w	r2, r3, #20
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	335c      	adds	r3, #92	; 0x5c
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f001 f825 	bl	80028e4 <HAL_ADC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <LCD_Touch_ADCSwConfig+0x9c>
	{
	Error_Handler();
 80018a0:	f000 fd20 	bl	80022e4 <Error_Handler>
	}
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40012000 	.word	0x40012000
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <LCD_Touch_PinsOff>:
 * Function:
 *	This is to turn the LCD screen pins normal, because the SCREEN and TOUCHSCREEN share pins. So if you wan
 *	to use touchscreen and Screen, you must change pins configurations between them.
 */
static void LCD_Touch_PinsOff(LCD_Touchscreen_it *hLCD)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]


	hLCD->hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
	hLCD->hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	605a      	str	r2, [r3, #4]
	hLCD->hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	60da      	str	r2, [r3, #12]

	hLCD->hLCD_GPIOx.Pin = RS_Pin_No;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2210      	movs	r2, #16
 80018d2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(RS_GPIOx, &hLCD->hLCD_GPIOx);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4814      	ldr	r0, [pc, #80]	; (800192c <LCD_Touch_PinsOff+0x78>)
 80018da:	f001 fb17 	bl	8002f0c <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = D0_Pin_No;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(D0_GPIOx, &hLCD->hLCD_GPIOx);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4810      	ldr	r0, [pc, #64]	; (800192c <LCD_Touch_PinsOff+0x78>)
 80018ec:	f001 fb0e 	bl	8002f0c <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = CS_Pin_No;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(CS_GPIOx, &hLCD->hLCD_GPIOx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <LCD_Touch_PinsOff+0x7c>)
 80018fc:	f001 fb06 	bl	8002f0c <HAL_GPIO_Init>

	hLCD->hLCD_GPIOx.Pin = D1_Pin_No;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(D1_GPIOx, &hLCD->hLCD_GPIOx);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4619      	mov	r1, r3
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <LCD_Touch_PinsOff+0x80>)
 800190c:	f001 fafe 	bl	8002f0c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2101      	movs	r1, #1
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <LCD_Touch_PinsOff+0x7c>)
 8001916:	f001 fc8b 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2110      	movs	r1, #16
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <LCD_Touch_PinsOff+0x78>)
 8001920:	f001 fc86 	bl	8003230 <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800

08001938 <LCD_Touch_PinsConf>:
/*
 * Function:
 *
 */
static void LCD_Touch_PinsConf(LCD_Touchscreen_it hLCD,uint8_t XoY)
{
 8001938:	b084      	sub	sp, #16
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
 800193e:	f107 0c08 	add.w	ip, r7, #8
 8001942:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(RST_GPIOx, RST_Pin_No, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2102      	movs	r1, #2
 800194a:	4841      	ldr	r0, [pc, #260]	; (8001a50 <LCD_Touch_PinsConf+0x118>)
 800194c:	f001 fc70 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RD_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2101      	movs	r1, #1
 8001954:	483f      	ldr	r0, [pc, #252]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001956:	f001 fc6b 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WR_GPIOx, RD_Pin_No, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	2101      	movs	r1, #1
 800195e:	483d      	ldr	r0, [pc, #244]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001960:	f001 fc66 	bl	8003230 <HAL_GPIO_WritePin>

	if(XoY==CoorX)
 8001964:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8001968:	2b01      	cmp	r3, #1
 800196a:	d133      	bne.n	80019d4 <LCD_Touch_PinsConf+0x9c>
	{

		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_ANALOG;
 8001970:	2303      	movs	r3, #3
 8001972:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 8001974:	2302      	movs	r3, #2
 8001976:	617b      	str	r3, [r7, #20]

		hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 8001978:	2310      	movs	r3, #16
 800197a:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 800197c:	f107 0108 	add.w	r1, r7, #8
 8001980:	4834      	ldr	r0, [pc, #208]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001982:	f001 fac3 	bl	8002f0c <HAL_GPIO_Init>


		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 800198a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198e:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 8001990:	f107 0108 	add.w	r1, r7, #8
 8001994:	482f      	ldr	r0, [pc, #188]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001996:	f001 fab9 	bl	8002f0c <HAL_GPIO_Init>


		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 800199a:	2302      	movs	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]



		hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 80019a6:	f107 0108 	add.w	r1, r7, #8
 80019aa:	482b      	ldr	r0, [pc, #172]	; (8001a58 <LCD_Touch_PinsConf+0x120>)
 80019ac:	f001 faae 	bl	8002f0c <HAL_GPIO_Init>

		hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <LCD_Touch_PinsConf+0x118>)
 80019ba:	f001 faa7 	bl	8002f0c <HAL_GPIO_Init>

		HAL_GPIO_WritePin(D1_GPIOx, D1_Pin_No, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	4823      	ldr	r0, [pc, #140]	; (8001a50 <LCD_Touch_PinsConf+0x118>)
 80019c4:	f001 fc34 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_GPIOx, CS_Pin_No, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2101      	movs	r1, #1
 80019cc:	4822      	ldr	r0, [pc, #136]	; (8001a58 <LCD_Touch_PinsConf+0x120>)
 80019ce:	f001 fc2f 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, GPIO_PIN_SET);

	}

}
 80019d2:	e037      	b.n	8001a44 <LCD_Touch_PinsConf+0x10c>
	}else if(XoY==CoorY)
 80019d4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d133      	bne.n	8001a44 <LCD_Touch_PinsConf+0x10c>
		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 80019dc:	2302      	movs	r3, #2
 80019de:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_ANALOG;
 80019e0:	2303      	movs	r3, #3
 80019e2:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Speed= GPIO_SPEED_FAST;
 80019e4:	2302      	movs	r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
		hLCD.hLCD_GPIOx.Pin = CS_Pin_No;
 80019e8:	2301      	movs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(CS_GPIOx, &hLCD.hLCD_GPIOx);
 80019ec:	f107 0108 	add.w	r1, r7, #8
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <LCD_Touch_PinsConf+0x120>)
 80019f2:	f001 fa8b 	bl	8002f0c <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D1_Pin_No;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D1_GPIOx, &hLCD.hLCD_GPIOx);
 80019fe:	f107 0108 	add.w	r1, r7, #8
 8001a02:	4813      	ldr	r0, [pc, #76]	; (8001a50 <LCD_Touch_PinsConf+0x118>)
 8001a04:	f001 fa82 	bl	8002f0c <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Pull = GPIO_PULLDOWN;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
		hLCD.hLCD_GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
		hLCD.hLCD_GPIOx.Pin = D0_Pin_No;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(D0_GPIOx, &hLCD.hLCD_GPIOx);
 8001a16:	f107 0108 	add.w	r1, r7, #8
 8001a1a:	480e      	ldr	r0, [pc, #56]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001a1c:	f001 fa76 	bl	8002f0c <HAL_GPIO_Init>
		hLCD.hLCD_GPIOx.Pin = RS_Pin_No;
 8001a20:	2310      	movs	r3, #16
 8001a22:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(RS_GPIOx, &hLCD.hLCD_GPIOx);
 8001a24:	f107 0108 	add.w	r1, r7, #8
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001a2a:	f001 fa6f 	bl	8002f0c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(RS_GPIOx, RS_Pin_No, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2110      	movs	r1, #16
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001a34:	f001 fbfc 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D0_GPIOx, D0_Pin_No, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <LCD_Touch_PinsConf+0x11c>)
 8001a40:	f001 fbf6 	bl	8003230 <HAL_GPIO_WritePin>
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a4c:	b004      	add	sp, #16
 8001a4e:	4770      	bx	lr
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400

08001a5c <HAL_ADC_MspInit>:
/*
 * Function:
 *
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc1)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
		if(hadc1->Instance==ADC1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_ADC_MspInit+0xb0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d141      	bne.n	8001b02 <HAL_ADC_MspInit+0xa6>
		{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_ADC_MspInit+0xb4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
		/**ADC1 GPIO Configuration
		PA4     ------> ADC1_IN4
		PB0     ------> ADC1_IN8
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <HAL_ADC_MspInit+0xb8>)
 8001ae6:	f001 fa11 	bl	8002f0c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aea:	2301      	movs	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4806      	ldr	r0, [pc, #24]	; (8001b18 <HAL_ADC_MspInit+0xbc>)
 8001afe:	f001 fa05 	bl	8002f0c <HAL_GPIO_Init>

		}
}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400

08001b1c <LCD_Touch_Calibration>:
 *  This process is to calibrate the touchscreen. Here I put 3 points in different places and take the ADC value
 *  with this I create an Matrix of value, and using Krammer to resolve the equation system I take the ratios
 *  for the calibration.
 */
void LCD_Touch_Calibration(LCD_Touchscreen_it *hLCD)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	float K;
	LCD_Touch_PinsOff(hLCD);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fec5 	bl	80018b4 <LCD_Touch_PinsOff>


	//1-Draw the first point and wait
	LCD_SCREEN_Coordenates(Calib_X0-5, Calib_Y0-5, Calib_X0+5, Calib_Y0+5);
 8001b2a:	2345      	movs	r3, #69	; 0x45
 8001b2c:	2237      	movs	r2, #55	; 0x37
 8001b2e:	213b      	movs	r1, #59	; 0x3b
 8001b30:	202d      	movs	r0, #45	; 0x2d
 8001b32:	f7fe ff0d 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001b36:	f7fe ff5e 	bl	80009f6 <LCD_SCREEN_PaintColor>

	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001b3a:	bf00      	nop
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fe4a 	bl	80017d6 <LCD_Touch_Painting>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f9      	beq.n	8001b3c <LCD_Touch_Calibration+0x20>

	while(LCD_Touch_Painting(hLCD))
 8001b48:	e012      	b.n	8001b70 <LCD_Touch_Calibration+0x54>
	{

		hLCD->ADC_X0 = LCD_Touch_ReadX(hLCD);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f9de 	bl	8001f0c <LCD_Touch_ReadX>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		hLCD->ADC_Y0 = LCD_Touch_ReadY(hLCD);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fa2a 	bl	8001fb4 <LCD_Touch_ReadY>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		HAL_Delay(100);
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	f000 fcca 	bl	8002504 <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fe30 	bl	80017d6 <LCD_Touch_Painting>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e6      	bne.n	8001b4a <LCD_Touch_Calibration+0x2e>

	}


	//2-Draw the second point and wait
	LCD_SCREEN_Coordenates(Calib_X1-5, Calib_Y1-5, Calib_X1+5, Calib_Y1+5);
 8001b7c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001b80:	22f5      	movs	r2, #245	; 0xf5
 8001b82:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001b86:	20eb      	movs	r0, #235	; 0xeb
 8001b88:	f7fe fee2 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001b8c:	f7fe ff33 	bl	80009f6 <LCD_SCREEN_PaintColor>

	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001b90:	bf00      	nop
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fe1f 	bl	80017d6 <LCD_Touch_Painting>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f9      	beq.n	8001b92 <LCD_Touch_Calibration+0x76>
	while(LCD_Touch_Painting(hLCD))
 8001b9e:	e013      	b.n	8001bc8 <LCD_Touch_Calibration+0xac>
	{
		hLCD->ADC_X1 = LCD_Touch_ReadX(hLCD);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f9b3 	bl	8001f0c <LCD_Touch_ReadX>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		hLCD->ADC_Y1 = LCD_Touch_ReadY(hLCD);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f9ff 	bl	8001fb4 <LCD_Touch_ReadY>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		HAL_Delay(500);
 8001bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc4:	f000 fc9e 	bl	8002504 <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fe04 	bl	80017d6 <LCD_Touch_Painting>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e5      	bne.n	8001ba0 <LCD_Touch_Calibration+0x84>

	}

	//3-Draw the third point and wait
	LCD_SCREEN_Coordenates(Calib_X2-5, Calib_Y2-5, Calib_X2+5, Calib_Y2+5);
 8001bd4:	2384      	movs	r3, #132	; 0x84
 8001bd6:	f240 1285 	movw	r2, #389	; 0x185
 8001bda:	217a      	movs	r1, #122	; 0x7a
 8001bdc:	f240 107b 	movw	r0, #379	; 0x17b
 8001be0:	f7fe feb6 	bl	8000950 <LCD_SCREEN_Coordenates>
	LCD_SCREEN_PaintColor();
 8001be4:	f7fe ff07 	bl	80009f6 <LCD_SCREEN_PaintColor>
	while(!LCD_Touch_Painting(hLCD));	//Esperamos que guarde que se pulse la pantalla.
 8001be8:	bf00      	nop
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fdf3 	bl	80017d6 <LCD_Touch_Painting>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f9      	beq.n	8001bea <LCD_Touch_Calibration+0xce>
	while(LCD_Touch_Painting(hLCD))
 8001bf6:	e013      	b.n	8001c20 <LCD_Touch_Calibration+0x104>
	{
		hLCD->ADC_X2 = LCD_Touch_ReadX(hLCD);//
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f987 	bl	8001f0c <LCD_Touch_ReadX>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		hLCD->ADC_Y2 = LCD_Touch_ReadY(hLCD);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f9d3 	bl	8001fb4 <LCD_Touch_ReadY>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		HAL_Delay(500);
 8001c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c1c:	f000 fc72 	bl	8002504 <HAL_Delay>
	while(LCD_Touch_Painting(hLCD))
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fdd8 	bl	80017d6 <LCD_Touch_Painting>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e5      	bne.n	8001bf8 <LCD_Touch_Calibration+0xdc>
	}
	HAL_Delay(500);
 8001c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c30:	f000 fc68 	bl	8002504 <HAL_Delay>



	//Solve the equation.
	K=((hLCD->ADC_X0-hLCD->ADC_X2)*(hLCD->ADC_Y1-hLCD->ADC_Y2))-((hLCD->ADC_X1-hLCD->ADC_X2)*(hLCD->ADC_Y0-hLCD->ADC_Y2));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f8b2 208e 	ldrh.w	r2, [r2, #142]	; 0x8e
 8001c52:	1a8a      	subs	r2, r1, r2
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001c5e:	4619      	mov	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001c66:	1acb      	subs	r3, r1, r3
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	f8b1 108a 	ldrh.w	r1, [r1, #138]	; 0x8a
 8001c6e:	4608      	mov	r0, r1
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	f8b1 108e 	ldrh.w	r1, [r1, #142]	; 0x8e
 8001c76:	1a41      	subs	r1, r0, r1
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c86:	edc7 7a03 	vstr	s15, [r7, #12]

	hLCD->A =((hLCD->ADC_Y0*(Calib_X2-Calib_X1))+(hLCD->ADC_Y1*(Calib_X0-Calib_X2))+(hLCD->ADC_Y2*(Calib_X1-Calib_X0)))/K;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001c90:	461a      	mov	r2, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <LCD_Touch_Calibration+0x3cc>)
 8001ca6:	fb03 f301 	mul.w	r3, r3, r1
 8001caa:	441a      	add	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	23be      	movs	r3, #190	; 0xbe
 8001cb6:	fb03 f301 	mul.w	r3, r3, r1
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	hLCD->B = ((hLCD->ADC_X0*(Calib_X1-Calib_X2))+(hLCD->ADC_X1*(Calib_X2-Calib_X0))+(hLCD->ADC_X2*(Calib_X0-Calib_X1)))/K;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8001cee:	fb03 f301 	mul.w	r3, r3, r1
 8001cf2:	441a      	add	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f06f 03bd 	mvn.w	r3, #189	; 0xbd
 8001d00:	fb03 f301 	mul.w	r3, r3, r1
 8001d04:	4413      	add	r3, r2
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	hLCD->C = ((hLCD->ADC_Y1*((hLCD->ADC_X0*Calib_X2)-(hLCD->ADC_X2*Calib_X0)))+(hLCD->ADC_Y2*((hLCD->ADC_X1*Calib_X0)-(hLCD->ADC_X0*Calib_X1)))+(hLCD->ADC_Y0*((hLCD->ADC_X2*Calib_X1)-(hLCD->ADC_X1*Calib_X2))))/K;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001d22:	4619      	mov	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001d42:	fb03 f300 	mul.w	r3, r3, r0
 8001d46:	4413      	add	r3, r2
 8001d48:	fb03 f201 	mul.w	r2, r3, r1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8001d52:	461c      	mov	r4, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2332      	movs	r3, #50	; 0x32
 8001d5e:	fb03 f101 	mul.w	r1, r3, r1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	0100      	lsls	r0, r0, #4
 8001d6e:	1a1b      	subs	r3, r3, r0
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	440b      	add	r3, r1
 8001d74:	fb03 f304 	mul.w	r3, r3, r4
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001d80:	4618      	mov	r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001d88:	4619      	mov	r1, r3
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a5b      	subs	r3, r3, r1
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	461c      	mov	r4, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	0089      	lsls	r1, r1, #2
 8001da0:	1a5b      	subs	r3, r3, r1
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	4423      	add	r3, r4
 8001da6:	fb03 f300 	mul.w	r3, r3, r0
 8001daa:	4413      	add	r3, r2
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001db4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	hLCD->D = ((hLCD->ADC_Y0*(Calib_Y2-Calib_Y1))+(hLCD->ADC_Y1*(Calib_Y0-Calib_Y2))+(hLCD->ADC_Y2*(Calib_Y1-Calib_Y0)))/K;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f06f 03b9 	mvn.w	r3, #185	; 0xb9
 8001dce:	fb03 f202 	mul.w	r2, r3, r2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	18d1      	adds	r1, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8001de6:	461a      	mov	r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	015b      	lsls	r3, r3, #5
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	hLCD->E = ((hLCD->ADC_X0*(Calib_Y1-Calib_Y2))+(hLCD->ADC_X1*(Calib_Y2-Calib_Y0))+(hLCD->ADC_X2*(Calib_Y0-Calib_Y1)))/K;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001e10:	461a      	mov	r2, r3
 8001e12:	23ba      	movs	r3, #186	; 0xba
 8001e14:	fb03 f202 	mul.w	r2, r3, r2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001e1e:	4619      	mov	r1, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	1a5b      	subs	r3, r3, r1
 8001e26:	441a      	add	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f06f 03f8 	mvn.w	r3, #248	; 0xf8
 8001e34:	fb03 f301 	mul.w	r3, r3, r1
 8001e38:	4413      	add	r3, r2
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e42:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	hLCD->F = ((hLCD->ADC_Y0*((Calib_Y1*hLCD->ADC_X2)-(hLCD->ADC_X1*Calib_Y2)))+(hLCD->ADC_Y1*((hLCD->ADC_X0*Calib_Y2)-(hLCD->ADC_X2*Calib_Y0)))+(hLCD->ADC_Y2*((hLCD->ADC_X1*Calib_Y0)-(Calib_Y1*hLCD->ADC_X0))))/K;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001e56:	4619      	mov	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f240 1339 	movw	r3, #313	; 0x139
 8001e64:	fb03 f202 	mul.w	r2, r3, r2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001e6e:	4618      	mov	r0, r3
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	1ac3      	subs	r3, r0, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	fb03 f201 	mul.w	r2, r3, r1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001e80:	4618      	mov	r0, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001e88:	4619      	mov	r1, r3
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	01db      	lsls	r3, r3, #7
 8001e8e:	1a59      	subs	r1, r3, r1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	fb03 f300 	mul.w	r3, r3, r0
 8001e9e:	441a      	add	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001eae:	0199      	lsls	r1, r3, #6
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	f46f 739c 	mvn.w	r3, #312	; 0x138
 8001ebc:	fb03 f304 	mul.w	r3, r3, r4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	fb03 f300 	mul.w	r3, r3, r0
 8001ec6:	4413      	add	r3, r2
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ed0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80


}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	fffffeb2 	.word	0xfffffeb2

08001eec <LCD_Touch_ADCInit>:
/*
 * Function:
 *  Activation of ADC for the analogic read.
 */
void LCD_Touch_ADCInit(LCD_Touchscreen_it *hLCD)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	LCD_Touch_ADCSwConfig(hLCD);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fc87 	bl	8001808 <LCD_Touch_ADCSwConfig>
	HAL_ADC_MspInit(&hLCD->hadc1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3314      	adds	r3, #20
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fdac 	bl	8001a5c <HAL_ADC_MspInit>

}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <LCD_Touch_ReadX>:
/*
 * Function:
 *	Read the analogical resistance of the X coordinate
 */
uint32_t LCD_Touch_ReadX(LCD_Touchscreen_it *hLCD)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b0a7      	sub	sp, #156	; 0x9c
 8001f10:	af22      	add	r7, sp, #136	; 0x88
 8001f12:	6078      	str	r0, [r7, #4]
	uint32_t ReadValue=0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
	LCD_Touch_PinsConf(*hLCD,CoorX);
 8001f18:	687c      	ldr	r4, [r7, #4]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9320      	str	r3, [sp, #128]	; 0x80
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f104 0310 	add.w	r3, r4, #16
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	4619      	mov	r1, r3
 8001f28:	f002 fada 	bl	80044e0 <memcpy>
 8001f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f30:	f7ff fd02 	bl	8001938 <LCD_Touch_PinsConf>
	hLCD->sConfig.Channel = ADC_CHANNEL_4;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2204      	movs	r2, #4
 8001f38:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_ADC_ConfigChannel(&hLCD->hadc1, & hLCD->sConfig);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0214 	add.w	r2, r3, #20
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	335c      	adds	r3, #92	; 0x5c
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fccc 	bl	80028e4 <HAL_ADC_ConfigChannel>


	for(int i=0;i<20;i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	e01c      	b.n	8001f8c <LCD_Touch_ReadX+0x80>
	{
		HAL_ADC_Start(&hLCD->hadc1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3314      	adds	r3, #20
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fb3a 	bl	80025d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hLCD->hadc1, 1000);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3314      	adds	r3, #20
 8001f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fc2c 	bl	80027c2 <HAL_ADC_PollForConversion>
		ReadValue += HAL_ADC_GetValue(&hLCD->hadc1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fcab 	bl	80028ca <HAL_ADC_GetValue>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hLCD->hadc1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3314      	adds	r3, #20
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fbeb 	bl	800275c <HAL_ADC_Stop>
	for(int i=0;i<20;i++)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b13      	cmp	r3, #19
 8001f90:	dddf      	ble.n	8001f52 <LCD_Touch_ReadX+0x46>

	}

	LCD_Touch_PinsOff(hLCD);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fc8e 	bl	80018b4 <LCD_Touch_PinsOff>

	ReadValue /=20;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <LCD_Touch_ReadX+0xa4>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]

	return ReadValue;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	cccccccd 	.word	0xcccccccd

08001fb4 <LCD_Touch_ReadY>:
/*
 * Function:
 *	Read the analogical resistance of the Y coordinate
 */
uint32_t LCD_Touch_ReadY(LCD_Touchscreen_it *hLCD)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b0a7      	sub	sp, #156	; 0x9c
 8001fb8:	af22      	add	r7, sp, #136	; 0x88
 8001fba:	6078      	str	r0, [r7, #4]
	uint32_t ReadValue=0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
	LCD_Touch_PinsConf(*hLCD,CoorY);
 8001fc0:	687c      	ldr	r4, [r7, #4]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	9320      	str	r3, [sp, #128]	; 0x80
 8001fc6:	4668      	mov	r0, sp
 8001fc8:	f104 0310 	add.w	r3, r4, #16
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f002 fa86 	bl	80044e0 <memcpy>
 8001fd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fd8:	f7ff fcae 	bl	8001938 <LCD_Touch_PinsConf>
	hLCD->sConfig.Channel = ADC_CHANNEL_8;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_ADC_ConfigChannel(&hLCD->hadc1, & hLCD->sConfig);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f103 0214 	add.w	r2, r3, #20
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	335c      	adds	r3, #92	; 0x5c
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 fc78 	bl	80028e4 <HAL_ADC_ConfigChannel>


	for(int i=0;i<20;i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	e01c      	b.n	8002034 <LCD_Touch_ReadY+0x80>
	{
		HAL_ADC_Start(&hLCD->hadc1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3314      	adds	r3, #20
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fae6 	bl	80025d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hLCD->hadc1, 1000);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3314      	adds	r3, #20
 8002008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fbd8 	bl	80027c2 <HAL_ADC_PollForConversion>
		ReadValue += HAL_ADC_GetValue(&hLCD->hadc1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3314      	adds	r3, #20
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fc57 	bl	80028ca <HAL_ADC_GetValue>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hLCD->hadc1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3314      	adds	r3, #20
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fb97 	bl	800275c <HAL_ADC_Stop>
	for(int i=0;i<20;i++)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b13      	cmp	r3, #19
 8002038:	dddf      	ble.n	8001ffa <LCD_Touch_ReadY+0x46>
	}


	LCD_Touch_PinsOff(hLCD);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fc3a 	bl	80018b4 <LCD_Touch_PinsOff>

	ReadValue /=20;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <LCD_Touch_ReadY+0xa4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]

	return ReadValue;
 800204c:	68fb      	ldr	r3, [r7, #12]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	cccccccd 	.word	0xcccccccd

0800205c <LCD_Touch_CoorX>:
/*
 * Function:
 *	Return the Coordinate X of the screen.
 */
uint32_t LCD_Touch_CoorX(LCD_Touchscreen_it *hLCD)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	uint32_t CoordenadaX,LecturaX,LecturaY;
	LecturaX = LCD_Touch_ReadX(hLCD);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff51 	bl	8001f0c <LCD_Touch_ReadX>
 800206a:	6178      	str	r0, [r7, #20]
	LecturaY = LCD_Touch_ReadY(hLCD);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffa1 	bl	8001fb4 <LCD_Touch_ReadY>
 8002072:	6138      	str	r0, [r7, #16]


	CoordenadaX = (hLCD->A)*LecturaX+(hLCD->B)*LecturaY+hLCD->C;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	60fb      	str	r3, [r7, #12]
	return CoordenadaX;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t Valor=0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	807b      	strh	r3, [r7, #2]
	int8_t i=0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
	uint16_t Almacen=0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	80bb      	strh	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d2:	f000 f9a5 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d6:	f000 f861 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020da:	f000 f8cd 	bl	8002278 <MX_GPIO_Init>
//  MX_ADC1_Init();
  //MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  LCD_SCREEN_Init(hlcd);
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <main+0xcc>)
 80020e0:	466c      	mov	r4, sp
 80020e2:	f103 0210 	add.w	r2, r3, #16
 80020e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80020ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f0:	f7fe fb66 	bl	80007c0 <LCD_SCREEN_Init>


  LCD_Touch_ADCInit(&htch);
 80020f4:	4826      	ldr	r0, [pc, #152]	; (8002190 <main+0xd0>)
 80020f6:	f7ff fef9 	bl	8001eec <LCD_Touch_ADCInit>
  LCD_Touch_Calibration(&htch);
 80020fa:	4825      	ldr	r0, [pc, #148]	; (8002190 <main+0xd0>)
 80020fc:	f7ff fd0e 	bl	8001b1c <LCD_Touch_Calibration>


  LCD_SCREEN_Coordenates(0, 0, MaxWidth, MaxHigh);
 8002100:	f240 133f 	movw	r3, #319	; 0x13f
 8002104:	f240 12df 	movw	r2, #479	; 0x1df
 8002108:	2100      	movs	r1, #0
 800210a:	2000      	movs	r0, #0
 800210c:	f7fe fc20 	bl	8000950 <LCD_SCREEN_Coordenates>





	LCD_SD_Mount(&hsd);
 8002110:	4820      	ldr	r0, [pc, #128]	; (8002194 <main+0xd4>)
 8002112:	f7ff fac9 	bl	80016a8 <LCD_SD_Mount>
	LCD_SD_Begin(&hsd);
 8002116:	481f      	ldr	r0, [pc, #124]	; (8002194 <main+0xd4>)
 8002118:	f7ff fadb 	bl	80016d2 <LCD_SD_Begin>
	Valor=sizeof(FileSD)/sizeof(FileSD[0]);
 800211c:	2303      	movs	r3, #3
 800211e:	807b      	strh	r3, [r7, #2]


	while(1)
	{

		Almacen = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	80bb      	strh	r3, [r7, #4]
		LCD_SD_FileOpen(&hsd, FileSD[i]);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <main+0xd8>)
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	4619      	mov	r1, r3
 8002130:	4818      	ldr	r0, [pc, #96]	; (8002194 <main+0xd4>)
 8002132:	f7ff fad8 	bl	80016e6 <LCD_SD_FileOpen>
		while(Almacen<6)
 8002136:	e004      	b.n	8002142 <main+0x82>
		{
			Almacen=LCD_Touch_CoorX(&htch);
 8002138:	4815      	ldr	r0, [pc, #84]	; (8002190 <main+0xd0>)
 800213a:	f7ff ff8f 	bl	800205c <LCD_Touch_CoorX>
 800213e:	4603      	mov	r3, r0
 8002140:	80bb      	strh	r3, [r7, #4]
		while(Almacen<6)
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d9f7      	bls.n	8002138 <main+0x78>
		}

		if(Almacen>250)
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	2bfa      	cmp	r3, #250	; 0xfa
 800214c:	d90d      	bls.n	800216a <main+0xaa>
		{
			i++;
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	71fb      	strb	r3, [r7, #7]
			if(i>=Valor)i=0;
 800215a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbdd      	blt.n	8002120 <main+0x60>
 8002164:	2300      	movs	r3, #0
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	e7da      	b.n	8002120 <main+0x60>
		}else
		{
			i--;
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	71fb      	strb	r3, [r7, #7]

			if(i<0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	dad0      	bge.n	8002120 <main+0x60>
			{
				i=Valor-1;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	71fb      	strb	r3, [r7, #7]
		Almacen = 0;
 8002188:	e7ca      	b.n	8002120 <main+0x60>
 800218a:	bf00      	nop
 800218c:	2000033c 	.word	0x2000033c
 8002190:	20000034 	.word	0x20000034
 8002194:	200000c4 	.word	0x200000c4
 8002198:	20000000 	.word	0x20000000

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	; 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	2234      	movs	r2, #52	; 0x34
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 f9a3 	bl	80044f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <SystemClock_Config+0xd4>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a29      	ldr	r2, [pc, #164]	; (8002270 <SystemClock_Config+0xd4>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <SystemClock_Config+0xd4>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021dc:	2300      	movs	r3, #0
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <SystemClock_Config+0xd8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <SystemClock_Config+0xd8>)
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <SystemClock_Config+0xd8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002204:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002206:	2302      	movs	r3, #2
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002210:	2304      	movs	r3, #4
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002214:	2378      	movs	r3, #120	; 0x78
 8002216:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002218:	2302      	movs	r3, #2
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800221c:	2302      	movs	r3, #2
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002220:	2302      	movs	r3, #2
 8002222:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fabb 	bl	80037a4 <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002234:	f000 f856 	bl	80022e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	2302      	movs	r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002244:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002248:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800224a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800224e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	2104      	movs	r1, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f001 f81e 	bl	8003298 <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002262:	f000 f83f 	bl	80022e4 <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	; 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_GPIO_Init+0x68>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <MX_GPIO_Init+0x68>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_GPIO_Init+0x68>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_GPIO_Init+0x68>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_MspInit+0x4c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <HAL_MspInit+0x4c>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_MspInit+0x4c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a08      	ldr	r2, [pc, #32]	; (8002340 <HAL_MspInit+0x4c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_MspInit+0x4c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002332:	2007      	movs	r0, #7
 8002334:	f000 fdb6 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002398:	f000 f894 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <SystemInit+0x28>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <SystemInit+0x28>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SystemInit+0x28>)
 80023b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ba:	609a      	str	r2, [r3, #8]
#endif
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
  ldr  r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f6:	f7ff ffd3 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f002 f84d 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fe5f 	bl	80020c0 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002408:	08004694 	.word	0x08004694
  ldr  r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002410:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002414:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002418:	20000358 	.word	0x20000358

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 fd2b 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff ff4e 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd35 	bl	8002ef2 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 fd0b 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000000c 	.word	0x2000000c
 80024bc:	20000014 	.word	0x20000014
 80024c0:	20000010 	.word	0x20000010

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000014 	.word	0x20000014
 80024e8:	20000354 	.word	0x20000354

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000354 	.word	0x20000354

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_Delay+0x40>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000014 	.word	0x20000014

08002548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e033      	b.n	80025c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fa78 	bl	8001a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800258e:	f023 0302 	bic.w	r3, r3, #2
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fad4 	bl	8002b48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
 80025b6:	e001      	b.n	80025bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Start+0x1a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e0a5      	b.n	8002736 <HAL_ADC_Start+0x166>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d018      	beq.n	8002632 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_ADC_Start+0x174>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4c      	ldr	r2, [pc, #304]	; (8002748 <HAL_ADC_Start+0x178>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9a      	lsrs	r2, r3, #18
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002624:	e002      	b.n	800262c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d179      	bne.n	8002734 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800266a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d106      	bne.n	800268e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f023 0206 	bic.w	r2, r3, #6
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
 800268c:	e002      	b.n	8002694 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_ADC_Start+0x17c>)
 800269e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12a      	bne.n	800270c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_ADC_Start+0x180>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d015      	beq.n	80026ec <HAL_ADC_Start+0x11c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_ADC_Start+0x184>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_Start+0x106>
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_ADC_Start+0x17c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_ADC_Start+0x188>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d129      	bne.n	8002734 <HAL_ADC_Start+0x164>
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_ADC_Start+0x17c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d823      	bhi.n	8002734 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11c      	bne.n	8002734 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	e013      	b.n	8002734 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_ADC_Start+0x180>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10e      	bne.n	8002734 <HAL_ADC_Start+0x164>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002732:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000000c 	.word	0x2000000c
 8002748:	431bde83 	.word	0x431bde83
 800274c:	40012300 	.word	0x40012300
 8002750:	40012000 	.word	0x40012000
 8002754:	40012100 	.word	0x40012100
 8002758:	40012200 	.word	0x40012200

0800275c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Stop+0x16>
 800276e:	2302      	movs	r3, #2
 8002770:	e021      	b.n	80027b6 <HAL_ADC_Stop+0x5a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d113      	bne.n	8002808 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d10b      	bne.n	8002808 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e05c      	b.n	80028c2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002808:	f7ff fe70 	bl	80024ec <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800280e:	e01a      	b.n	8002846 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d016      	beq.n	8002846 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_PollForConversion+0x6c>
 800281e:	f7ff fe65 	bl	80024ec <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d20b      	bcs.n	8002846 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0204 	orr.w	r2, r3, #4
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e03d      	b.n	80028c2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d1dd      	bne.n	8002810 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0212 	mvn.w	r2, #18
 800285c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d123      	bne.n	80028c0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11f      	bne.n	80028c0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e113      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x244>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b09      	cmp	r3, #9
 800290e:	d925      	bls.n	800295c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	3b1e      	subs	r3, #30
 8002926:	2207      	movs	r2, #7
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43da      	mvns	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	400a      	ands	r2, r1
 8002934:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	4603      	mov	r3, r0
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4403      	add	r3, r0
 800294e:	3b1e      	subs	r3, #30
 8002950:	409a      	lsls	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e022      	b.n	80029a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6919      	ldr	r1, [r3, #16]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	2207      	movs	r2, #7
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	400a      	ands	r2, r1
 800297e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	4603      	mov	r3, r0
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4403      	add	r3, r0
 8002998:	409a      	lsls	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d824      	bhi.n	80029f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	3b05      	subs	r3, #5
 80029bc:	221f      	movs	r2, #31
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	400a      	ands	r2, r1
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b05      	subs	r3, #5
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
 80029f2:	e04c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d824      	bhi.n	8002a46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b23      	subs	r3, #35	; 0x23
 8002a0e:	221f      	movs	r2, #31
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43da      	mvns	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b23      	subs	r3, #35	; 0x23
 8002a38:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
 8002a44:	e023      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b41      	subs	r3, #65	; 0x41
 8002a58:	221f      	movs	r2, #31
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	400a      	ands	r2, r1
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b41      	subs	r3, #65	; 0x41
 8002a82:	fa00 f203 	lsl.w	r2, r0, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_ADC_ConfigChannel+0x250>)
 8002a90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_ADC_ConfigChannel+0x254>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10f      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d8>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b12      	cmp	r3, #18
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <HAL_ADC_ConfigChannel+0x254>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12b      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x23a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_ADC_ConfigChannel+0x258>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b11      	cmp	r3, #17
 8002ad6:	d122      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_ADC_ConfigChannel+0x258>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d111      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_ADC_ConfigChannel+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x260>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	0c9a      	lsrs	r2, r3, #18
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b10:	e002      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f9      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40012300 	.word	0x40012300
 8002b38:	40012000 	.word	0x40012000
 8002b3c:	10000012 	.word	0x10000012
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b50:	4b79      	ldr	r3, [pc, #484]	; (8002d38 <ADC_Init+0x1f0>)
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <ADC_Init+0x1f4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e00f      	b.n	8002c46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0202 	bic.w	r2, r2, #2
 8002c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
 8002c60:	005a      	lsls	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	035a      	lsls	r2, r3, #13
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e007      	b.n	8002cbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	051a      	lsls	r2, r3, #20
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfe:	025a      	lsls	r2, r3, #9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	029a      	lsls	r2, r3, #10
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012300 	.word	0x40012300
 8002d3c:	0f000001 	.word	0x0f000001

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff47 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff5c 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffb0 	bl	8002e60 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	e165      	b.n	80031f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 8154 	bne.w	80031ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d00b      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f5a:	2b11      	cmp	r3, #17
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0xfc>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b12      	cmp	r3, #18
 8003006:	d123      	bne.n	8003050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80ae 	beq.w	80031ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_GPIO_Init+0x2fc>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <HAL_GPIO_Init+0x2fc>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_GPIO_Init+0x2fc>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_Init+0x300>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4e      	ldr	r2, [pc, #312]	; (8003210 <HAL_GPIO_Init+0x304>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <HAL_GPIO_Init+0x308>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x216>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_GPIO_Init+0x30c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x212>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	; (800321c <HAL_GPIO_Init+0x310>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	; (8003220 <HAL_GPIO_Init+0x314>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x20a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a49      	ldr	r2, [pc, #292]	; (8003224 <HAL_GPIO_Init+0x318>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x206>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a48      	ldr	r2, [pc, #288]	; (8003228 <HAL_GPIO_Init+0x31c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x202>
 800310a:	2306      	movs	r3, #6
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800310e:	2307      	movs	r3, #7
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x21c>
 8003126:	2300      	movs	r3, #0
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003138:	4934      	ldr	r1, [pc, #208]	; (800320c <HAL_GPIO_Init+0x300>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_GPIO_Init+0x320>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800316a:	4a30      	ldr	r2, [pc, #192]	; (800322c <HAL_GPIO_Init+0x320>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_GPIO_Init+0x320>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003194:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_GPIO_Init+0x320>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_GPIO_Init+0x320>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031be:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_GPIO_Init+0x320>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_GPIO_Init+0x320>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e8:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_GPIO_Init+0x320>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	f67f ae96 	bls.w	8002f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	3724      	adds	r7, #36	; 0x24
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40013c00 	.word	0x40013c00

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	401a      	ands	r2, r3
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	429a      	cmp	r2, r3
 800327a:	d104      	bne.n	8003286 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	041a      	lsls	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003284:	e002      	b.n	800328c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0cc      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d90c      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b65      	ldr	r3, [pc, #404]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a58      	ldr	r2, [pc, #352]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800330e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d044      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d119      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e067      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4934      	ldr	r1, [pc, #208]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7ff f8b0 	bl	80024ec <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7ff f8ac 	bl	80024ec <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e04f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d20c      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f821 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003422:	4601      	mov	r1, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	fa21 f303 	lsr.w	r3, r1, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f810 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	08004674 	.word	0x08004674
 800345c:	2000000c 	.word	0x2000000c
 8003460:	20000010 	.word	0x20000010

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347e:	4bc6      	ldr	r3, [pc, #792]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b0c      	cmp	r3, #12
 8003488:	f200 817e 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x324>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <HAL_RCC_GetSysClockFreq+0x30>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034c9 	.word	0x080034c9
 8003498:	08003789 	.word	0x08003789
 800349c:	08003789 	.word	0x08003789
 80034a0:	08003789 	.word	0x08003789
 80034a4:	080034cf 	.word	0x080034cf
 80034a8:	08003789 	.word	0x08003789
 80034ac:	08003789 	.word	0x08003789
 80034b0:	08003789 	.word	0x08003789
 80034b4:	080034d5 	.word	0x080034d5
 80034b8:	08003789 	.word	0x08003789
 80034bc:	08003789 	.word	0x08003789
 80034c0:	08003789 	.word	0x08003789
 80034c4:	08003631 	.word	0x08003631
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4bb4      	ldr	r3, [pc, #720]	; (800379c <HAL_RCC_GetSysClockFreq+0x338>)
 80034ca:	613b      	str	r3, [r7, #16]
       break;
 80034cc:	e15f      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4bb4      	ldr	r3, [pc, #720]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80034d0:	613b      	str	r3, [r7, #16]
      break;
 80034d2:	e15c      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4bb0      	ldr	r3, [pc, #704]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4bae      	ldr	r3, [pc, #696]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04a      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4bab      	ldr	r3, [pc, #684]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	f04f 0400 	mov.w	r4, #0
 80034f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea03 0501 	and.w	r5, r3, r1
 8003500:	ea04 0602 	and.w	r6, r4, r2
 8003504:	4629      	mov	r1, r5
 8003506:	4632      	mov	r2, r6
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f04f 0400 	mov.w	r4, #0
 8003510:	0154      	lsls	r4, r2, #5
 8003512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003516:	014b      	lsls	r3, r1, #5
 8003518:	4619      	mov	r1, r3
 800351a:	4622      	mov	r2, r4
 800351c:	1b49      	subs	r1, r1, r5
 800351e:	eb62 0206 	sbc.w	r2, r2, r6
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f04f 0400 	mov.w	r4, #0
 800352a:	0194      	lsls	r4, r2, #6
 800352c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003530:	018b      	lsls	r3, r1, #6
 8003532:	1a5b      	subs	r3, r3, r1
 8003534:	eb64 0402 	sbc.w	r4, r4, r2
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	00e2      	lsls	r2, r4, #3
 8003542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003546:	00d9      	lsls	r1, r3, #3
 8003548:	460b      	mov	r3, r1
 800354a:	4614      	mov	r4, r2
 800354c:	195b      	adds	r3, r3, r5
 800354e:	eb44 0406 	adc.w	r4, r4, r6
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	0262      	lsls	r2, r4, #9
 800355c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003560:	0259      	lsls	r1, r3, #9
 8003562:	460b      	mov	r3, r1
 8003564:	4614      	mov	r4, r2
 8003566:	4618      	mov	r0, r3
 8003568:	4621      	mov	r1, r4
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f04f 0400 	mov.w	r4, #0
 8003570:	461a      	mov	r2, r3
 8003572:	4623      	mov	r3, r4
 8003574:	f7fc fe4e 	bl	8000214 <__aeabi_uldivmod>
 8003578:	4603      	mov	r3, r0
 800357a:	460c      	mov	r4, r1
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e049      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	ea03 0501 	and.w	r5, r3, r1
 8003596:	ea04 0602 	and.w	r6, r4, r2
 800359a:	4629      	mov	r1, r5
 800359c:	4632      	mov	r2, r6
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	0154      	lsls	r4, r2, #5
 80035a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035ac:	014b      	lsls	r3, r1, #5
 80035ae:	4619      	mov	r1, r3
 80035b0:	4622      	mov	r2, r4
 80035b2:	1b49      	subs	r1, r1, r5
 80035b4:	eb62 0206 	sbc.w	r2, r2, r6
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f04f 0400 	mov.w	r4, #0
 80035c0:	0194      	lsls	r4, r2, #6
 80035c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035c6:	018b      	lsls	r3, r1, #6
 80035c8:	1a5b      	subs	r3, r3, r1
 80035ca:	eb64 0402 	sbc.w	r4, r4, r2
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035dc:	00d9      	lsls	r1, r3, #3
 80035de:	460b      	mov	r3, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	195b      	adds	r3, r3, r5
 80035e4:	eb44 0406 	adc.w	r4, r4, r6
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	02a2      	lsls	r2, r4, #10
 80035f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035f6:	0299      	lsls	r1, r3, #10
 80035f8:	460b      	mov	r3, r1
 80035fa:	4614      	mov	r4, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	4621      	mov	r1, r4
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	461a      	mov	r2, r3
 8003608:	4623      	mov	r3, r4
 800360a:	f7fc fe03 	bl	8000214 <__aeabi_uldivmod>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003614:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	613b      	str	r3, [r7, #16]
      break;
 800362e:	e0ae      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04a      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	ea03 0501 	and.w	r5, r3, r1
 800365c:	ea04 0602 	and.w	r6, r4, r2
 8003660:	4629      	mov	r1, r5
 8003662:	4632      	mov	r2, r6
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	f04f 0400 	mov.w	r4, #0
 800366c:	0154      	lsls	r4, r2, #5
 800366e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003672:	014b      	lsls	r3, r1, #5
 8003674:	4619      	mov	r1, r3
 8003676:	4622      	mov	r2, r4
 8003678:	1b49      	subs	r1, r1, r5
 800367a:	eb62 0206 	sbc.w	r2, r2, r6
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f04f 0400 	mov.w	r4, #0
 8003686:	0194      	lsls	r4, r2, #6
 8003688:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800368c:	018b      	lsls	r3, r1, #6
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	eb64 0402 	sbc.w	r4, r4, r2
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	00e2      	lsls	r2, r4, #3
 800369e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036a2:	00d9      	lsls	r1, r3, #3
 80036a4:	460b      	mov	r3, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	195b      	adds	r3, r3, r5
 80036aa:	eb44 0406 	adc.w	r4, r4, r6
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	0262      	lsls	r2, r4, #9
 80036b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036bc:	0259      	lsls	r1, r3, #9
 80036be:	460b      	mov	r3, r1
 80036c0:	4614      	mov	r4, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	4621      	mov	r1, r4
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	f7fc fda0 	bl	8000214 <__aeabi_uldivmod>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e049      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036dc:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	f04f 0400 	mov.w	r4, #0
 80036e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	ea03 0501 	and.w	r5, r3, r1
 80036f2:	ea04 0602 	and.w	r6, r4, r2
 80036f6:	4629      	mov	r1, r5
 80036f8:	4632      	mov	r2, r6
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f04f 0400 	mov.w	r4, #0
 8003702:	0154      	lsls	r4, r2, #5
 8003704:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003708:	014b      	lsls	r3, r1, #5
 800370a:	4619      	mov	r1, r3
 800370c:	4622      	mov	r2, r4
 800370e:	1b49      	subs	r1, r1, r5
 8003710:	eb62 0206 	sbc.w	r2, r2, r6
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	f04f 0400 	mov.w	r4, #0
 800371c:	0194      	lsls	r4, r2, #6
 800371e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003722:	018b      	lsls	r3, r1, #6
 8003724:	1a5b      	subs	r3, r3, r1
 8003726:	eb64 0402 	sbc.w	r4, r4, r2
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	00e2      	lsls	r2, r4, #3
 8003734:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003738:	00d9      	lsls	r1, r3, #3
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	195b      	adds	r3, r3, r5
 8003740:	eb44 0406 	adc.w	r4, r4, r6
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	02a2      	lsls	r2, r4, #10
 800374e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003752:	0299      	lsls	r1, r3, #10
 8003754:	460b      	mov	r3, r1
 8003756:	4614      	mov	r4, r2
 8003758:	4618      	mov	r0, r3
 800375a:	4621      	mov	r1, r4
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f04f 0400 	mov.w	r4, #0
 8003762:	461a      	mov	r2, r3
 8003764:	4623      	mov	r3, r4
 8003766:	f7fc fd55 	bl	8000214 <__aeabi_uldivmod>
 800376a:	4603      	mov	r3, r0
 800376c:	460c      	mov	r4, r1
 800376e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_GetSysClockFreq+0x334>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0f1b      	lsrs	r3, r3, #28
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	613b      	str	r3, [r7, #16]
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RCC_GetSysClockFreq+0x338>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	693b      	ldr	r3, [r7, #16]
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8083 	beq.w	80038c4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037be:	4b95      	ldr	r3, [pc, #596]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d019      	beq.n	80037fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ca:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037d6:	4b8f      	ldr	r3, [pc, #572]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e2:	d00c      	beq.n	80037fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e4:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	d112      	bne.n	8003816 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f0:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fc:	d10b      	bne.n	8003816 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fe:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d05b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x11e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d157      	bne.n	80038c2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e216      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x8a>
 8003820:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7b      	ldr	r2, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e01d      	b.n	800386a <HAL_RCC_OscConfig+0xc6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003836:	d10c      	bne.n	8003852 <HAL_RCC_OscConfig+0xae>
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800383e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a72      	ldr	r2, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800384a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e00b      	b.n	800386a <HAL_RCC_OscConfig+0xc6>
 8003852:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6c      	ldr	r2, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fe3b 	bl	80024ec <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387a:	f7fe fe37 	bl	80024ec <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b64      	cmp	r3, #100	; 0x64
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1db      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0xd6>
 8003898:	e014      	b.n	80038c4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fe fe27 	bl	80024ec <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a2:	f7fe fe23 	bl	80024ec <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1c7      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f0      	bne.n	80038a2 <HAL_RCC_OscConfig+0xfe>
 80038c0:	e000      	b.n	80038c4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d06f      	beq.n	80039b0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038e8:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f4:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d11c      	bne.n	800393a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003900:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x180>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e18f      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4938      	ldr	r1, [pc, #224]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003938:	e03a      	b.n	80039b0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d020      	beq.n	8003984 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe fdd0 	bl	80024ec <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003950:	f7fe fdcc 	bl	80024ec <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e170      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4925      	ldr	r1, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
 8003982:	e015      	b.n	80039b0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fdaf 	bl	80024ec <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fdab 	bl	80024ec <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e14f      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d037      	beq.n	8003a2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d016      	beq.n	80039f2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x278>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe fd8f 	bl	80024ec <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d2:	f7fe fd8b 	bl	80024ec <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e12f      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 80039e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x22e>
 80039f0:	e01c      	b.n	8003a2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_OscConfig+0x278>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fd78 	bl	80024ec <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fe:	e00f      	b.n	8003a20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fd74 	bl	80024ec <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d908      	bls.n	8003a20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e118      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000
 8003a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b8a      	ldr	r3, [pc, #552]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e9      	bne.n	8003a00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b83      	ldr	r3, [pc, #524]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fe fd33 	bl	80024ec <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe fd2f 	bl	80024ec <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0d3      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x31a>
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a65      	ldr	r2, [pc, #404]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x354>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x33c>
 8003ac6:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a60      	ldr	r2, [pc, #384]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a5d      	ldr	r2, [pc, #372]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x354>
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe fcf4 	bl	80024ec <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fcf0 	bl	80024ec <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e092      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCC_OscConfig+0x364>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fcde 	bl	80024ec <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe fcda 	bl	80024ec <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e07c      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ee      	bne.n	8003b34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d068      	beq.n	8003c42 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b70:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d060      	beq.n	8003c3e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d145      	bne.n	8003c10 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b84:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fcaf 	bl	80024ec <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe fcab 	bl	80024ec <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e04f      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba4:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	071b      	lsls	r3, r3, #28
 8003bdc:	491b      	ldr	r1, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe fc80 	bl	80024ec <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe fc7c 	bl	80024ec <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e020      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x44c>
 8003c0e:	e018      	b.n	8003c42 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe fc69 	bl	80024ec <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fc65 	bl	80024ec <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e009      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x4a8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x47a>
 8003c3c:	e001      	b.n	8003c42 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060

08003c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e056      	b.n	8003d18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd fc95 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	ea42 0103 	orr.w	r1, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	f003 0104 	and.w	r1, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3c:	d112      	bne.n	8003d64 <HAL_SPI_Receive+0x44>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f8e9 	bl	8003f32 <HAL_SPI_TransmitReceive>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e0e2      	b.n	8003f2a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_Receive+0x52>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0db      	b.n	8003f2a <HAL_SPI_Receive+0x20a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fe fbb7 	bl	80024ec <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d90:	e0c2      	b.n	8003f18 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Receive+0x7e>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003da2:	e0b9      	b.n	8003f18 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2204      	movs	r2, #4
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d107      	bne.n	8003dfc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d007      	beq.n	8003e1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d162      	bne.n	8003ee8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e22:	e02e      	b.n	8003e82 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d115      	bne.n	8003e5e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f103 020c 	add.w	r2, r3, #12
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5c:	e011      	b.n	8003e82 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fe fb45 	bl	80024ec <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <HAL_SPI_Receive+0x156>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Receive+0x15c>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e80:	e04a      	b.n	8003f18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1cb      	bne.n	8003e24 <HAL_SPI_Receive+0x104>
 8003e8c:	e031      	b.n	8003ef2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d113      	bne.n	8003ec4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec2:	e011      	b.n	8003ee8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec4:	f7fe fb12 	bl	80024ec <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d803      	bhi.n	8003edc <HAL_SPI_Receive+0x1bc>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_Receive+0x1c2>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ee6:	e017      	b.n	8003f18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1cd      	bne.n	8003e8e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fa27 	bl	800434a <SPI_EndRxTransaction>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
 8003f14:	e000      	b.n	8003f18 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b08c      	sub	sp, #48	; 0x30
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f40:	2301      	movs	r3, #1
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x26>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e18a      	b.n	800426e <HAL_SPI_TransmitReceive+0x33c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f60:	f7fe fac4 	bl	80024ec <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d00f      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x70>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f88:	d107      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x68>
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fa0:	e15b      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x82>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x82>
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fba:	e14e      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d003      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	887a      	ldrh	r2, [r7, #2]
 8003ff2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d007      	beq.n	8004024 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402c:	d178      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_TransmitReceive+0x10a>
 8004036:	8b7b      	ldrh	r3, [r7, #26]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d166      	bne.n	800410a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004060:	e053      	b.n	800410a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d11b      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x176>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x176>
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d113      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d119      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x1b8>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d014      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	b292      	uxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	1c9a      	adds	r2, r3, #2
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e6:	2301      	movs	r3, #1
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ea:	f7fe f9ff 	bl	80024ec <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d807      	bhi.n	800410a <HAL_SPI_TransmitReceive+0x1d8>
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d003      	beq.n	800410a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004108:	e0a7      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1a6      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x130>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1a1      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x130>
 800411e:	e07c      	b.n	800421a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_SPI_TransmitReceive+0x1fc>
 8004128:	8b7b      	ldrh	r3, [r7, #26]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d16b      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004154:	e057      	b.n	8004206 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d11c      	bne.n	800419e <HAL_SPI_TransmitReceive+0x26c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d017      	beq.n	800419e <HAL_SPI_TransmitReceive+0x26c>
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d114      	bne.n	800419e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d119      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x2ae>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d014      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041dc:	2301      	movs	r3, #1
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e0:	f7fe f984 	bl	80024ec <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d803      	bhi.n	80041f8 <HAL_SPI_TransmitReceive+0x2c6>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d102      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x2cc>
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004204:	e029      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1a2      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x224>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d19d      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f8f8 	bl	8004414 <SPI_EndRxTxTransaction>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004236:	e010      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	e000      	b.n	800425a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800426a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800426e:	4618      	mov	r0, r3
 8004270:	3730      	adds	r7, #48	; 0x30
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004286:	e04c      	b.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d048      	beq.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004290:	f7fe f92c 	bl	80024ec <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d13d      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042be:	d111      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	d004      	beq.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d2:	d107      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ec:	d10f      	bne.n	800430e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00f      	b.n	8004342 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	429a      	cmp	r2, r3
 800433e:	d1a3      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af02      	add	r7, sp, #8
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d111      	bne.n	8004384 <SPI_EndRxTransaction+0x3a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d107      	bne.n	8004384 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d12a      	bne.n	80043e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d012      	beq.n	80043be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff67 	bl	8004276 <SPI_WaitFlagStateUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02d      	beq.n	800440a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e026      	b.n	800440c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2101      	movs	r1, #1
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7ff ff54 	bl	8004276 <SPI_WaitFlagStateUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01a      	beq.n	800440a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e013      	b.n	800440c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2101      	movs	r1, #1
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff41 	bl	8004276 <SPI_WaitFlagStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e000      	b.n	800440c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <SPI_EndRxTxTransaction+0x7c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <SPI_EndRxTxTransaction+0x80>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	0d5b      	lsrs	r3, r3, #21
 800442c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443e:	d112      	bne.n	8004466 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff ff13 	bl	8004276 <SPI_WaitFlagStateUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3b01      	subs	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	d0f2      	beq.n	8004466 <SPI_EndRxTxTransaction+0x52>
 8004480:	e000      	b.n	8004484 <SPI_EndRxTxTransaction+0x70>
        break;
 8004482:	bf00      	nop
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	165e9f81 	.word	0x165e9f81

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4e0d      	ldr	r6, [pc, #52]	; (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	; (80044d4 <__libc_init_array+0x3c>)
 800449e:	1ba4      	subs	r4, r4, r6
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2500      	movs	r5, #0
 80044a4:	42a5      	cmp	r5, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4e0b      	ldr	r6, [pc, #44]	; (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	; (80044dc <__libc_init_array+0x44>)
 80044ac:	f000 f834 	bl	8004518 <_init>
 80044b0:	1ba4      	subs	r4, r4, r6
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2500      	movs	r5, #0
 80044b6:	42a5      	cmp	r5, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c0:	4798      	blx	r3
 80044c2:	3501      	adds	r5, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ca:	4798      	blx	r3
 80044cc:	3501      	adds	r5, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	0800468c 	.word	0x0800468c
 80044d4:	0800468c 	.word	0x0800468c
 80044d8:	0800468c 	.word	0x0800468c
 80044dc:	08004690 	.word	0x08004690

080044e0 <memcpy>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	1e43      	subs	r3, r0, #1
 80044e4:	440a      	add	r2, r1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	d100      	bne.n	80044ec <memcpy+0xc>
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f4:	e7f7      	b.n	80044e6 <memcpy+0x6>

080044f6 <memset>:
 80044f6:	4402      	add	r2, r0
 80044f8:	4603      	mov	r3, r0
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d100      	bne.n	8004500 <memset+0xa>
 80044fe:	4770      	bx	lr
 8004500:	f803 1b01 	strb.w	r1, [r3], #1
 8004504:	e7f9      	b.n	80044fa <memset+0x4>

08004506 <strcpy>:
 8004506:	4603      	mov	r3, r0
 8004508:	f811 2b01 	ldrb.w	r2, [r1], #1
 800450c:	f803 2b01 	strb.w	r2, [r3], #1
 8004510:	2a00      	cmp	r2, #0
 8004512:	d1f9      	bne.n	8004508 <strcpy+0x2>
 8004514:	4770      	bx	lr
	...

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
